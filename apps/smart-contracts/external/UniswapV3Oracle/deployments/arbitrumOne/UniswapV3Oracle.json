{
  "address": "0xA8C2682a616cC8c5848d531793678D945388955f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV3Factory",
          "name": "_UNISWAP_V3_FACTORY",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_CARDINALITY_PER_MINUTE",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CARDINALITY_PER_MINUTE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNISWAP_V3_FACTORY",
      "outputs": [
        {
          "internalType": "contract IUniswapV3Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "_feeTier",
          "type": "uint24"
        }
      ],
      "name": "addNewFeeTier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "name": "getAllPoolsForPair",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "name": "isPairSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_cardinality",
          "type": "uint16"
        }
      ],
      "name": "prepareAllAvailablePoolsWithCardinality",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_preparedPools",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_period",
          "type": "uint32"
        }
      ],
      "name": "prepareAllAvailablePoolsWithTimePeriod",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_preparedPools",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint24[]",
          "name": "_feeTiers",
          "type": "uint24[]"
        },
        {
          "internalType": "uint16",
          "name": "_cardinality",
          "type": "uint16"
        }
      ],
      "name": "prepareSpecificFeeTiersWithCardinality",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_preparedPools",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint24[]",
          "name": "_feeTiers",
          "type": "uint24[]"
        },
        {
          "internalType": "uint32",
          "name": "_period",
          "type": "uint32"
        }
      ],
      "name": "prepareSpecificFeeTiersWithTimePeriod",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_preparedPools",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        },
        {
          "internalType": "uint16",
          "name": "_cardinality",
          "type": "uint16"
        }
      ],
      "name": "prepareSpecificPoolsWithCardinality",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        },
        {
          "internalType": "uint32",
          "name": "_period",
          "type": "uint32"
        }
      ],
      "name": "prepareSpecificPoolsWithTimePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_baseAmount",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "_baseToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_quoteToken",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_period",
          "type": "uint32"
        }
      ],
      "name": "quoteAllAvailablePoolsWithTimePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_quoteAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_queriedPools",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_baseAmount",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "_baseToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_quoteToken",
          "type": "address"
        },
        {
          "internalType": "uint24[]",
          "name": "_feeTiers",
          "type": "uint24[]"
        },
        {
          "internalType": "uint32",
          "name": "_period",
          "type": "uint32"
        }
      ],
      "name": "quoteSpecificFeeTiersWithTimePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_quoteAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_queriedPools",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_baseAmount",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "_baseToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_quoteToken",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        },
        {
          "internalType": "uint32",
          "name": "_period",
          "type": "uint32"
        }
      ],
      "name": "quoteSpecificPoolsWithTimePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_quoteAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supportedFeeTiers",
      "outputs": [
        {
          "internalType": "uint24[]",
          "name": "",
          "type": "uint24[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x63a3600b0b726bbc84037f5b975980e11a17502ee968d2f991815b845bea6c09",
  "receipt": {
    "to": null,
    "from": "0x4F05Cf239a8BC2bfdA92673bC3c8a87E091b6D97",
    "contractAddress": "0xA8C2682a616cC8c5848d531793678D945388955f",
    "transactionIndex": 1,
    "gasUsed": "25423834",
    "logsBloom": "0x
    "blockHash": "0x07494b7f0bf27cdb2325487eaf1146cb36dc1d30d46a18b5f223c5749fd0a8ed",
    "transactionHash": "0x63a3600b0b726bbc84037f5b975980e11a17502ee968d2f991815b845bea6c09",
    "logs": [],
    "blockNumber": 67415168,
    "cumulativeGasUsed": "25423834",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x1F98431c8aD98523631AE4a59f267346ea31F984", 200],
  "numDeployments": 1,
  "solcInputHash": "3f75ecca3cfa2235c95374b5d9aa292e",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IUniswapV3Factory\",\"name\":\"_UNISWAP_V3_FACTORY\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_CARDINALITY_PER_MINUTE\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CARDINALITY_PER_MINUTE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_V3_FACTORY\",\"outputs\":[{\"internalType\":\"contract IUniswapV3Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_feeTier\",\"type\":\"uint24\"}],\"name\":\"addNewFeeTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"getAllPoolsForPair\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"isPairSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_cardinality\",\"type\":\"uint16\"}],\"name\":\"prepareAllAvailablePoolsWithCardinality\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_preparedPools\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_period\",\"type\":\"uint32\"}],\"name\":\"prepareAllAvailablePoolsWithTimePeriod\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_preparedPools\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24[]\",\"name\":\"_feeTiers\",\"type\":\"uint24[]\"},{\"internalType\":\"uint16\",\"name\":\"_cardinality\",\"type\":\"uint16\"}],\"name\":\"prepareSpecificFeeTiersWithCardinality\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_preparedPools\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24[]\",\"name\":\"_feeTiers\",\"type\":\"uint24[]\"},{\"internalType\":\"uint32\",\"name\":\"_period\",\"type\":\"uint32\"}],\"name\":\"prepareSpecificFeeTiersWithTimePeriod\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_preparedPools\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"uint16\",\"name\":\"_cardinality\",\"type\":\"uint16\"}],\"name\":\"prepareSpecificPoolsWithCardinality\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"uint32\",\"name\":\"_period\",\"type\":\"uint32\"}],\"name\":\"prepareSpecificPoolsWithTimePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_baseAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_period\",\"type\":\"uint32\"}],\"name\":\"quoteAllAvailablePoolsWithTimePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_quoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_queriedPools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_baseAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint24[]\",\"name\":\"_feeTiers\",\"type\":\"uint24[]\"},{\"internalType\":\"uint32\",\"name\":\"_period\",\"type\":\"uint32\"}],\"name\":\"quoteSpecificFeeTiersWithTimePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_quoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_queriedPools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_baseAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quoteToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"uint32\",\"name\":\"_period\",\"type\":\"uint32\"}],\"name\":\"quoteSpecificPoolsWithTimePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_quoteAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportedFeeTiers\",\"outputs\":[{\"internalType\":\"uint24[]\",\"name\":\"\",\"type\":\"uint24[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addNewFeeTier(uint24)\":{\"details\":\"Will revert if the given tier is invalid, or already supported\",\"params\":{\"feeTier\":\"The new fee tier to add\"}},\"getAllPoolsForPair(address,address)\":{\"details\":\"The pair can be provided in tokenA/tokenB or tokenB/tokenA order\",\"returns\":{\"_0\":\"All existing pools for the given pair\"}},\"isPairSupported(address,address)\":{\"details\":\"The pair can be provided in tokenA/tokenB or tokenB/tokenA order\",\"returns\":{\"_0\":\"Whether the given pair can be supported by the oracle\"}},\"prepareAllAvailablePoolsWithCardinality(address,address,uint16)\":{\"details\":\"Will revert if there are no pools available for the pair and period combination\",\"params\":{\"cardinality\":\"The cardinality that will be guaranteed when quoting\",\"tokenA\":\"One of the pair's tokens\",\"tokenB\":\"The other of the pair's tokens\"},\"returns\":{\"_preparedPools\":\"The pools that were prepared\"}},\"prepareAllAvailablePoolsWithTimePeriod(address,address,uint32)\":{\"details\":\"Will revert if there are no pools available for the pair and period combination\",\"params\":{\"period\":\"The period that will be guaranteed when quoting\",\"tokenA\":\"One of the pair's tokens\",\"tokenB\":\"The other of the pair's tokens\"},\"returns\":{\"_preparedPools\":\"The pools that were prepared\"}},\"prepareSpecificFeeTiersWithCardinality(address,address,uint24[],uint16)\":{\"details\":\"Will revert if the pair does not have a pool for a given fee tier\",\"params\":{\"cardinality\":\"The cardinality that will be guaranteed when quoting\",\"feeTiers\":\"The fee tiers to consider when searching for the pair's pools\",\"tokenA\":\"One of the pair's tokens\",\"tokenB\":\"The other of the pair's tokens\"},\"returns\":{\"_preparedPools\":\"The pools that were prepared\"}},\"prepareSpecificFeeTiersWithTimePeriod(address,address,uint24[],uint32)\":{\"details\":\"Will revert if the pair does not have a pool for a given fee tier\",\"params\":{\"feeTiers\":\"The fee tiers to consider when searching for the pair's pools\",\"period\":\"The period that will be guaranteed when quoting\",\"tokenA\":\"One of the pair's tokens\",\"tokenB\":\"The other of the pair's tokens\"},\"returns\":{\"_preparedPools\":\"The pools that were prepared\"}},\"prepareSpecificPoolsWithCardinality(address[],uint16)\":{\"params\":{\"cardinality\":\"The cardinality that will be guaranteed when quoting\",\"pools\":\"The pools to initialize\"}},\"prepareSpecificPoolsWithTimePeriod(address[],uint32)\":{\"params\":{\"period\":\"The period that will be guaranteed when quoting\",\"pools\":\"The pools to initialize\"}},\"quoteAllAvailablePoolsWithTimePeriod(uint128,address,address,uint32)\":{\"details\":\"If some pools are not configured correctly for the given period, then they will be ignoredWill revert if there are no pools available/configured for the pair and period combination\",\"params\":{\"baseAmount\":\"Amount of token to be converted\",\"baseToken\":\"Address of an ERC20 token contract used as the baseAmount denomination\",\"period\":\"Number of seconds from which to calculate the TWAP\",\"quoteToken\":\"Address of an ERC20 token contract used as the quoteAmount denomination\"},\"returns\":{\"_queriedPools\":\"The pools that were queried to calculate the quote\",\"_quoteAmount\":\"Amount of quoteToken received for baseAmount of baseToken\"}},\"quoteSpecificFeeTiersWithTimePeriod(uint128,address,address,uint24[],uint32)\":{\"details\":\"Will revert if the pair does not have a pool for one of the given fee tiers, or if one of the pools is not prepared/configured correctly for the given period\",\"params\":{\"baseAmount\":\"Amount of token to be converted\",\"baseToken\":\"Address of an ERC20 token contract used as the baseAmount denomination\",\"feeTiers\":\"The fee tiers to consider when calculating the quote\",\"period\":\"Number of seconds from which to calculate the TWAP\",\"quoteToken\":\"Address of an ERC20 token contract used as the quoteAmount denomination\"},\"returns\":{\"_queriedPools\":\"The pools that were queried to calculate the quote\",\"_quoteAmount\":\"Amount of quoteToken received for baseAmount of baseToken\"}},\"quoteSpecificPoolsWithTimePeriod(uint128,address,address,address[],uint32)\":{\"details\":\"Will revert if one of the pools is not prepared/configured correctly for the given period\",\"params\":{\"baseAmount\":\"Amount of token to be converted\",\"baseToken\":\"Address of an ERC20 token contract used as the baseAmount denomination\",\"period\":\"Number of seconds from which to calculate the TWAP\",\"pools\":\"The pools to consider when calculating the quote\",\"quoteToken\":\"Address of an ERC20 token contract used as the quoteAmount denomination\"},\"returns\":{\"_quoteAmount\":\"Amount of quoteToken received for baseAmount of baseToken\"}},\"supportedFeeTiers()\":{\"returns\":{\"_0\":\"The supported fee tiers\"}}},\"stateVariables\":{\"CARDINALITY_PER_MINUTE\":{\"details\":\"This value is assigned during deployment and cannot be changed\",\"return\":\"Number of observation that are needed per minute\"},\"UNISWAP_V3_FACTORY\":{\"details\":\"This value is assigned during deployment and cannot be changed\",\"return\":\"The address of the Uniswap V3 factory\"}},\"title\":\"Uniswap V3 Static Oracle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"CARDINALITY_PER_MINUTE()\":{\"notice\":\"Returns how many observations are needed per minute in Uniswap V3 oracles, on the deployed chain\"},\"UNISWAP_V3_FACTORY()\":{\"notice\":\"Returns the address of the Uniswap V3 factory\"},\"addNewFeeTier(uint24)\":{\"notice\":\"Adds support for a new fee tier\"},\"getAllPoolsForPair(address,address)\":{\"notice\":\"Returns all existing pools for the given pair\"},\"isPairSupported(address,address)\":{\"notice\":\"Returns whether a specific pair can be supported by the oracle\"},\"prepareAllAvailablePoolsWithCardinality(address,address,uint16)\":{\"notice\":\"Will increase observations for all existing pools for the given pair, so they start accruing information for twap calculations\"},\"prepareAllAvailablePoolsWithTimePeriod(address,address,uint32)\":{\"notice\":\"Will initialize all existing pools for the given pair, so that they can be queried with the given period in the future\"},\"prepareSpecificFeeTiersWithCardinality(address,address,uint24[],uint16)\":{\"notice\":\"Will increase the pair's pools with the specified fee tiers observations, so they start accruing information for twap calculations\"},\"prepareSpecificFeeTiersWithTimePeriod(address,address,uint24[],uint32)\":{\"notice\":\"Will initialize the pair's pools with the specified fee tiers, so that they can be queried with the given period in the future\"},\"prepareSpecificPoolsWithCardinality(address[],uint16)\":{\"notice\":\"Will increase all given pools observations, so they start accruing information for twap calculations\"},\"prepareSpecificPoolsWithTimePeriod(address[],uint32)\":{\"notice\":\"Will initialize all given pools, so that they can be queried with the given period in the future\"},\"quoteAllAvailablePoolsWithTimePeriod(uint128,address,address,uint32)\":{\"notice\":\"Returns a quote, based on the given tokens and amount, by querying all of the pair's pools\"},\"quoteSpecificFeeTiersWithTimePeriod(uint128,address,address,uint24[],uint32)\":{\"notice\":\"Returns a quote, based on the given tokens and amount, by querying only the specified fee tiers\"},\"quoteSpecificPoolsWithTimePeriod(uint128,address,address,address[],uint32)\":{\"notice\":\"Returns a quote, based on the given tokens and amount, by querying only the specified pools\"},\"supportedFeeTiers()\":{\"notice\":\"Returns all supported fee tiers\"}},\"notice\":\"Oracle contract for price quoting against Uniswap V3 pools\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapV3Oracle.sol\":\"UniswapV3Oracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0 <0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x50e87f7a3197525d1c6f7e04290060e848677c8a4e86c554bc6ace4a4d0d476d\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0 <0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0xda8c2c0b12d2976acfd364453ba5f5bf0117ba3c91175ee9e1067d3fb26944d9\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0 <0.8.0;\\n\\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\\n\\n/// @title Oracle library\\n/// @notice Provides functions to integrate with V3 pool oracle\\nlibrary OracleLibrary {\\n    /// @notice Calculates time-weighted means of tick and liquidity for a given Uniswap V3 pool\\n    /// @param pool Address of the pool that we want to observe\\n    /// @param secondsAgo Number of seconds in the past from which to calculate the time-weighted means\\n    /// @return arithmeticMeanTick The arithmetic mean tick from (block.timestamp - secondsAgo) to block.timestamp\\n    /// @return harmonicMeanLiquidity The harmonic mean liquidity from (block.timestamp - secondsAgo) to block.timestamp\\n    function consult(address pool, uint32 secondsAgo)\\n        internal\\n        view\\n        returns (int24 arithmeticMeanTick, uint128 harmonicMeanLiquidity)\\n    {\\n        require(secondsAgo != 0, 'BP');\\n\\n        uint32[] memory secondsAgos = new uint32[](2);\\n        secondsAgos[0] = secondsAgo;\\n        secondsAgos[1] = 0;\\n\\n        (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s) =\\n            IUniswapV3Pool(pool).observe(secondsAgos);\\n\\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\\n        uint160 secondsPerLiquidityCumulativesDelta =\\n            secondsPerLiquidityCumulativeX128s[1] - secondsPerLiquidityCumulativeX128s[0];\\n\\n        arithmeticMeanTick = int24(tickCumulativesDelta / secondsAgo);\\n        // Always round to negative infinity\\n        if (tickCumulativesDelta < 0 && (tickCumulativesDelta % secondsAgo != 0)) arithmeticMeanTick--;\\n\\n        // We are multiplying here instead of shifting to ensure that harmonicMeanLiquidity doesn't overflow uint128\\n        uint192 secondsAgoX160 = uint192(secondsAgo) * type(uint160).max;\\n        harmonicMeanLiquidity = uint128(secondsAgoX160 / (uint192(secondsPerLiquidityCumulativesDelta) << 32));\\n    }\\n\\n    /// @notice Given a tick and a token amount, calculates the amount of token received in exchange\\n    /// @param tick Tick value used to calculate the quote\\n    /// @param baseAmount Amount of token to be converted\\n    /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\\n    /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\\n    /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\\n    function getQuoteAtTick(\\n        int24 tick,\\n        uint128 baseAmount,\\n        address baseToken,\\n        address quoteToken\\n    ) internal pure returns (uint256 quoteAmount) {\\n        uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);\\n\\n        // Calculate quoteAmount with better precision if it doesn't overflow when multiplied by itself\\n        if (sqrtRatioX96 <= type(uint128).max) {\\n            uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96;\\n            quoteAmount = baseToken < quoteToken\\n                ? FullMath.mulDiv(ratioX192, baseAmount, 1 << 192)\\n                : FullMath.mulDiv(1 << 192, baseAmount, ratioX192);\\n        } else {\\n            uint256 ratioX128 = FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64);\\n            quoteAmount = baseToken < quoteToken\\n                ? FullMath.mulDiv(ratioX128, baseAmount, 1 << 128)\\n                : FullMath.mulDiv(1 << 128, baseAmount, ratioX128);\\n        }\\n    }\\n\\n    /// @notice Given a pool, it returns the number of seconds ago of the oldest stored observation\\n    /// @param pool Address of Uniswap V3 pool that we want to observe\\n    /// @return secondsAgo The number of seconds ago of the oldest observation stored for the pool\\n    function getOldestObservationSecondsAgo(address pool) internal view returns (uint32 secondsAgo) {\\n        (, , uint16 observationIndex, uint16 observationCardinality, , , ) = IUniswapV3Pool(pool).slot0();\\n        require(observationCardinality > 0, 'NI');\\n\\n        (uint32 observationTimestamp, , , bool initialized) =\\n            IUniswapV3Pool(pool).observations((observationIndex + 1) % observationCardinality);\\n\\n        // The next index might not be initialized if the cardinality is in the process of increasing\\n        // In this case the oldest observation is always in index 0\\n        if (!initialized) {\\n            (observationTimestamp, , , ) = IUniswapV3Pool(pool).observations(0);\\n        }\\n\\n        secondsAgo = uint32(block.timestamp) - observationTimestamp;\\n    }\\n\\n    /// @notice Given a pool, it returns the tick value as of the start of the current block\\n    /// @param pool Address of Uniswap V3 pool\\n    /// @return The tick that the pool was in at the start of the current block\\n    function getBlockStartingTickAndLiquidity(address pool) internal view returns (int24, uint128) {\\n        (, int24 tick, uint16 observationIndex, uint16 observationCardinality, , , ) = IUniswapV3Pool(pool).slot0();\\n\\n        // 2 observations are needed to reliably calculate the block starting tick\\n        require(observationCardinality > 1, 'NEO');\\n\\n        // If the latest observation occurred in the past, then no tick-changing trades have happened in this block\\n        // therefore the tick in `slot0` is the same as at the beginning of the current block.\\n        // We don't need to check if this observation is initialized - it is guaranteed to be.\\n        (uint32 observationTimestamp, int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128, ) =\\n            IUniswapV3Pool(pool).observations(observationIndex);\\n        if (observationTimestamp != uint32(block.timestamp)) {\\n            return (tick, IUniswapV3Pool(pool).liquidity());\\n        }\\n\\n        uint256 prevIndex = (uint256(observationIndex) + observationCardinality - 1) % observationCardinality;\\n        (\\n            uint32 prevObservationTimestamp,\\n            int56 prevTickCumulative,\\n            uint160 prevSecondsPerLiquidityCumulativeX128,\\n            bool prevInitialized\\n        ) = IUniswapV3Pool(pool).observations(prevIndex);\\n\\n        require(prevInitialized, 'ONI');\\n\\n        uint32 delta = observationTimestamp - prevObservationTimestamp;\\n        tick = int24((tickCumulative - prevTickCumulative) / delta);\\n        uint128 liquidity =\\n            uint128(\\n                (uint192(delta) * type(uint160).max) /\\n                    (uint192(secondsPerLiquidityCumulativeX128 - prevSecondsPerLiquidityCumulativeX128) << 32)\\n            );\\n        return (tick, liquidity);\\n    }\\n\\n    /// @notice Information for calculating a weighted arithmetic mean tick\\n    struct WeightedTickData {\\n        int24 tick;\\n        uint128 weight;\\n    }\\n\\n    /// @notice Given an array of ticks and weights, calculates the weighted arithmetic mean tick\\n    /// @param weightedTickData An array of ticks and weights\\n    /// @return weightedArithmeticMeanTick The weighted arithmetic mean tick\\n    /// @dev Each entry of `weightedTickData` should represents ticks from pools with the same underlying pool tokens. If they do not,\\n    /// extreme care must be taken to ensure that ticks are comparable (including decimal differences).\\n    /// @dev Note that the weighted arithmetic mean tick corresponds to the weighted geometric mean price.\\n    function getWeightedArithmeticMeanTick(WeightedTickData[] memory weightedTickData)\\n        internal\\n        pure\\n        returns (int24 weightedArithmeticMeanTick)\\n    {\\n        // Accumulates the sum of products between each tick and its weight\\n        int256 numerator;\\n\\n        // Accumulates the sum of the weights\\n        uint256 denominator;\\n\\n        // Products fit in 152 bits, so it would take an array of length ~2**104 to overflow this logic\\n        for (uint256 i; i < weightedTickData.length; i++) {\\n            numerator += weightedTickData[i].tick * int256(weightedTickData[i].weight);\\n            denominator += weightedTickData[i].weight;\\n        }\\n\\n        weightedArithmeticMeanTick = int24(numerator / int256(denominator));\\n        // Always round to negative infinity\\n        if (numerator < 0 && (numerator % int256(denominator) != 0)) weightedArithmeticMeanTick--;\\n    }\\n\\n    /// @notice Returns the \\\"synthetic\\\" tick which represents the price of the first entry in `tokens` in terms of the last\\n    /// @dev Useful for calculating relative prices along routes.\\n    /// @dev There must be one tick for each pairwise set of tokens.\\n    /// @param tokens The token contract addresses\\n    /// @param ticks The ticks, representing the price of each token pair in `tokens`\\n    /// @return syntheticTick The synthetic tick, representing the relative price of the outermost tokens in `tokens`\\n    function getChainedPrice(address[] memory tokens, int24[] memory ticks)\\n        internal\\n        pure\\n        returns (int256 syntheticTick)\\n    {\\n        require(tokens.length - 1 == ticks.length, 'DL');\\n        for (uint256 i = 1; i <= ticks.length; i++) {\\n            // check the tokens for address sort order, then accumulate the\\n            // ticks into the running synthetic tick, ensuring that intermediate tokens \\\"cancel out\\\"\\n            tokens[i - 1] < tokens[i] ? syntheticTick += ticks[i - 1] : syntheticTick -= ticks[i - 1];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf24785c7c0b8afa39ec0a90d027fefca682ce3540d8448fc0f90075a7e1b92ca\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary PoolAddress {\\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\n\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex'ff',\\n                        factory,\\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\\n                        POOL_INIT_CODE_HASH\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5edd84eb8ba7c12fd8cb6cffe52e1e9f3f6464514ee5f539c2283826209035a2\",\"license\":\"GPL-2.0-or-later\"},\"contracts/UniswapV3Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./interfaces/IUniswapV3Oracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\\\";\\n\\n/// @title Uniswap V3 Static Oracle\\n/// @notice Oracle contract for price quoting against Uniswap V3 pools\\ncontract UniswapV3Oracle is IUniswapV3Oracle {\\n  /// @inheritdoc IUniswapV3Oracle\\n  IUniswapV3Factory public immutable override UNISWAP_V3_FACTORY;\\n  /// @inheritdoc IUniswapV3Oracle\\n  uint8 public immutable override CARDINALITY_PER_MINUTE;\\n  uint24[] internal _knownFeeTiers;\\n\\n  constructor(\\n    IUniswapV3Factory _UNISWAP_V3_FACTORY,\\n    uint8 _CARDINALITY_PER_MINUTE\\n  ) {\\n    UNISWAP_V3_FACTORY = _UNISWAP_V3_FACTORY;\\n    CARDINALITY_PER_MINUTE = _CARDINALITY_PER_MINUTE;\\n\\n    // Assign default fee tiers\\n    _knownFeeTiers.push(500);\\n    _knownFeeTiers.push(3000);\\n    _knownFeeTiers.push(10000);\\n  }\\n\\n  /// @inheritdoc IUniswapV3Oracle\\n  function supportedFeeTiers()\\n    external\\n    view\\n    override\\n    returns (uint24[] memory)\\n  {\\n    return _knownFeeTiers;\\n  }\\n\\n  /// @inheritdoc IUniswapV3Oracle\\n  function isPairSupported(address _tokenA, address _tokenB)\\n    external\\n    view\\n    override\\n    returns (bool)\\n  {\\n    uint256 _length = _knownFeeTiers.length;\\n    for (uint256 i; i < _length; ++i) {\\n      address _pool = PoolAddress.computeAddress(\\n        address(UNISWAP_V3_FACTORY),\\n        PoolAddress.getPoolKey(_tokenA, _tokenB, _knownFeeTiers[i])\\n      );\\n      if (Address.isContract(_pool)) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /// @inheritdoc IUniswapV3Oracle\\n  function getAllPoolsForPair(address _tokenA, address _tokenB)\\n    public\\n    view\\n    override\\n    returns (address[] memory)\\n  {\\n    return _getPoolsForTiers(_tokenA, _tokenB, _knownFeeTiers);\\n  }\\n\\n  /// @inheritdoc IUniswapV3Oracle\\n  function quoteAllAvailablePoolsWithTimePeriod(\\n    uint128 _baseAmount,\\n    address _baseToken,\\n    address _quoteToken,\\n    uint32 _period\\n  )\\n    external\\n    view\\n    override\\n    returns (uint256 _quoteAmount, address[] memory _queriedPools)\\n  {\\n    _queriedPools = _getQueryablePoolsForTiers(\\n      _baseToken,\\n      _quoteToken,\\n      _period\\n    );\\n    _quoteAmount = _quote(\\n      _baseAmount,\\n      _baseToken,\\n      _quoteToken,\\n      _queriedPools,\\n      _period\\n    );\\n  }\\n\\n  /// @inheritdoc IUniswapV3Oracle\\n  function quoteSpecificFeeTiersWithTimePeriod(\\n    uint128 _baseAmount,\\n    address _baseToken,\\n    address _quoteToken,\\n    uint24[] calldata _feeTiers,\\n    uint32 _period\\n  )\\n    external\\n    view\\n    override\\n    returns (uint256 _quoteAmount, address[] memory _queriedPools)\\n  {\\n    _queriedPools = _getPoolsForTiers(_baseToken, _quoteToken, _feeTiers);\\n    require(\\n      _queriedPools.length == _feeTiers.length,\\n      \\\"Given tier does not have pool\\\"\\n    );\\n    _quoteAmount = _quote(\\n      _baseAmount,\\n      _baseToken,\\n      _quoteToken,\\n      _queriedPools,\\n      _period\\n    );\\n  }\\n\\n  /// @inheritdoc IUniswapV3Oracle\\n  function quoteSpecificPoolsWithTimePeriod(\\n    uint128 _baseAmount,\\n    address _baseToken,\\n    address _quoteToken,\\n    address[] calldata _pools,\\n    uint32 _period\\n  ) external view override returns (uint256 _quoteAmount) {\\n    return _quote(_baseAmount, _baseToken, _quoteToken, _pools, _period);\\n  }\\n\\n  /// @inheritdoc IUniswapV3Oracle\\n  function prepareAllAvailablePoolsWithTimePeriod(\\n    address _tokenA,\\n    address _tokenB,\\n    uint32 _period\\n  ) external override returns (address[] memory _preparedPools) {\\n    return\\n      prepareAllAvailablePoolsWithCardinality(\\n        _tokenA,\\n        _tokenB,\\n        _getCardinalityForTimePeriod(_period)\\n      );\\n  }\\n\\n  /// @inheritdoc IUniswapV3Oracle\\n  function prepareSpecificFeeTiersWithTimePeriod(\\n    address _tokenA,\\n    address _tokenB,\\n    uint24[] calldata _feeTiers,\\n    uint32 _period\\n  ) external override returns (address[] memory _preparedPools) {\\n    return\\n      prepareSpecificFeeTiersWithCardinality(\\n        _tokenA,\\n        _tokenB,\\n        _feeTiers,\\n        _getCardinalityForTimePeriod(_period)\\n      );\\n  }\\n\\n  /// @inheritdoc IUniswapV3Oracle\\n  function prepareSpecificPoolsWithTimePeriod(\\n    address[] calldata _pools,\\n    uint32 _period\\n  ) external override {\\n    prepareSpecificPoolsWithCardinality(\\n      _pools,\\n      _getCardinalityForTimePeriod(_period)\\n    );\\n  }\\n\\n  /// @inheritdoc IUniswapV3Oracle\\n  function prepareAllAvailablePoolsWithCardinality(\\n    address _tokenA,\\n    address _tokenB,\\n    uint16 _cardinality\\n  ) public override returns (address[] memory _preparedPools) {\\n    _preparedPools = getAllPoolsForPair(_tokenA, _tokenB);\\n    _prepare(_preparedPools, _cardinality);\\n  }\\n\\n  /// @inheritdoc IUniswapV3Oracle\\n  function prepareSpecificFeeTiersWithCardinality(\\n    address _tokenA,\\n    address _tokenB,\\n    uint24[] calldata _feeTiers,\\n    uint16 _cardinality\\n  ) public override returns (address[] memory _preparedPools) {\\n    _preparedPools = _getPoolsForTiers(_tokenA, _tokenB, _feeTiers);\\n    require(\\n      _preparedPools.length == _feeTiers.length,\\n      \\\"Given tier does not have pool\\\"\\n    );\\n    _prepare(_preparedPools, _cardinality);\\n  }\\n\\n  /// @inheritdoc IUniswapV3Oracle\\n  function prepareSpecificPoolsWithCardinality(\\n    address[] calldata _pools,\\n    uint16 _cardinality\\n  ) public override {\\n    _prepare(_pools, _cardinality);\\n  }\\n\\n  /// @inheritdoc IUniswapV3Oracle\\n  function addNewFeeTier(uint24 _feeTier) external override {\\n    require(\\n      UNISWAP_V3_FACTORY.feeAmountTickSpacing(_feeTier) != 0,\\n      \\\"Invalid fee tier\\\"\\n    );\\n    for (uint256 i; i < _knownFeeTiers.length; i++) {\\n      require(_knownFeeTiers[i] != _feeTier, \\\"Tier already supported\\\");\\n    }\\n    _knownFeeTiers.push(_feeTier);\\n  }\\n\\n  function _getCardinalityForTimePeriod(uint32 _period)\\n    internal\\n    view\\n    returns (uint16 _cardinality)\\n  {\\n    // We add 1 just to be on the safe side\\n    _cardinality = uint16((_period * CARDINALITY_PER_MINUTE) / 60) + 1;\\n  }\\n\\n  function _prepare(address[] memory _pools, uint16 _cardinality) internal {\\n    for (uint256 i; i < _pools.length; i++) {\\n      IUniswapV3Pool(_pools[i]).increaseObservationCardinalityNext(\\n        _cardinality\\n      );\\n    }\\n  }\\n\\n  function _quote(\\n    uint128 _baseAmount,\\n    address _baseToken,\\n    address _quoteToken,\\n    address[] memory _pools,\\n    uint32 _period\\n  ) internal view returns (uint256 _quoteAmount) {\\n    require(_pools.length > 0, \\\"No defined pools\\\");\\n    OracleLibrary.WeightedTickData[]\\n      memory _tickData = new OracleLibrary.WeightedTickData[](_pools.length);\\n    for (uint256 i; i < _pools.length; i++) {\\n      (_tickData[i].tick, _tickData[i].weight) = _period > 0\\n        ? OracleLibrary.consult(_pools[i], _period)\\n        : OracleLibrary.getBlockStartingTickAndLiquidity(_pools[i]);\\n    }\\n    int24 _weightedTick = _tickData.length == 1\\n      ? _tickData[0].tick\\n      : OracleLibrary.getWeightedArithmeticMeanTick(_tickData);\\n    return\\n      OracleLibrary.getQuoteAtTick(\\n        _weightedTick,\\n        _baseAmount,\\n        _baseToken,\\n        _quoteToken\\n      );\\n  }\\n\\n  /// @notice Takes a pair and a time period, and returns all pools that could be queried for that period\\n  /// @param _tokenA One of the pair's tokens\\n  /// @param _tokenB The other of the pair's tokens\\n  /// @param _period The period that we want to query for\\n  /// @return _queryablePools All pools that can be queried\\n  function _getQueryablePoolsForTiers(\\n    address _tokenA,\\n    address _tokenB,\\n    uint32 _period\\n  ) internal view virtual returns (address[] memory _queryablePools) {\\n    address[] memory _existingPools = getAllPoolsForPair(_tokenA, _tokenB);\\n    // If period is 0, then just return all existing pools\\n    if (_period == 0) return _existingPools;\\n\\n    _queryablePools = new address[](_existingPools.length);\\n    uint256 _validPools;\\n    for (uint256 i; i < _existingPools.length; i++) {\\n      if (\\n        OracleLibrary.getOldestObservationSecondsAgo(_existingPools[i]) >=\\n        _period\\n      ) {\\n        _queryablePools[_validPools++] = _existingPools[i];\\n      }\\n    }\\n\\n    _resizeArray(_queryablePools, _validPools);\\n  }\\n\\n  /// @notice Takes a pair and some fee tiers, and returns all pools that match those tiers\\n  /// @param _tokenA One of the pair's tokens\\n  /// @param _tokenB The other of the pair's tokens\\n  /// @param _feeTiers The fee tiers to consider when searching for the pair's pools\\n  /// @return _pools The pools for the given pair and fee tiers\\n  function _getPoolsForTiers(\\n    address _tokenA,\\n    address _tokenB,\\n    uint24[] memory _feeTiers\\n  ) internal view virtual returns (address[] memory _pools) {\\n    _pools = new address[](_feeTiers.length);\\n    uint256 _validPools;\\n    for (uint256 i; i < _feeTiers.length; i++) {\\n      address _pool = PoolAddress.computeAddress(\\n        address(UNISWAP_V3_FACTORY),\\n        PoolAddress.getPoolKey(_tokenA, _tokenB, _feeTiers[i])\\n      );\\n      if (Address.isContract(_pool)) {\\n        _pools[_validPools++] = _pool;\\n      }\\n    }\\n\\n    _resizeArray(_pools, _validPools);\\n  }\\n\\n  function _resizeArray(\\n    address[] memory _array,\\n    uint256 _amountOfValidElements\\n  ) internal pure {\\n    // If all elements are valid, then nothing to do here\\n    if (_array.length == _amountOfValidElements) return;\\n\\n    // If not, then resize the array\\n    assembly {\\n      mstore(_array, _amountOfValidElements)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xdae840edc44b03217ed3f8f046190b2ab756097dd60ddbb30b31ea25c8ef961f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IUniswapV3Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity >=0.7.6 <0.9.0;\\n\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\\\";\\n\\n/// @title Uniswap V3 Static Oracle\\n/// @notice Oracle contract for calculating price quoting against Uniswap V3\\ninterface IUniswapV3Oracle {\\n  /// @notice Returns the address of the Uniswap V3 factory\\n  /// @dev This value is assigned during deployment and cannot be changed\\n  /// @return The address of the Uniswap V3 factory\\n  function UNISWAP_V3_FACTORY() external view returns (IUniswapV3Factory);\\n\\n  /// @notice Returns how many observations are needed per minute in Uniswap V3 oracles, on the deployed chain\\n  /// @dev This value is assigned during deployment and cannot be changed\\n  /// @return Number of observation that are needed per minute\\n  function CARDINALITY_PER_MINUTE() external view returns (uint8);\\n\\n  /// @notice Returns all supported fee tiers\\n  /// @return The supported fee tiers\\n  function supportedFeeTiers() external view returns (uint24[] memory);\\n\\n  /// @notice Returns whether a specific pair can be supported by the oracle\\n  /// @dev The pair can be provided in tokenA/tokenB or tokenB/tokenA order\\n  /// @return Whether the given pair can be supported by the oracle\\n  function isPairSupported(address tokenA, address tokenB)\\n    external\\n    view\\n    returns (bool);\\n\\n  /// @notice Returns all existing pools for the given pair\\n  /// @dev The pair can be provided in tokenA/tokenB or tokenB/tokenA order\\n  /// @return All existing pools for the given pair\\n  function getAllPoolsForPair(address tokenA, address tokenB)\\n    external\\n    view\\n    returns (address[] memory);\\n\\n  /// @notice Returns a quote, based on the given tokens and amount, by querying all of the pair's pools\\n  /// @dev If some pools are not configured correctly for the given period, then they will be ignored\\n  /// @dev Will revert if there are no pools available/configured for the pair and period combination\\n  /// @param baseAmount Amount of token to be converted\\n  /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\\n  /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\\n  /// @param period Number of seconds from which to calculate the TWAP\\n  /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\\n  /// @return queriedPools The pools that were queried to calculate the quote\\n  function quoteAllAvailablePoolsWithTimePeriod(\\n    uint128 baseAmount,\\n    address baseToken,\\n    address quoteToken,\\n    uint32 period\\n  ) external view returns (uint256 quoteAmount, address[] memory queriedPools);\\n\\n  /// @notice Returns a quote, based on the given tokens and amount, by querying only the specified fee tiers\\n  /// @dev Will revert if the pair does not have a pool for one of the given fee tiers, or if one of the pools\\n  /// is not prepared/configured correctly for the given period\\n  /// @param baseAmount Amount of token to be converted\\n  /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\\n  /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\\n  /// @param feeTiers The fee tiers to consider when calculating the quote\\n  /// @param period Number of seconds from which to calculate the TWAP\\n  /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\\n  /// @return queriedPools The pools that were queried to calculate the quote\\n  function quoteSpecificFeeTiersWithTimePeriod(\\n    uint128 baseAmount,\\n    address baseToken,\\n    address quoteToken,\\n    uint24[] calldata feeTiers,\\n    uint32 period\\n  ) external view returns (uint256 quoteAmount, address[] memory queriedPools);\\n\\n  /// @notice Returns a quote, based on the given tokens and amount, by querying only the specified pools\\n  /// @dev Will revert if one of the pools is not prepared/configured correctly for the given period\\n  /// @param baseAmount Amount of token to be converted\\n  /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\\n  /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\\n  /// @param pools The pools to consider when calculating the quote\\n  /// @param period Number of seconds from which to calculate the TWAP\\n  /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\\n  function quoteSpecificPoolsWithTimePeriod(\\n    uint128 baseAmount,\\n    address baseToken,\\n    address quoteToken,\\n    address[] calldata pools,\\n    uint32 period\\n  ) external view returns (uint256 quoteAmount);\\n\\n  /// @notice Will initialize all existing pools for the given pair, so that they can be queried with the given period in the future\\n  /// @dev Will revert if there are no pools available for the pair and period combination\\n  /// @param tokenA One of the pair's tokens\\n  /// @param tokenB The other of the pair's tokens\\n  /// @param period The period that will be guaranteed when quoting\\n  /// @return preparedPools The pools that were prepared\\n  function prepareAllAvailablePoolsWithTimePeriod(\\n    address tokenA,\\n    address tokenB,\\n    uint32 period\\n  ) external returns (address[] memory preparedPools);\\n\\n  /// @notice Will initialize the pair's pools with the specified fee tiers, so that they can be queried with the given period in the future\\n  /// @dev Will revert if the pair does not have a pool for a given fee tier\\n  /// @param tokenA One of the pair's tokens\\n  /// @param tokenB The other of the pair's tokens\\n  /// @param feeTiers The fee tiers to consider when searching for the pair's pools\\n  /// @param period The period that will be guaranteed when quoting\\n  /// @return preparedPools The pools that were prepared\\n  function prepareSpecificFeeTiersWithTimePeriod(\\n    address tokenA,\\n    address tokenB,\\n    uint24[] calldata feeTiers,\\n    uint32 period\\n  ) external returns (address[] memory preparedPools);\\n\\n  /// @notice Will initialize all given pools, so that they can be queried with the given period in the future\\n  /// @param pools The pools to initialize\\n  /// @param period The period that will be guaranteed when quoting\\n  function prepareSpecificPoolsWithTimePeriod(\\n    address[] calldata pools,\\n    uint32 period\\n  ) external;\\n\\n  /// @notice Will increase observations for all existing pools for the given pair, so they start accruing information for twap calculations\\n  /// @dev Will revert if there are no pools available for the pair and period combination\\n  /// @param tokenA One of the pair's tokens\\n  /// @param tokenB The other of the pair's tokens\\n  /// @param cardinality The cardinality that will be guaranteed when quoting\\n  /// @return preparedPools The pools that were prepared\\n  function prepareAllAvailablePoolsWithCardinality(\\n    address tokenA,\\n    address tokenB,\\n    uint16 cardinality\\n  ) external returns (address[] memory preparedPools);\\n\\n  /// @notice Will increase the pair's pools with the specified fee tiers observations, so they start accruing information for twap calculations\\n  /// @dev Will revert if the pair does not have a pool for a given fee tier\\n  /// @param tokenA One of the pair's tokens\\n  /// @param tokenB The other of the pair's tokens\\n  /// @param feeTiers The fee tiers to consider when searching for the pair's pools\\n  /// @param cardinality The cardinality that will be guaranteed when quoting\\n  /// @return preparedPools The pools that were prepared\\n  function prepareSpecificFeeTiersWithCardinality(\\n    address tokenA,\\n    address tokenB,\\n    uint24[] calldata feeTiers,\\n    uint16 cardinality\\n  ) external returns (address[] memory preparedPools);\\n\\n  /// @notice Will increase all given pools observations, so they start accruing information for twap calculations\\n  /// @param pools The pools to initialize\\n  /// @param cardinality The cardinality that will be guaranteed when quoting\\n  function prepareSpecificPoolsWithCardinality(\\n    address[] calldata pools,\\n    uint16 cardinality\\n  ) external;\\n\\n  /// @notice Adds support for a new fee tier\\n  /// @dev Will revert if the given tier is invalid, or already supported\\n  /// @param feeTier The new fee tier to add\\n  function addNewFeeTier(uint24 feeTier) external;\\n}\\n\",\"keccak256\":\"0x279b81a0bf795c2dd3521d132b29dfc190f2c3b3380a0ae819ed37aed3d5c822\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806355eba79211610097578063bc4389f711610066578063bc4389f71461020d578063d8045eca14610222578063e85dd38314610235578063f73e5aab14610248576100f5565b806355eba792146101b257806362d99119146101c55780639446994a146101d8578063b7604e53146101f8576100f5565b80631c49cbb5116100d35780631c49cbb51461016457806333e4c28e14610177578063354b1a7d1461018a57806343dfc58d1461019f576100f5565b80630757bc81146100fa57806307f7ca9f146101245780631b2a933c14610144575b600080fd5b61010d610108366004612436565b61025d565b60405161011b929190612688565b60405180910390f35b61013761013236600461235b565b610286565b60405161011b919061267f565b61015761015236600461222d565b6102d4565b60405161011b91906124fc565b61015761017236600461226f565b6102f3565b610157610185366004612151565b61030b565b61019d6101983660046122f1565b6103a4565b005b61019d6101ad366004612489565b6103b7565b61019d6101c03660046122a8565b610599565b6101576101d336600461211f565b6105d7565b6101eb6101e636600461211f565b610667565b60405161011b9190612558565b61020061070c565b60405161011b91906126a1565b610215610730565b60405161011b919061250f565b61010d6102303660046123de565b6107b2565b6101576102433660046121c5565b61084b565b610250610867565b60405161011b9190612563565b6000606061026c85858561088b565b905061027b86868684876109aa565b915094509492505050565b60006102c98787878787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508992506109aa915050565b979650505050505050565b60606102e084846105d7565b90506102ec8183610b3e565b9392505050565b6060610303848461015285610bd4565b949350505050565b606061034b8686868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610c0f92505050565b80519091508314610391576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610388906125f2565b60405180910390fd5b61039b8183610b3e565b95945050505050565b6103b283836101c084610bd4565b505050565b6040517f22afcccb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906322afcccb9061042990849060040161266f565b60206040518083038186803b15801561044157600080fd5b505afa158015610455573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610479919061233a565b60020b6104b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038890612629565b60005b60005481101561053c578162ffffff16600082815481106104d257fe5b90600052602060002090600a91828204019190066003029054906101000a900462ffffff1662ffffff161415610534576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038890612584565b6001016104b5565b5060008054600181018255908052600a8082047f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301805462ffffff948516600393909406929092026101000a928302939092021916919091179055565b6103b2838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250859250610b3e915050565b606061065e8383600080548060200260200160405190810160405280929190818152602001828054801561065457602002820191906000526020600020906000905b82829054906101000a900462ffffff1662ffffff16815260200190600301906020826002010492830192600103820291508084116106195790505b5050505050610c0f565b90505b92915050565b60008054815b818110156107015760006106dc7f00000000000000000000000000000000000000000000000000000000000000006106d78888600087815481106106ad57fe5b90600052602060002090600a91828204019190066003029054906101000a900462ffffff16610d21565b610d9e565b90506106e781610ed4565b156106f85760019350505050610661565b5060010161066d565b506000949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b606060008054806020026020016040519081016040528092919081815260200182805480156107a857602002820191906000526020600020906000905b82829054906101000a900462ffffff1662ffffff168152602001906003019060208260020104928301926001038202915080841161076d5790505b5050505050905090565b600060606107f48787878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610c0f92505050565b80519091508414610831576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610388906125f2565b61083e88888884876109aa565b9150965096945050505050565b606061085d8686868661018587610bd4565b9695505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060600061089985856105d7565b905063ffffffff83166108ad5790506102ec565b805167ffffffffffffffff811180156108c557600080fd5b506040519080825280602002602001820160405280156108ef578160200160208202803683370190505b5091506000805b8251811015610996578463ffffffff1661092284838151811061091557fe5b6020026020010151610ede565b63ffffffff161061098e5782818151811061093957fe5b602002602001015184838060010194508151811061095357fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b6001016108f6565b506109a18382611109565b50509392505050565b6000808351116109e6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610388906125bb565b6000835167ffffffffffffffff81118015610a0057600080fd5b50604051908082528060200260200182016040528015610a3a57816020015b610a27612035565b815260200190600190039081610a1f5790505b50905060005b8451811015610af05760008463ffffffff1611610a7857610a73858281518110610a6657fe5b602002602001015161111f565b610a95565b610a95858281518110610a8757fe5b60200260200101518561150f565b838381518110610aa157fe5b6020026020010151600001848481518110610ab857fe5b6020908102919091018101516fffffffffffffffffffffffffffffffff909316920191909152600291820b90910b9052600101610a40565b5060008151600114610b0a57610b0582611940565b610b24565b81600081518110610b1757fe5b6020026020010151600001515b9050610b3281898989611a2c565b98975050505050505050565b60005b82518110156103b257828181518110610b5657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166332148f67836040518263ffffffff1660e01b8152600401610b969190612660565b600060405180830381600087803b158015610bb057600080fd5b505af1158015610bc4573d6000803e3d6000fd5b505060019092019150610b419050565b6000603c63ffffffff60ff7f000000000000000000000000000000000000000000000000000000000000000016840216046001019050919050565b6060815167ffffffffffffffff81118015610c2957600080fd5b50604051908082528060200260200182016040528015610c53578160200160208202803683370190505b5090506000805b8351811015610d0e576000610ca77f00000000000000000000000000000000000000000000000000000000000000006106d78989898781518110610c9a57fe5b6020026020010151610d21565b9050610cb281610ed4565b15610d055780848480600101955081518110610cca57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b50600101610c5a565b50610d198282611109565b509392505050565b610d2961204c565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161115610d61579192915b506040805160608101825273ffffffffffffffffffffffffffffffffffffffff948516815292909316602083015262ffffff169181019190915290565b6000816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff1610610de057600080fd5b508051602080830151604093840151845173ffffffffffffffffffffffffffffffffffffffff94851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301207fff0000000000000000000000000000000000000000000000000000000000000060a085015294901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b803b15155b919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015610f2957600080fd5b505afa158015610f3d573d6000803e3d6000fd5b505050506040513d60e0811015610f5357600080fd5b506040810151606090910151909250905061ffff8116610fd457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f4e49000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1663252c09d78461ffff168660010161ffff168161100757fe5b066040518263ffffffff1660e01b8152600401808261ffff16815260200191505060806040518083038186803b15801561104057600080fd5b505afa158015611054573d6000803e3d6000fd5b505050506040513d608081101561106a57600080fd5b5080516060909101519092509050806110fe578573ffffffffffffffffffffffffffffffffffffffff1663252c09d760006040518263ffffffff1660e01b81526004018082815260200191505060806040518083038186803b1580156110cf57600080fd5b505afa1580156110e3573d6000803e3d6000fd5b505050506040513d60808110156110f957600080fd5b505191505b504203949350505050565b80825114156111175761111b565b8082525b5050565b60008060008060008573ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561116d57600080fd5b505afa158015611181573d6000803e3d6000fd5b505050506040513d60e081101561119757600080fd5b50602081015160408201516060909201519094509092509050600161ffff82161161122357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f4e454f0000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60008060008873ffffffffffffffffffffffffffffffffffffffff1663252c09d7866040518263ffffffff1660e01b8152600401808261ffff16815260200191505060806040518083038186803b15801561127d57600080fd5b505afa158015611291573d6000803e3d6000fd5b505050506040513d60808110156112a757600080fd5b508051602082015160409092015190945090925090504263ffffffff9081169084161461135257858973ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b15801561131557600080fd5b505afa158015611329573d6000803e3d6000fd5b505050506040513d602081101561133f57600080fd5b5051909850965061150a95505050505050565b60008461ffff1660018661ffff168861ffff1601038161136e57fe5b0690506000806000808d73ffffffffffffffffffffffffffffffffffffffff1663252c09d7866040518263ffffffff1660e01b81526004018082815260200191505060806040518083038186803b1580156113c857600080fd5b505afa1580156113dc573d6000803e3d6000fd5b505050506040513d60808110156113f257600080fd5b50805160208201516040830151606090930151919650945090925090508061147b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600360248201527f4f4e490000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b83880363ffffffff811684890360060b8161149257fe5b059b50600077ffffffffffffffffffffffffffffffffffffffff0000000084890360201b1663ffffffff831673ffffffffffffffffffffffffffffffffffffffff0277ffffffffffffffffffffffffffffffffffffffffffffffff16816114f557fe5b9d9f50909c049c505050505050505050505050505b915091565b60008063ffffffff831661158457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600260248201527f4250000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b60408051600280825260608201835260009260208301908036833701905050905083816000815181106115b357fe5b602002602001019063ffffffff16908163ffffffff16815250506000816001815181106115dc57fe5b63ffffffff9092166020928302919091018201526040517f883bdbfd00000000000000000000000000000000000000000000000000000000815260048101828152835160248301528351600093849373ffffffffffffffffffffffffffffffffffffffff8b169363883bdbfd9388939192839260449091019185820191028083838b5b8381101561167757818101518382015260200161165f565b505050509050019250505060006040518083038186803b15801561169a57600080fd5b505afa1580156116ae573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160409081528110156116f557600080fd5b810190808051604051939291908464010000000082111561171557600080fd5b90830190602082018581111561172a57600080fd5b825186602082028301116401000000008211171561174757600080fd5b82525081516020918201928201910280838360005b8381101561177457818101518382015260200161175c565b505050509050016040526020018051604051939291908464010000000082111561179d57600080fd5b9083019060208201858111156117b257600080fd5b82518660208202830111640100000000821117156117cf57600080fd5b82525081516020918201928201910280838360005b838110156117fc5781810151838201526020016117e4565b505050509050016040525050509150915060008260008151811061181c57fe5b60200260200101518360018151811061183157fe5b602002602001015103905060008260008151811061184b57fe5b60200260200101518360018151811061186057fe5b60200260200101510390508763ffffffff168260060b8161187d57fe5b05965060008260060b1280156118a757508763ffffffff168260060b816118a057fe5b0760060b15155b156118d2577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909601955b63ffffffff881673ffffffffffffffffffffffffffffffffffffffff0277ffffffffffffffffffffffffffffffffffffffff00000000602083901b1677ffffffffffffffffffffffffffffffffffffffffffffffff82168161193057fe5b0496505050505050509250929050565b6000806000805b84518110156119d55784818151811061195c57fe5b6020026020010151602001516fffffffffffffffffffffffffffffffff1685828151811061198657fe5b60200260200101516000015160020b02830192508481815181106119a657fe5b6020026020010151602001516fffffffffffffffffffffffffffffffff16820191508080600101915050611947565b508082816119df57fe5b0592506000821280156119fa57508082816119f657fe5b0715155b15611a25577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201915b5050919050565b600080611a3886611bd5565b90506fffffffffffffffffffffffffffffffff73ffffffffffffffffffffffffffffffffffffffff821611611b065773ffffffffffffffffffffffffffffffffffffffff80821680029084811690861610611ac857611ac37801000000000000000000000000000000000000000000000000876fffffffffffffffffffffffffffffffff1683611f68565b611afe565b611afe81876fffffffffffffffffffffffffffffffff167801000000000000000000000000000000000000000000000000611f68565b925050611bcc565b6000611b3273ffffffffffffffffffffffffffffffffffffffff83168068010000000000000000611f68565b90508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610611b9a57611b95700100000000000000000000000000000000876fffffffffffffffffffffffffffffffff1683611f68565b611bc8565b611bc881876fffffffffffffffffffffffffffffffff16700100000000000000000000000000000000611f68565b9250505b50949350505050565b60008060008360020b12611bec578260020b611bf4565b8260020b6000035b9050620d89e8811115611c6857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600160248201527f5400000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600060018216611c8957700100000000000000000000000000000000611c9b565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615611ccf576ffff97272373d413259a46990580e213a0260801c5b6004821615611cee576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615611d0d576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615611d2c576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615611d4b576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615611d6a576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615611d89576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615611da9576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615611dc9576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611de9576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611e09576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611e29576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611e49576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611e69576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615611e89576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615611eaa576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615611eca576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611ee9576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611f06576b048a170391f7dc42444e8fa20260801c5b60008460020b1315611f3f57807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81611f3b57fe5b0490505b640100000000810615611f53576001611f56565b60005b60ff16602082901c0192505050919050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85870986860292508281109083900303905080611fbc5760008411611fb157600080fd5b5082900490506102ec565b808411611fc857600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b604080518082019091526000808252602082015290565b604080516060810182526000808252602082018190529181019190915290565b803573ffffffffffffffffffffffffffffffffffffffff81168114610ed957600080fd5b60008083601f8401126120a1578182fd5b50813567ffffffffffffffff8111156120b8578182fd5b60208301915083602080830285010111156120d257600080fd5b9250929050565b80356fffffffffffffffffffffffffffffffff81168114610ed957600080fd5b803561ffff81168114610ed957600080fd5b803563ffffffff81168114610ed957600080fd5b60008060408385031215612131578182fd5b61213a8361206c565b91506121486020840161206c565b90509250929050565b600080600080600060808688031215612168578081fd5b6121718661206c565b945061217f6020870161206c565b9350604086013567ffffffffffffffff81111561219a578182fd5b6121a688828901612090565b90945092506121b99050606087016120f9565b90509295509295909350565b6000806000806000608086880312156121dc578081fd5b6121e58661206c565b94506121f36020870161206c565b9350604086013567ffffffffffffffff81111561220e578182fd5b61221a88828901612090565b90945092506121b990506060870161210b565b600080600060608486031215612241578283fd5b61224a8461206c565b92506122586020850161206c565b9150612266604085016120f9565b90509250925092565b600080600060608486031215612283578283fd5b61228c8461206c565b925061229a6020850161206c565b91506122666040850161210b565b6000806000604084860312156122bc578283fd5b833567ffffffffffffffff8111156122d2578384fd5b6122de86828701612090565b90945092506122669050602085016120f9565b600080600060408486031215612305578283fd5b833567ffffffffffffffff81111561231b578384fd5b61232786828701612090565b909450925061226690506020850161210b565b60006020828403121561234b578081fd5b81518060020b81146102ec578182fd5b60008060008060008060a08789031215612373578081fd5b61237c876120d9565b955061238a6020880161206c565b94506123986040880161206c565b9350606087013567ffffffffffffffff8111156123b3578182fd5b6123bf89828a01612090565b90945092506123d290506080880161210b565b90509295509295509295565b60008060008060008060a087890312156123f6578182fd5b6123ff876120d9565b955061240d6020880161206c565b945061241b6040880161206c565b9350606087013567ffffffffffffffff8111156123b3578283fd5b6000806000806080858703121561244b578182fd5b612454856120d9565b93506124626020860161206c565b92506124706040860161206c565b915061247e6060860161210b565b905092959194509250565b60006020828403121561249a578081fd5b813562ffffff811681146102ec578182fd5b6000815180845260208085019450808401835b838110156124f157815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016124bf565b509495945050505050565b60006020825261065e60208301846124ac565b6020808252825182820181905260009190848201906040850190845b8181101561254c57835162ffffff168352928401929184019160010161252b565b50909695505050505050565b901515815260200190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60208082526016908201527f5469657220616c726561647920737570706f7274656400000000000000000000604082015260600190565b60208082526010908201527f4e6f20646566696e656420706f6f6c7300000000000000000000000000000000604082015260600190565b6020808252601d908201527f476976656e207469657220646f6573206e6f74206861766520706f6f6c000000604082015260600190565b60208082526010908201527f496e76616c696420666565207469657200000000000000000000000000000000604082015260600190565b61ffff91909116815260200190565b62ffffff91909116815260200190565b90815260200190565b60008382526040602083015261030360408301846124ac565b60ff9190911681526020019056fea2646970667358221220f3c10041f90b9754acdf8071917339ed0d02a9470945539594521401b15cd1ad64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addNewFeeTier(uint24)": {
        "details": "Will revert if the given tier is invalid, or already supported",
        "params": {
          "feeTier": "The new fee tier to add"
        }
      },
      "getAllPoolsForPair(address,address)": {
        "details": "The pair can be provided in tokenA/tokenB or tokenB/tokenA order",
        "returns": {
          "_0": "All existing pools for the given pair"
        }
      },
      "isPairSupported(address,address)": {
        "details": "The pair can be provided in tokenA/tokenB or tokenB/tokenA order",
        "returns": {
          "_0": "Whether the given pair can be supported by the oracle"
        }
      },
      "prepareAllAvailablePoolsWithCardinality(address,address,uint16)": {
        "details": "Will revert if there are no pools available for the pair and period combination",
        "params": {
          "cardinality": "The cardinality that will be guaranteed when quoting",
          "tokenA": "One of the pair's tokens",
          "tokenB": "The other of the pair's tokens"
        },
        "returns": {
          "_preparedPools": "The pools that were prepared"
        }
      },
      "prepareAllAvailablePoolsWithTimePeriod(address,address,uint32)": {
        "details": "Will revert if there are no pools available for the pair and period combination",
        "params": {
          "period": "The period that will be guaranteed when quoting",
          "tokenA": "One of the pair's tokens",
          "tokenB": "The other of the pair's tokens"
        },
        "returns": {
          "_preparedPools": "The pools that were prepared"
        }
      },
      "prepareSpecificFeeTiersWithCardinality(address,address,uint24[],uint16)": {
        "details": "Will revert if the pair does not have a pool for a given fee tier",
        "params": {
          "cardinality": "The cardinality that will be guaranteed when quoting",
          "feeTiers": "The fee tiers to consider when searching for the pair's pools",
          "tokenA": "One of the pair's tokens",
          "tokenB": "The other of the pair's tokens"
        },
        "returns": {
          "_preparedPools": "The pools that were prepared"
        }
      },
      "prepareSpecificFeeTiersWithTimePeriod(address,address,uint24[],uint32)": {
        "details": "Will revert if the pair does not have a pool for a given fee tier",
        "params": {
          "feeTiers": "The fee tiers to consider when searching for the pair's pools",
          "period": "The period that will be guaranteed when quoting",
          "tokenA": "One of the pair's tokens",
          "tokenB": "The other of the pair's tokens"
        },
        "returns": {
          "_preparedPools": "The pools that were prepared"
        }
      },
      "prepareSpecificPoolsWithCardinality(address[],uint16)": {
        "params": {
          "cardinality": "The cardinality that will be guaranteed when quoting",
          "pools": "The pools to initialize"
        }
      },
      "prepareSpecificPoolsWithTimePeriod(address[],uint32)": {
        "params": {
          "period": "The period that will be guaranteed when quoting",
          "pools": "The pools to initialize"
        }
      },
      "quoteAllAvailablePoolsWithTimePeriod(uint128,address,address,uint32)": {
        "details": "If some pools are not configured correctly for the given period, then they will be ignoredWill revert if there are no pools available/configured for the pair and period combination",
        "params": {
          "baseAmount": "Amount of token to be converted",
          "baseToken": "Address of an ERC20 token contract used as the baseAmount denomination",
          "period": "Number of seconds from which to calculate the TWAP",
          "quoteToken": "Address of an ERC20 token contract used as the quoteAmount denomination"
        },
        "returns": {
          "_queriedPools": "The pools that were queried to calculate the quote",
          "_quoteAmount": "Amount of quoteToken received for baseAmount of baseToken"
        }
      },
      "quoteSpecificFeeTiersWithTimePeriod(uint128,address,address,uint24[],uint32)": {
        "details": "Will revert if the pair does not have a pool for one of the given fee tiers, or if one of the pools is not prepared/configured correctly for the given period",
        "params": {
          "baseAmount": "Amount of token to be converted",
          "baseToken": "Address of an ERC20 token contract used as the baseAmount denomination",
          "feeTiers": "The fee tiers to consider when calculating the quote",
          "period": "Number of seconds from which to calculate the TWAP",
          "quoteToken": "Address of an ERC20 token contract used as the quoteAmount denomination"
        },
        "returns": {
          "_queriedPools": "The pools that were queried to calculate the quote",
          "_quoteAmount": "Amount of quoteToken received for baseAmount of baseToken"
        }
      },
      "quoteSpecificPoolsWithTimePeriod(uint128,address,address,address[],uint32)": {
        "details": "Will revert if one of the pools is not prepared/configured correctly for the given period",
        "params": {
          "baseAmount": "Amount of token to be converted",
          "baseToken": "Address of an ERC20 token contract used as the baseAmount denomination",
          "period": "Number of seconds from which to calculate the TWAP",
          "pools": "The pools to consider when calculating the quote",
          "quoteToken": "Address of an ERC20 token contract used as the quoteAmount denomination"
        },
        "returns": {
          "_quoteAmount": "Amount of quoteToken received for baseAmount of baseToken"
        }
      },
      "supportedFeeTiers()": {
        "returns": {
          "_0": "The supported fee tiers"
        }
      }
    },
    "stateVariables": {
      "CARDINALITY_PER_MINUTE": {
        "details": "This value is assigned during deployment and cannot be changed",
        "return": "Number of observation that are needed per minute"
      },
      "UNISWAP_V3_FACTORY": {
        "details": "This value is assigned during deployment and cannot be changed",
        "return": "The address of the Uniswap V3 factory"
      }
    },
    "title": "Uniswap V3 Static Oracle",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "CARDINALITY_PER_MINUTE()": {
        "notice": "Returns how many observations are needed per minute in Uniswap V3 oracles, on the deployed chain"
      },
      "UNISWAP_V3_FACTORY()": {
        "notice": "Returns the address of the Uniswap V3 factory"
      },
      "addNewFeeTier(uint24)": {
        "notice": "Adds support for a new fee tier"
      },
      "getAllPoolsForPair(address,address)": {
        "notice": "Returns all existing pools for the given pair"
      },
      "isPairSupported(address,address)": {
        "notice": "Returns whether a specific pair can be supported by the oracle"
      },
      "prepareAllAvailablePoolsWithCardinality(address,address,uint16)": {
        "notice": "Will increase observations for all existing pools for the given pair, so they start accruing information for twap calculations"
      },
      "prepareAllAvailablePoolsWithTimePeriod(address,address,uint32)": {
        "notice": "Will initialize all existing pools for the given pair, so that they can be queried with the given period in the future"
      },
      "prepareSpecificFeeTiersWithCardinality(address,address,uint24[],uint16)": {
        "notice": "Will increase the pair's pools with the specified fee tiers observations, so they start accruing information for twap calculations"
      },
      "prepareSpecificFeeTiersWithTimePeriod(address,address,uint24[],uint32)": {
        "notice": "Will initialize the pair's pools with the specified fee tiers, so that they can be queried with the given period in the future"
      },
      "prepareSpecificPoolsWithCardinality(address[],uint16)": {
        "notice": "Will increase all given pools observations, so they start accruing information for twap calculations"
      },
      "prepareSpecificPoolsWithTimePeriod(address[],uint32)": {
        "notice": "Will initialize all given pools, so that they can be queried with the given period in the future"
      },
      "quoteAllAvailablePoolsWithTimePeriod(uint128,address,address,uint32)": {
        "notice": "Returns a quote, based on the given tokens and amount, by querying all of the pair's pools"
      },
      "quoteSpecificFeeTiersWithTimePeriod(uint128,address,address,uint24[],uint32)": {
        "notice": "Returns a quote, based on the given tokens and amount, by querying only the specified fee tiers"
      },
      "quoteSpecificPoolsWithTimePeriod(uint128,address,address,address[],uint32)": {
        "notice": "Returns a quote, based on the given tokens and amount, by querying only the specified pools"
      },
      "supportedFeeTiers()": {
        "notice": "Returns all supported fee tiers"
      }
    },
    "notice": "Oracle contract for price quoting against Uniswap V3 pools",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2231,
        "contract": "contracts/UniswapV3Oracle.sol:UniswapV3Oracle",
        "label": "_knownFeeTiers",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint24)dyn_storage"
      }
    ],
    "types": {
      "t_array(t_uint24)dyn_storage": {
        "base": "t_uint24",
        "encoding": "dynamic_array",
        "label": "uint24[]",
        "numberOfBytes": "32"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      }
    }
  }
}
