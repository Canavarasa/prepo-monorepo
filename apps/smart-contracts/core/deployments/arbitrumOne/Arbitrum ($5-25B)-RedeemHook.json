{
  "address": "0x2e1F0017476daFC5200e46d2BAD2d39256798a26",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IAccountList",
          "name": "accountList",
          "type": "address"
        }
      ],
      "name": "AccountListChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IAccountList",
          "name": "allowedMsgSenders",
          "type": "address"
        }
      ],
      "name": "AllowedMsgSendersChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousNominee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newNominee",
          "type": "address"
        }
      ],
      "name": "NomineeUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "TokenSenderChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "TreasuryChange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAccountList",
      "outputs": [
        {
          "internalType": "contract IAccountList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllowedMsgSenders",
      "outputs": [
        {
          "internalType": "contract IAccountList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNominee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenSender",
      "outputs": [
        {
          "internalType": "contract ITokenSender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountBeforeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAfterFee",
          "type": "uint256"
        }
      ],
      "name": "hook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAccountList",
          "name": "accountList",
          "type": "address"
        }
      ],
      "name": "setAccountList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAccountList",
          "name": "allowedMsgSenders",
          "type": "address"
        }
      ],
      "name": "setAllowedMsgSenders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITokenSender",
          "name": "tokenSender",
          "type": "address"
        }
      ],
      "name": "setTokenSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nominee",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcf3539316b33e09649256c56b15b24c65575737af6ac02e8efd691f5cb1990dd",
  "receipt": {
    "to": null,
    "from": "0x4F05Cf239a8BC2bfdA92673bC3c8a87E091b6D97",
    "contractAddress": "0x2e1F0017476daFC5200e46d2BAD2d39256798a26",
    "transactionIndex": 5,
    "gasUsed": "4985763",
    "logsBloom": "0x
    "blockHash": "0x25529d83577886c26612b37162752f697364288cae70a626b3b547fadb68642b",
    "transactionHash": "0xcf3539316b33e09649256c56b15b24c65575737af6ac02e8efd691f5cb1990dd",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 73295274,
        "transactionHash": "0xcf3539316b33e09649256c56b15b24c65575737af6ac02e8efd691f5cb1990dd",
        "address": "0x2e1F0017476daFC5200e46d2BAD2d39256798a26",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004f05cf239a8bc2bfda92673bc3c8a87e091b6d97"
        ],
        "data": "0x",
        "logIndex": 17,
        "blockHash": "0x25529d83577886c26612b37162752f697364288cae70a626b3b547fadb68642b"
      }
    ],
    "blockNumber": 73295274,
    "cumulativeGasUsed": "9063450",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "522a9e520f8065cd7f85d9150b0fe19a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IAccountList\",\"name\":\"accountList\",\"type\":\"address\"}],\"name\":\"AccountListChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IAccountList\",\"name\":\"allowedMsgSenders\",\"type\":\"address\"}],\"name\":\"AllowedMsgSendersChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousNominee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newNominee\",\"type\":\"address\"}],\"name\":\"NomineeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"TokenSenderChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasuryChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccountList\",\"outputs\":[{\"internalType\":\"contract IAccountList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowedMsgSenders\",\"outputs\":[{\"internalType\":\"contract IAccountList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNominee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenSender\",\"outputs\":[{\"internalType\":\"contract ITokenSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountBeforeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAfterFee\",\"type\":\"uint256\"}],\"name\":\"hook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAccountList\",\"name\":\"accountList\",\"type\":\"address\"}],\"name\":\"setAccountList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAccountList\",\"name\":\"allowedMsgSenders\",\"type\":\"address\"}],\"name\":\"setAllowedMsgSenders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITokenSender\",\"name\":\"tokenSender\",\"type\":\"address\"}],\"name\":\"setTokenSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nominee\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"Only callable by the current nominee. Sets nominee back to zero address.\"},\"getNominee()\":{\"returns\":{\"_0\":\"The current nominee\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Accepts ownership nomination.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RedeemHook.sol\":\"RedeemHook\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/RedeemHook.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"./interfaces/IHook.sol\\\";\\nimport \\\"./interfaces/IPrePOMarket.sol\\\";\\nimport \\\"prepo-shared-contracts/contracts/AccountListCaller.sol\\\";\\nimport \\\"prepo-shared-contracts/contracts/AllowedMsgSenders.sol\\\";\\nimport \\\"prepo-shared-contracts/contracts/SafeOwnable.sol\\\";\\nimport \\\"prepo-shared-contracts/contracts/TokenSenderCaller.sol\\\";\\nimport \\\"prepo-shared-contracts/contracts/TreasuryCaller.sol\\\";\\n\\ncontract RedeemHook is\\n  IHook,\\n  AccountListCaller,\\n  AllowedMsgSenders,\\n  SafeOwnable,\\n  TokenSenderCaller,\\n  TreasuryCaller\\n{\\n  function hook(\\n    address funder,\\n    address recipient,\\n    uint256 amountBeforeFee,\\n    uint256 amountAfterFee\\n  ) external virtual override onlyAllowedMsgSenders {\\n    if (address(_accountList) != address(0)) {\\n      require(_accountList.isIncluded(funder), \\\"Redeemer not allowed\\\");\\n    }\\n    uint256 fee = amountBeforeFee - amountAfterFee;\\n    if (fee > 0) {\\n      IPrePOMarket(msg.sender).getCollateral().transferFrom(\\n        msg.sender,\\n        _treasury,\\n        fee\\n      );\\n      _tokenSender.send(recipient, fee);\\n    }\\n  }\\n\\n  function setAllowedMsgSenders(IAccountList allowedMsgSenders)\\n    public\\n    virtual\\n    override\\n    onlyOwner\\n  {\\n    super.setAllowedMsgSenders(allowedMsgSenders);\\n  }\\n\\n  function setAccountList(IAccountList accountList)\\n    public\\n    virtual\\n    override\\n    onlyOwner\\n  {\\n    super.setAccountList(accountList);\\n  }\\n\\n  function setTreasury(address _treasury) public override onlyOwner {\\n    super.setTreasury(_treasury);\\n  }\\n\\n  function setTokenSender(ITokenSender tokenSender) public override onlyOwner {\\n    super.setTokenSender(tokenSender);\\n  }\\n}\\n\",\"keccak256\":\"0xcc2d6e0b5e3236879c51e4ac99f499dff478b51b5f019b78903af3ffe0e100f2\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IHook.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\ninterface IHook {\\n  function hook(\\n    address funder,\\n    address recipient,\\n    uint256 amountBeforeFee,\\n    uint256 amountAfterFee\\n  ) external;\\n}\\n\",\"keccak256\":\"0xbbb00d0843cd4666e6bbc85446e427a3dec3d0eb9c83a53298e46ac7fd330add\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ILongShortToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ILongShortToken is IERC20 {\\n  function owner() external returns (address);\\n\\n  function mint(address recipient, uint256 amount) external;\\n\\n  function burnFrom(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xb837b6538e56030646d75d907632e0b498c0d751937d2205293c03d222f50f93\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPrePOMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"./ILongShortToken.sol\\\";\\nimport \\\"./IHook.sol\\\";\\n\\ninterface IPrePOMarket {\\n  event Mint(address indexed minter, uint256 amount);\\n\\n  event Redemption(\\n    address indexed redeemer,\\n    address indexed recipient,\\n    uint256 amountAfterFee,\\n    uint256 fee\\n  );\\n\\n  event MintHookChange(address hook);\\n\\n  event RedeemHookChange(address hook);\\n\\n  event FinalLongPayoutSet(uint256 payout);\\n\\n  event RedemptionFeeChange(uint256 fee);\\n\\n  function mint(uint256 amount) external returns (uint256);\\n\\n  function redeem(\\n    uint256 longAmount,\\n    uint256 shortAmount,\\n    address recipient\\n  ) external;\\n\\n  function setMintHook(IHook mintHook) external;\\n\\n  function setRedeemHook(IHook redeemHook) external;\\n\\n  function setFinalLongPayout(uint256 finalLongPayout) external;\\n\\n  function setRedemptionFee(uint256 redemptionFee) external;\\n\\n  function getMintHook() external view returns (IHook);\\n\\n  function getRedeemHook() external view returns (IHook);\\n\\n  function getCollateral() external view returns (IERC20);\\n\\n  function getLongToken() external view returns (ILongShortToken);\\n\\n  function getShortToken() external view returns (ILongShortToken);\\n\\n  function getFloorLongPayout() external view returns (uint256);\\n\\n  function getCeilingLongPayout() external view returns (uint256);\\n\\n  function getFinalLongPayout() external view returns (uint256);\\n\\n  function getFloorValuation() external view returns (uint256);\\n\\n  function getCeilingValuation() external view returns (uint256);\\n\\n  function getRedemptionFee() external view returns (uint256);\\n\\n  function getExpiryTime() external view returns (uint256);\\n\\n  function MAX_PAYOUT() external view returns (uint256);\\n\\n  function FEE_DENOMINATOR() external view returns (uint256);\\n\\n  function FEE_LIMIT() external view returns (uint256);\\n\\n  function SET_MINT_HOOK_ROLE() external view returns (bytes32);\\n\\n  function SET_REDEEM_HOOK_ROLE() external view returns (bytes32);\\n\\n  function SET_FINAL_LONG_PAYOUT_ROLE() external view returns (bytes32);\\n\\n  function SET_REDEMPTION_FEE_ROLE() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xca495057fcd8a2e968b252120bb0570e0ee9c0fda31478c0d7dd339a5db631dc\",\"license\":\"GPL-3.0\"},\"prepo-shared-contracts/contracts/AccountListCaller.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"./interfaces/IAccountList.sol\\\";\\nimport \\\"./interfaces/IAccountListCaller.sol\\\";\\n\\ncontract AccountListCaller is IAccountListCaller {\\n  IAccountList internal _accountList;\\n\\n  function setAccountList(IAccountList accountList) public virtual override {\\n    _accountList = accountList;\\n    emit AccountListChange(accountList);\\n  }\\n\\n  function getAccountList() external view override returns (IAccountList) {\\n    return _accountList;\\n  }\\n}\\n\",\"keccak256\":\"0x12cd09b8775e56bfc76bda395c26ee8fa8025bcedb69adf7da19f61fcb0ade1f\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/AllowedMsgSenders.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"./interfaces/IAllowedMsgSenders.sol\\\";\\nimport \\\"./interfaces/IAccountList.sol\\\";\\n\\ncontract AllowedMsgSenders is IAllowedMsgSenders {\\n  IAccountList private _allowedMsgSenders;\\n\\n  modifier onlyAllowedMsgSenders() {\\n    require(\\n      _allowedMsgSenders.isIncluded(msg.sender),\\n      \\\"msg.sender not allowed\\\"\\n    );\\n    _;\\n  }\\n\\n  function setAllowedMsgSenders(IAccountList allowedMsgSenders)\\n    public\\n    virtual\\n    override\\n  {\\n    _allowedMsgSenders = allowedMsgSenders;\\n    emit AllowedMsgSendersChange(allowedMsgSenders);\\n  }\\n\\n  function getAllowedMsgSenders()\\n    external\\n    view\\n    virtual\\n    override\\n    returns (IAccountList)\\n  {\\n    return _allowedMsgSenders;\\n  }\\n}\\n\",\"keccak256\":\"0x790db58e66e310775b8b77122b602eca6d766ef93dec5a09820c5b8df7c266ec\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/SafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ISafeOwnable.sol\\\";\\n\\ncontract SafeOwnable is ISafeOwnable, Ownable {\\n  address private _nominee;\\n\\n  modifier onlyNominee() {\\n    require(_msgSender() == _nominee, \\\"msg.sender != nominee\\\");\\n    _;\\n  }\\n\\n  function transferOwnership(address nominee)\\n    public\\n    virtual\\n    override(ISafeOwnable, Ownable)\\n    onlyOwner\\n  {\\n    _setNominee(nominee);\\n  }\\n\\n  function acceptOwnership() public virtual override onlyNominee {\\n    _transferOwnership(_nominee);\\n    _setNominee(address(0));\\n  }\\n\\n  function renounceOwnership()\\n    public\\n    virtual\\n    override(ISafeOwnable, Ownable)\\n    onlyOwner\\n  {\\n    super.renounceOwnership();\\n    _setNominee(address(0));\\n  }\\n\\n  function getNominee() public view virtual override returns (address) {\\n    return _nominee;\\n  }\\n\\n  function _setNominee(address nominee) internal virtual {\\n    address _oldNominee = _nominee;\\n    _nominee = nominee;\\n    emit NomineeUpdate(_oldNominee, nominee);\\n  }\\n}\\n\",\"keccak256\":\"0xbb0a5407dcd2bc88279cdb40e03fd71e0e6663fced7202056672f12d74e110db\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/TokenSenderCaller.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"./interfaces/ITokenSenderCaller.sol\\\";\\nimport \\\"./interfaces/ITokenSender.sol\\\";\\n\\ncontract TokenSenderCaller is ITokenSenderCaller {\\n  ITokenSender internal _tokenSender;\\n\\n  function setTokenSender(ITokenSender tokenSender) public virtual override {\\n    _tokenSender = tokenSender;\\n    emit TokenSenderChange(address(tokenSender));\\n  }\\n\\n  function getTokenSender() external view override returns (ITokenSender) {\\n    return _tokenSender;\\n  }\\n}\\n\",\"keccak256\":\"0x8c9abf2281f8a2765a48eddc226694cff7b3dd8d91b32c1756378a4c23ea7cc2\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/TreasuryCaller.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"./interfaces/ITreasuryCaller.sol\\\";\\n\\ncontract TreasuryCaller is ITreasuryCaller {\\n  address internal _treasury;\\n\\n  function setTreasury(address treasury) public virtual override {\\n    _treasury = treasury;\\n    emit TreasuryChange(treasury);\\n  }\\n\\n  function getTreasury() external view override returns (address) {\\n    return _treasury;\\n  }\\n}\\n\",\"keccak256\":\"0x49b5cfd998d00dfc1bf166d0387dfd3e77f2d597ae43fd362aadeef13ec15641\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/IAccountList.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\n/**\\n * @notice Stores whether an address is included in a set.\\n */\\ninterface IAccountList {\\n  /**\\n   * @notice Sets whether an address in `accounts` is included.\\n   * @dev Whether an account is included is based on the boolean value at its\\n   * respective index in `included`. This function will only edit the\\n   * inclusion of addresses in `accounts`.\\n   *\\n   * The length of `accounts` and `included` must match.\\n   *\\n   * Only callable by `owner()`.\\n   * @param accounts Addresses to change inclusion for\\n   * @param included Whether to include corresponding address in `accounts`\\n   */\\n  function set(address[] calldata accounts, bool[] calldata included) external;\\n\\n  /**\\n   * @notice Removes every address from the set. Atomically includes any\\n   * addresses in `newIncludedAccounts`.\\n   * @dev Only callable by `owner()`.\\n   * @param includedAccounts Addresses to include after reset\\n   */\\n  function reset(address[] calldata includedAccounts) external;\\n\\n  /**\\n   * @param account Address to check inclusion for\\n   * @return Whether `account` is included\\n   */\\n  function isIncluded(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x46c75bd30d3ddf35d42bc109e27ccfac164ad532e4b222f916793ef683563208\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/IAccountListCaller.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"./IAccountList.sol\\\";\\n\\ninterface IAccountListCaller {\\n  event AccountListChange(IAccountList accountList);\\n\\n  function setAccountList(IAccountList accountList) external;\\n\\n  function getAccountList() external view returns (IAccountList);\\n}\\n\",\"keccak256\":\"0x55b69dde451080f58b444842a4e8ac67446f876377c05172c7a62b991a3493b9\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/IAllowedMsgSenders.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"./IAccountList.sol\\\";\\n\\ninterface IAllowedMsgSenders {\\n  event AllowedMsgSendersChange(IAccountList allowedMsgSenders);\\n\\n  function setAllowedMsgSenders(IAccountList allowedMsgSenders) external;\\n\\n  function getAllowedMsgSenders() external view returns (IAccountList);\\n}\\n\",\"keccak256\":\"0xd4c11399eac5ac705deb7e25fe1792ddf1f1d52d7a89ab9286a6801c652d0d62\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/ISafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\n/**\\n * @notice An extension of OpenZeppelin's `Ownable.sol` contract that requires\\n * an address to be nominated, and then accept that nomination, before\\n * ownership is transferred.\\n */\\ninterface ISafeOwnable {\\n  /**\\n   * @dev Emitted via `transferOwnership()`.\\n   * @param previousNominee The previous nominee\\n   * @param newNominee The new nominee\\n   */\\n  event NomineeUpdate(\\n    address indexed previousNominee,\\n    address indexed newNominee\\n  );\\n\\n  /**\\n   * @notice Nominates an address to be owner of the contract.\\n   * @dev Only callable by `owner()`.\\n   * @param nominee The address that will be nominated\\n   */\\n  function transferOwnership(address nominee) external;\\n\\n  /**\\n   * @notice Renounces ownership of contract and leaves the contract\\n   * without any owner.\\n   * @dev Only callable by `owner()`.\\n   * Sets nominee back to zero address.\\n   * It will not be possible to call `onlyOwner` functions anymore.\\n   */\\n  function renounceOwnership() external;\\n\\n  /**\\n   * @notice Accepts ownership nomination.\\n   * @dev Only callable by the current nominee. Sets nominee back to zero\\n   * address.\\n   */\\n  function acceptOwnership() external;\\n\\n  /// @return The current nominee\\n  function getNominee() external view returns (address);\\n}\\n\",\"keccak256\":\"0x50f8ea0098b1205f0e346f320aed8ea83d2de8fcbf08264b2e4fcefcc25c7780\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/ITokenSender.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"./IUintValue.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITokenSender {\\n  event PriceChange(IUintValue price);\\n\\n  event PriceMultiplierChange(uint256 priceMultiplier);\\n\\n  event ScaledPriceLowerBoundChange(uint256 scaledPrice);\\n\\n  function send(address recipient, uint256 unconvertedAmount) external;\\n\\n  function setPrice(IUintValue price) external;\\n\\n  function setPriceMultiplier(uint256 multiplier) external;\\n\\n  function setScaledPriceLowerBound(uint256 lowerBound) external;\\n\\n  function getOutputToken() external view returns (IERC20);\\n\\n  function getPrice() external view returns (IUintValue);\\n\\n  function getPriceMultiplier() external view returns (uint256);\\n\\n  function getScaledPrice() external view returns (uint256);\\n\\n  function getScaledPriceLowerBound() external view returns (uint256);\\n\\n  function MULTIPLIER_DENOMINATOR() external view returns (uint256);\\n\\n  function SET_PRICE_ROLE() external view returns (bytes32);\\n\\n  function SET_PRICE_MULTIPLIER_ROLE() external view returns (bytes32);\\n\\n  function SET_SCALED_PRICE_LOWER_BOUND_ROLE() external view returns (bytes32);\\n\\n  function SET_ALLOWED_MSG_SENDERS_ROLE() external view returns (bytes32);\\n\\n  function WITHDRAW_ERC20_ROLE() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x5a3a1eee793fafcc05e5af3b379b18e685d17d44e738e0733804367060871aef\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/ITokenSenderCaller.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"./ITokenSender.sol\\\";\\n\\ninterface ITokenSenderCaller {\\n  event TokenSenderChange(address sender);\\n\\n  function setTokenSender(ITokenSender tokenSender) external;\\n\\n  function getTokenSender() external returns (ITokenSender);\\n}\\n\",\"keccak256\":\"0xf3be6c617bc4e058ed51cab7f67ee3d6a02ad0b6f00d3fed881089860d43497a\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/ITreasuryCaller.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\ninterface ITreasuryCaller {\\n  event TreasuryChange(address treasury);\\n\\n  function setTreasury(address treasury) external;\\n\\n  function getTreasury() external view returns (address);\\n}\\n\",\"keccak256\":\"0x6d1176165dbbe16bcc55c8b9848cd3a65d40ce58ff3518d6cb57fb8b9f6bd57d\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/IUintValue.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\ninterface IUintValue {\\n  function get() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1b1ba9466eab57f66aa255fd76b50419656b37a4f8fa0ea73d7e0488fd7c45fc\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b610071565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610954806100806000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063a2088cc91161008c578063d338107e11610066578063d338107e146101a7578063e6dab1a8146101ba578063f0f44260146101cb578063f2fde38b146101de57600080fd5b8063a2088cc914610170578063b6ca0b6314610183578063bfdbb7be1461019457600080fd5b80636d14bd1f116100c85780636d14bd1f1461013a578063715018a61461014f57806379ba5097146101575780638da5cb5b1461015f57600080fd5b80632843314e146100ef5780633b19e84a1461011857806368f27d2014610129575b600080fd5b6000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b6005546001600160a01b03166100fc565b6001546001600160a01b03166100fc565b61014d61014836600461085f565b6101f1565b005b61014d610508565b61014d610524565b6002546001600160a01b03166100fc565b61014d61017e36600461083b565b610594565b6003546001600160a01b03166100fc565b61014d6101a236600461083b565b6105a8565b61014d6101b536600461083b565b6105b9565b6004546001600160a01b03166100fc565b61014d6101d936600461083b565b6105ca565b61014d6101ec36600461083b565b6105db565b6001546040516304d93ff560e31b81523360048201526001600160a01b03909116906326c9ffa89060240160206040518083038186803b15801561023457600080fd5b505afa158015610248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026c91906108a5565b6102b65760405162461bcd60e51b81526020600482015260166024820152751b5cd9cb9cd95b99195c881b9bdd08185b1b1bddd95960521b60448201526064015b60405180910390fd5b6000546001600160a01b031615610387576000546040516304d93ff560e31b81526001600160a01b038681166004830152909116906326c9ffa89060240160206040518083038186803b15801561030c57600080fd5b505afa158015610320573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034491906108a5565b6103875760405162461bcd60e51b815260206004820152601460248201527314995919595b595c881b9bdd08185b1b1bddd95960621b60448201526064016102ad565b600061039382846108e4565b9050801561050157336001600160a01b0316635c1548fb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103d457600080fd5b505afa1580156103e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040c91906108c7565b6005546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018490529116906323b872dd90606401602060405180830381600087803b15801561045f57600080fd5b505af1158015610473573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049791906108a5565b5060048054604051633419e74d60e21b81526001600160a01b03878116938201939093526024810184905291169063d0679d3490604401600060405180830381600087803b1580156104e857600080fd5b505af11580156104fc573d6000803e3d6000fd5b505050505b5050505050565b6105106105ec565b610518610646565b6105226000610658565b565b6003546001600160a01b0316336001600160a01b03161461057f5760405162461bcd60e51b81526020600482015260156024820152746d73672e73656e64657220213d206e6f6d696e656560581b60448201526064016102ad565b600354610518906001600160a01b03166106aa565b61059c6105ec565b6105a5816106fc565b50565b6105b06105ec565b6105a581610751565b6105c16105ec565b6105a58161079f565b6105d26105ec565b6105a5816107ed565b6105e36105ec565b6105a581610658565b6002546001600160a01b031633146105225760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ad565b61064e6105ec565b61052260006106aa565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fe7624d724357e317f51579affee5050a97c60b060e513e69aa8a1a35fb3315a790600090a35050565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f0dacf1df82205439fd27104877c9ed6bec034e24daf9b3afb96f62191e0a7ea7906020015b60405180910390a150565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527fc675cdccdd880d63acbe7af916bd9e4b8e8ffc96d4b0e1764619fa064658e93e90602001610746565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f310aaf5db2aa9335d0aebcc973d03748ed641890df20d89139a312856b5a675c90602001610746565b600580546001600160a01b0319166001600160a01b0383169081179091556040519081527f1ac54af2084ba0e4b86b7bc54b978ce7dd4ca046d3dec89d7c8963873820c0bb90602001610746565b60006020828403121561084d57600080fd5b813561085881610909565b9392505050565b6000806000806080858703121561087557600080fd5b843561088081610909565b9350602085013561089081610909565b93969395505050506040820135916060013590565b6000602082840312156108b757600080fd5b8151801515811461085857600080fd5b6000602082840312156108d957600080fd5b815161085881610909565b60008282101561090457634e487b7160e01b600052601160045260246000fd5b500390565b6001600160a01b03811681146105a557600080fdfea26469706673582212203a3120f352e34e9f655d9c5cb5f975f8a0d9195322ad38d9e89081987a6f124564736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063a2088cc91161008c578063d338107e11610066578063d338107e146101a7578063e6dab1a8146101ba578063f0f44260146101cb578063f2fde38b146101de57600080fd5b8063a2088cc914610170578063b6ca0b6314610183578063bfdbb7be1461019457600080fd5b80636d14bd1f116100c85780636d14bd1f1461013a578063715018a61461014f57806379ba5097146101575780638da5cb5b1461015f57600080fd5b80632843314e146100ef5780633b19e84a1461011857806368f27d2014610129575b600080fd5b6000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b6005546001600160a01b03166100fc565b6001546001600160a01b03166100fc565b61014d61014836600461085f565b6101f1565b005b61014d610508565b61014d610524565b6002546001600160a01b03166100fc565b61014d61017e36600461083b565b610594565b6003546001600160a01b03166100fc565b61014d6101a236600461083b565b6105a8565b61014d6101b536600461083b565b6105b9565b6004546001600160a01b03166100fc565b61014d6101d936600461083b565b6105ca565b61014d6101ec36600461083b565b6105db565b6001546040516304d93ff560e31b81523360048201526001600160a01b03909116906326c9ffa89060240160206040518083038186803b15801561023457600080fd5b505afa158015610248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026c91906108a5565b6102b65760405162461bcd60e51b81526020600482015260166024820152751b5cd9cb9cd95b99195c881b9bdd08185b1b1bddd95960521b60448201526064015b60405180910390fd5b6000546001600160a01b031615610387576000546040516304d93ff560e31b81526001600160a01b038681166004830152909116906326c9ffa89060240160206040518083038186803b15801561030c57600080fd5b505afa158015610320573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034491906108a5565b6103875760405162461bcd60e51b815260206004820152601460248201527314995919595b595c881b9bdd08185b1b1bddd95960621b60448201526064016102ad565b600061039382846108e4565b9050801561050157336001600160a01b0316635c1548fb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103d457600080fd5b505afa1580156103e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040c91906108c7565b6005546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018490529116906323b872dd90606401602060405180830381600087803b15801561045f57600080fd5b505af1158015610473573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049791906108a5565b5060048054604051633419e74d60e21b81526001600160a01b03878116938201939093526024810184905291169063d0679d3490604401600060405180830381600087803b1580156104e857600080fd5b505af11580156104fc573d6000803e3d6000fd5b505050505b5050505050565b6105106105ec565b610518610646565b6105226000610658565b565b6003546001600160a01b0316336001600160a01b03161461057f5760405162461bcd60e51b81526020600482015260156024820152746d73672e73656e64657220213d206e6f6d696e656560581b60448201526064016102ad565b600354610518906001600160a01b03166106aa565b61059c6105ec565b6105a5816106fc565b50565b6105b06105ec565b6105a581610751565b6105c16105ec565b6105a58161079f565b6105d26105ec565b6105a5816107ed565b6105e36105ec565b6105a581610658565b6002546001600160a01b031633146105225760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102ad565b61064e6105ec565b61052260006106aa565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fe7624d724357e317f51579affee5050a97c60b060e513e69aa8a1a35fb3315a790600090a35050565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f0dacf1df82205439fd27104877c9ed6bec034e24daf9b3afb96f62191e0a7ea7906020015b60405180910390a150565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527fc675cdccdd880d63acbe7af916bd9e4b8e8ffc96d4b0e1764619fa064658e93e90602001610746565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f310aaf5db2aa9335d0aebcc973d03748ed641890df20d89139a312856b5a675c90602001610746565b600580546001600160a01b0319166001600160a01b0383169081179091556040519081527f1ac54af2084ba0e4b86b7bc54b978ce7dd4ca046d3dec89d7c8963873820c0bb90602001610746565b60006020828403121561084d57600080fd5b813561085881610909565b9392505050565b6000806000806080858703121561087557600080fd5b843561088081610909565b9350602085013561089081610909565b93969395505050506040820135916060013590565b6000602082840312156108b757600080fd5b8151801515811461085857600080fd5b6000602082840312156108d957600080fd5b815161085881610909565b60008282101561090457634e487b7160e01b600052601160045260246000fd5b500390565b6001600160a01b03811681146105a557600080fdfea26469706673582212203a3120f352e34e9f655d9c5cb5f975f8a0d9195322ad38d9e89081987a6f124564736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "Only callable by the current nominee. Sets nominee back to zero address."
      },
      "getNominee()": {
        "returns": {
          "_0": "The current nominee"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Accepts ownership nomination."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16773,
        "contract": "contracts/RedeemHook.sol:RedeemHook",
        "label": "_accountList",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAccountList)17609"
      },
      {
        "astId": 16809,
        "contract": "contracts/RedeemHook.sol:RedeemHook",
        "label": "_allowedMsgSenders",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IAccountList)17609"
      },
      {
        "astId": 4929,
        "contract": "contracts/RedeemHook.sol:RedeemHook",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 17300,
        "contract": "contracts/RedeemHook.sol:RedeemHook",
        "label": "_nominee",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 17404,
        "contract": "contracts/RedeemHook.sol:RedeemHook",
        "label": "_tokenSender",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ITokenSender)17933"
      },
      {
        "astId": 17441,
        "contract": "contracts/RedeemHook.sol:RedeemHook",
        "label": "_treasury",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IAccountList)17609": {
        "encoding": "inplace",
        "label": "contract IAccountList",
        "numberOfBytes": "20"
      },
      "t_contract(ITokenSender)17933": {
        "encoding": "inplace",
        "label": "contract ITokenSender",
        "numberOfBytes": "20"
      }
    }
  }
}
