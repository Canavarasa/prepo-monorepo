{
  "address": "0x240b7b469397c19A347d5A9C9cBA9E3D93D8Db85",
  "abi": [
    {
      "inputs": [],
      "name": "AddressBeaconNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LongTokenAddressTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ShortTokenAddressTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UintBeaconNotSet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "AddressBeaconChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "longToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "shortToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "addressBeacon",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "uintBeacon",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "collateral",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "floorLongPayout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ceilingLongPayout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryLongPayout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "floorValuation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ceilingValuation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTime",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IPrePOMarket.MarketParameters",
          "name": "parameters",
          "type": "tuple"
        }
      ],
      "name": "MarketCreation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousNominee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newNominee",
          "type": "address"
        }
      ],
      "name": "NomineeUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "UintBeaconChange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenNameSuffix",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenSymbolSuffix",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "longTokenSalt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "shortTokenSalt",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "collateral",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "floorLongPayout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ceilingLongPayout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryLongPayout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "floorValuation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ceilingValuation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiryTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPrePOMarket.MarketParameters",
          "name": "parameters",
          "type": "tuple"
        }
      ],
      "name": "createMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAddressBeacon",
      "outputs": [
        {
          "internalType": "contract IAddressBeacon",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNominee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUintBeacon",
      "outputs": [
        {
          "internalType": "contract IUintBeacon",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAddressBeacon",
          "name": "addressBeacon",
          "type": "address"
        }
      ],
      "name": "setAddressBeacon",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUintBeacon",
          "name": "uintBeacon",
          "type": "address"
        }
      ],
      "name": "setUintBeacon",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nominee",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x45166065d69b502e0d3fb173f81e51b698c4ab2f4bfd915e57945e0b62348588",
  "receipt": {
    "to": null,
    "from": "0x4F05Cf239a8BC2bfdA92673bC3c8a87E091b6D97",
    "contractAddress": "0x240b7b469397c19A347d5A9C9cBA9E3D93D8Db85",
    "transactionIndex": 1,
    "gasUsed": "26357410",
    "logsBloom": "0x
    "blockHash": "0xfa63b921b029322aeb77cf96c09e22fb980616b708eea761084af4ba25135a29",
    "transactionHash": "0x45166065d69b502e0d3fb173f81e51b698c4ab2f4bfd915e57945e0b62348588",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 99220027,
        "transactionHash": "0x45166065d69b502e0d3fb173f81e51b698c4ab2f4bfd915e57945e0b62348588",
        "address": "0x240b7b469397c19A347d5A9C9cBA9E3D93D8Db85",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004f05cf239a8bc2bfda92673bc3c8a87e091b6d97"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xfa63b921b029322aeb77cf96c09e22fb980616b708eea761084af4ba25135a29"
      }
    ],
    "blockNumber": 99220027,
    "cumulativeGasUsed": "26357410",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "84b86c455dfe286363523437f420d411",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AddressBeaconNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LongTokenAddressTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ShortTokenAddressTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UintBeaconNotSet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"AddressBeaconChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"longToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"shortToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addressBeacon\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"uintBeacon\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"floorLongPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ceilingLongPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryLongPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"floorValuation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ceilingValuation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IPrePOMarket.MarketParameters\",\"name\":\"parameters\",\"type\":\"tuple\"}],\"name\":\"MarketCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousNominee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newNominee\",\"type\":\"address\"}],\"name\":\"NomineeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"UintBeaconChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenNameSuffix\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbolSuffix\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"longTokenSalt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"shortTokenSalt\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"floorLongPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ceilingLongPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryLongPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"floorValuation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ceilingValuation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrePOMarket.MarketParameters\",\"name\":\"parameters\",\"type\":\"tuple\"}],\"name\":\"createMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressBeacon\",\"outputs\":[{\"internalType\":\"contract IAddressBeacon\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNominee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUintBeacon\",\"outputs\":[{\"internalType\":\"contract IUintBeacon\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAddressBeacon\",\"name\":\"addressBeacon\",\"type\":\"address\"}],\"name\":\"setAddressBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUintBeacon\",\"name\":\"uintBeacon\",\"type\":\"address\"}],\"name\":\"setUintBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nominee\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"Only callable by the current nominee. Sets nominee back to zero address.\"},\"getNominee()\":{\"returns\":{\"_0\":\"The current nominee\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Accepts ownership nomination.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PrePOMarketFactory.sol\":\"PrePOMarketFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0xd2dd6003a2dc02ab905fd405938322e510429d19ae6c07c2c683d70f13ab2f36\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x948d8b2d18f38141ec78c5229d770d950ebc781ed3f44cc9e3ccbb9fded5846a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/LongShortToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport {ILongShortToken} from \\\"./interfaces/ILongShortToken.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ERC20, ERC20Burnable} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport {ERC20Permit} from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\n\\ncontract LongShortToken is\\n  ILongShortToken,\\n  ERC20Burnable,\\n  ERC20Permit,\\n  Ownable\\n{\\n  constructor(string memory name, string memory symbol)\\n    ERC20(name, symbol)\\n    ERC20Permit(name)\\n  {}\\n\\n  function owner()\\n    public\\n    view\\n    override(Ownable, ILongShortToken)\\n    returns (address)\\n  {\\n    return super.owner();\\n  }\\n\\n  function mint(address recipient, uint256 amount)\\n    external\\n    override\\n    onlyOwner\\n  {\\n    _mint(recipient, amount);\\n  }\\n\\n  function burnFrom(address account, uint256 amount)\\n    public\\n    override(ERC20Burnable, ILongShortToken)\\n  {\\n    if (msg.sender == owner()) {\\n      super._burn(account, amount);\\n      return;\\n    }\\n    super.burnFrom(account, amount);\\n  }\\n}\\n\",\"keccak256\":\"0xecd510cd69de4c0f389835e4888c595a9fd536e8c92592916db193b513f1eb2d\",\"license\":\"AGPL-3.0\"},\"contracts/PrePOMarket.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport {IHook} from \\\"./interfaces/IHook.sol\\\";\\nimport {IAddressBeacon, ICollateral, IERC20, ILongShortToken, IPrePOMarket, IUintBeacon} from \\\"./interfaces/IPrePOMarket.sol\\\";\\nimport {SafeAccessControlEnumerable} from \\\"prepo-shared-contracts/contracts/SafeAccessControlEnumerable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract PrePOMarket is\\n  IPrePOMarket,\\n  ReentrancyGuard,\\n  SafeAccessControlEnumerable\\n{\\n  ILongShortToken private immutable _longToken;\\n  ILongShortToken private immutable _shortToken;\\n\\n  IAddressBeacon private immutable _addressBeacon;\\n  IUintBeacon private immutable _uintBeacon;\\n\\n  ICollateral private immutable _collateral;\\n\\n  uint256 private immutable _floorLongPayout;\\n  uint256 private immutable _ceilingLongPayout;\\n  uint256 private immutable _expiryLongPayout;\\n  uint256 private _finalLongPayout;\\n\\n  uint256 private immutable _floorValuation;\\n  uint256 private immutable _ceilingValuation;\\n\\n  uint256 private immutable _expiryTime;\\n\\n  uint256 public constant override PERCENT_UNIT = 1000000;\\n  uint256 public constant override FEE_LIMIT = 100000;\\n\\n  bytes32 public constant override SET_FINAL_LONG_PAYOUT_ROLE =\\n    keccak256(\\\"setFinalLongPayout\\\");\\n\\n  bytes32 public constant override MINT_HOOK_KEY = keccak256(\\\"MarketMintHook\\\");\\n  bytes32 public constant override REDEEM_HOOK_KEY =\\n    keccak256(\\\"MarketRedeemHook\\\");\\n  bytes32 public constant override MINT_FEE_PERCENT_KEY =\\n    keccak256(\\\"MarketMintFeePercent\\\");\\n  bytes32 public constant override REDEEM_FEE_PERCENT_KEY =\\n    keccak256(\\\"MarketRedeemFeePercent\\\");\\n\\n  /**\\n   * Assumes `_collateral`, `_longToken`, and `_shortToken` are\\n   * valid, since they will be handled by the PrePOMarketFactory.\\n   *\\n   * Assumes that ownership of `_longToken` and `_shortToken` has been\\n   * transferred to this contract via `createMarket()` in\\n   * `PrePOMarketFactory.sol`.\\n   */\\n  constructor(\\n    address deployer,\\n    ILongShortToken longToken,\\n    ILongShortToken shortToken,\\n    IAddressBeacon addressBeacon,\\n    IUintBeacon uintBeacon,\\n    IPrePOMarket.MarketParameters memory parameters\\n  ) {\\n    if (parameters.ceilingLongPayout <= parameters.floorLongPayout)\\n      revert CeilingNotAboveFloor();\\n    if (parameters.ceilingLongPayout > 1e18) revert CeilingTooHigh();\\n    if (parameters.expiryLongPayout < parameters.floorLongPayout)\\n      revert FinalPayoutTooLow();\\n    if (parameters.expiryLongPayout > parameters.ceilingLongPayout)\\n      revert FinalPayoutTooHigh();\\n    if (block.timestamp >= parameters.expiryTime) revert ExpiryInPast();\\n    _revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    _grantRole(SET_FINAL_LONG_PAYOUT_ROLE, deployer);\\n    _setRoleAdmin(SET_FINAL_LONG_PAYOUT_ROLE, SET_FINAL_LONG_PAYOUT_ROLE);\\n    _longToken = longToken;\\n    _shortToken = shortToken;\\n    _addressBeacon = addressBeacon;\\n    _uintBeacon = uintBeacon;\\n    _collateral = ICollateral(parameters.collateral);\\n    _floorLongPayout = parameters.floorLongPayout;\\n    _ceilingLongPayout = parameters.ceilingLongPayout;\\n    _expiryLongPayout = parameters.expiryLongPayout;\\n    _finalLongPayout = type(uint256).max;\\n    _floorValuation = parameters.floorValuation;\\n    _ceilingValuation = parameters.ceilingValuation;\\n    _expiryTime = parameters.expiryTime;\\n  }\\n\\n  function mint(\\n    uint256 collateralAmount,\\n    address recipient,\\n    bytes calldata data\\n  ) external override nonReentrant returns (uint256) {\\n    return _mint(collateralAmount, recipient, data);\\n  }\\n\\n  function permitAndMint(\\n    Permit calldata permit,\\n    uint256 collateralAmount,\\n    address recipient,\\n    bytes calldata data\\n  ) external override nonReentrant returns (uint256) {\\n    if (permit.deadline != 0) {\\n      _collateral.permit(\\n        msg.sender,\\n        address(this),\\n        type(uint256).max,\\n        permit.deadline,\\n        permit.v,\\n        permit.r,\\n        permit.s\\n      );\\n    }\\n    return _mint(collateralAmount, recipient, data);\\n  }\\n\\n  function redeem(\\n    uint256 longAmount,\\n    uint256 shortAmount,\\n    address recipient,\\n    bytes calldata data\\n  ) external override nonReentrant {\\n    if (longAmount > _longToken.balanceOf(msg.sender))\\n      revert InsufficientLongToken();\\n    if (shortAmount > _shortToken.balanceOf(msg.sender))\\n      revert InsufficientShortToken();\\n    uint256 collateralAmount;\\n    if (_finalLongPayout != type(uint256).max) {\\n      uint256 shortPayout = 1e18 - _finalLongPayout;\\n      collateralAmount =\\n        (_finalLongPayout * longAmount + shortPayout * shortAmount) /\\n        1e18;\\n    } else {\\n      if (longAmount != shortAmount) revert UnequalRedemption();\\n      collateralAmount = longAmount;\\n    }\\n    uint256 collateralFeeAmount = _processFee(\\n      REDEEM_HOOK_KEY,\\n      REDEEM_FEE_PERCENT_KEY,\\n      collateralAmount,\\n      recipient,\\n      data\\n    );\\n    if (longAmount > 0) _longToken.burnFrom(msg.sender, longAmount);\\n    if (shortAmount > 0) _shortToken.burnFrom(msg.sender, shortAmount);\\n    uint256 collateralAmountAfterFee = collateralAmount - collateralFeeAmount;\\n    _collateral.transfer(recipient, collateralAmountAfterFee);\\n    emit Redemption(\\n      msg.sender,\\n      recipient,\\n      collateralAmountAfterFee,\\n      collateralFeeAmount\\n    );\\n  }\\n\\n  function setFinalLongPayout(uint256 finalLongPayout)\\n    external\\n    override\\n    onlyRole(SET_FINAL_LONG_PAYOUT_ROLE)\\n  {\\n    if (_finalLongPayout <= _ceilingLongPayout) revert MarketEnded();\\n    if (finalLongPayout < _floorLongPayout) revert FinalPayoutTooLow();\\n    if (finalLongPayout > _ceilingLongPayout) revert FinalPayoutTooHigh();\\n    _finalLongPayout = finalLongPayout;\\n    emit FinalLongPayoutSet(finalLongPayout);\\n  }\\n\\n  function setFinalLongPayoutAfterExpiry() external override {\\n    if (_finalLongPayout <= _ceilingLongPayout) revert MarketEnded();\\n    if (block.timestamp <= _expiryTime) revert ExpiryNotPassed();\\n    _finalLongPayout = _expiryLongPayout;\\n    emit FinalLongPayoutSet(_expiryLongPayout);\\n  }\\n\\n  function getLongToken() external view override returns (ILongShortToken) {\\n    return _longToken;\\n  }\\n\\n  function getShortToken() external view override returns (ILongShortToken) {\\n    return _shortToken;\\n  }\\n\\n  function getAddressBeacon() external view override returns (IAddressBeacon) {\\n    return _addressBeacon;\\n  }\\n\\n  function getUintBeacon() external view override returns (IUintBeacon) {\\n    return _uintBeacon;\\n  }\\n\\n  function getCollateral() external view override returns (ICollateral) {\\n    return _collateral;\\n  }\\n\\n  function getFloorLongPayout() external view override returns (uint256) {\\n    return _floorLongPayout;\\n  }\\n\\n  function getCeilingLongPayout() external view override returns (uint256) {\\n    return _ceilingLongPayout;\\n  }\\n\\n  function getExpiryLongPayout() external view override returns (uint256) {\\n    return _expiryLongPayout;\\n  }\\n\\n  function getFinalLongPayout() external view override returns (uint256) {\\n    return _finalLongPayout;\\n  }\\n\\n  function getFloorValuation() external view override returns (uint256) {\\n    return _floorValuation;\\n  }\\n\\n  function getCeilingValuation() external view override returns (uint256) {\\n    return _ceilingValuation;\\n  }\\n\\n  function getExpiryTime() external view override returns (uint256) {\\n    return _expiryTime;\\n  }\\n\\n  function getFeePercent(bytes32 feeKey)\\n    public\\n    view\\n    override\\n    returns (uint256 feePercent)\\n  {\\n    // 20 byte address not directly convertible to bytes32\\n    uint256 customFeePercent = _uintBeacon.get(\\n      bytes32(uint256(uint160(address(this))))\\n    );\\n    if (customFeePercent != 0) {\\n      feePercent = customFeePercent == type(uint256).max\\n        ? 0\\n        : customFeePercent;\\n    } else {\\n      feePercent = _uintBeacon.get(feeKey);\\n    }\\n    if (feePercent > FEE_LIMIT) feePercent = FEE_LIMIT;\\n  }\\n\\n  function _processFee(\\n    bytes32 hookKey,\\n    bytes32 feeKey,\\n    uint256 collateralAmountBeforeFee,\\n    address recipient,\\n    bytes calldata data\\n  ) internal returns (uint256 actualCollateralFeeAmount) {\\n    IHook hook = IHook(_addressBeacon.get(hookKey));\\n    if (address(hook) == address(0)) return 0;\\n    uint256 feePercent = getFeePercent(feeKey);\\n    if (feePercent == 0) {\\n      if (collateralAmountBeforeFee == 0) revert ZeroCollateralAmount();\\n      hook.hook(\\n        msg.sender,\\n        recipient,\\n        collateralAmountBeforeFee,\\n        collateralAmountBeforeFee,\\n        data\\n      );\\n      return 0;\\n    }\\n    uint256 expectedCollateralFeeAmount = (collateralAmountBeforeFee *\\n      feePercent) / PERCENT_UNIT;\\n    if (expectedCollateralFeeAmount == 0) revert FeeRoundsToZero();\\n    _collateral.approve(address(hook), expectedCollateralFeeAmount);\\n    uint256 collateralAllowanceBefore = _collateral.allowance(\\n      address(this),\\n      address(hook)\\n    );\\n    hook.hook(\\n      msg.sender,\\n      recipient,\\n      collateralAmountBeforeFee,\\n      collateralAmountBeforeFee - expectedCollateralFeeAmount,\\n      data\\n    );\\n    actualCollateralFeeAmount =\\n      collateralAllowanceBefore -\\n      _collateral.allowance(address(this), address(hook));\\n    _collateral.approve(address(hook), 0);\\n  }\\n\\n  function _mint(\\n    uint256 collateralAmount,\\n    address recipient,\\n    bytes calldata data\\n  ) internal returns (uint256 longShortAmount) {\\n    if (_finalLongPayout <= _ceilingLongPayout) revert MarketEnded();\\n    if (collateralAmount > _collateral.balanceOf(msg.sender))\\n      revert InsufficientCollateral();\\n    _collateral.transferFrom(msg.sender, address(this), collateralAmount);\\n    uint256 collateralFeeAmount = _processFee(\\n      MINT_HOOK_KEY,\\n      MINT_FEE_PERCENT_KEY,\\n      collateralAmount,\\n      recipient,\\n      data\\n    );\\n    longShortAmount = collateralAmount - collateralFeeAmount;\\n    _longToken.mint(recipient, longShortAmount);\\n    _shortToken.mint(recipient, longShortAmount);\\n    emit Mint(msg.sender, recipient, longShortAmount, collateralFeeAmount);\\n  }\\n}\\n\",\"keccak256\":\"0xa545b0fd354f1e2a336809fb6f748b344ff4b7682f40478035e61f4a14b1668f\",\"license\":\"AGPL-3.0\"},\"contracts/PrePOMarketFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport {LongShortToken} from \\\"./LongShortToken.sol\\\";\\nimport {IPrePOMarket, PrePOMarket} from \\\"./PrePOMarket.sol\\\";\\nimport {ILongShortToken} from \\\"./interfaces/ILongShortToken.sol\\\";\\nimport {IAddressBeacon, IPrePOMarketFactory, IUintBeacon} from \\\"./interfaces/IPrePOMarketFactory.sol\\\";\\nimport {SafeOwnable} from \\\"prepo-shared-contracts/contracts/SafeOwnable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract PrePOMarketFactory is\\n  IPrePOMarketFactory,\\n  ReentrancyGuard,\\n  SafeOwnable\\n{\\n  IAddressBeacon private _addressBeacon;\\n  IUintBeacon private _uintBeacon;\\n\\n  function createMarket(\\n    string calldata tokenNameSuffix,\\n    string calldata tokenSymbolSuffix,\\n    bytes32 longTokenSalt,\\n    bytes32 shortTokenSalt,\\n    IPrePOMarket.MarketParameters calldata parameters\\n  ) external override nonReentrant {\\n    if (address(_addressBeacon) == address(0)) revert AddressBeaconNotSet();\\n    if (address(_uintBeacon) == address(0)) revert UintBeaconNotSet();\\n    (LongShortToken longToken, LongShortToken shortToken) = _createPairTokens(\\n      tokenNameSuffix,\\n      tokenSymbolSuffix,\\n      longTokenSalt,\\n      shortTokenSalt\\n    );\\n    if (address(longToken) > parameters.collateral)\\n      revert LongTokenAddressTooHigh();\\n    if (address(shortToken) > parameters.collateral)\\n      revert ShortTokenAddressTooHigh();\\n    bytes32 salt = keccak256(abi.encodePacked(longToken, shortToken));\\n    PrePOMarket newMarket = new PrePOMarket{salt: salt}(\\n      msg.sender,\\n      ILongShortToken(address(longToken)),\\n      ILongShortToken(address(shortToken)),\\n      _addressBeacon,\\n      _uintBeacon,\\n      parameters\\n    );\\n    longToken.transferOwnership(address(newMarket));\\n    shortToken.transferOwnership(address(newMarket));\\n    emit MarketCreation(\\n      address(newMarket),\\n      msg.sender,\\n      address(longToken),\\n      address(shortToken),\\n      address(_addressBeacon),\\n      address(_uintBeacon),\\n      parameters\\n    );\\n  }\\n\\n  function setAddressBeacon(IAddressBeacon addressBeacon)\\n    external\\n    override\\n    onlyOwner\\n  {\\n    _addressBeacon = addressBeacon;\\n    emit AddressBeaconChange(address(addressBeacon));\\n  }\\n\\n  function setUintBeacon(IUintBeacon uintBeacon) external override onlyOwner {\\n    _uintBeacon = uintBeacon;\\n    emit UintBeaconChange(address(uintBeacon));\\n  }\\n\\n  function getAddressBeacon() external view override returns (IAddressBeacon) {\\n    return _addressBeacon;\\n  }\\n\\n  function getUintBeacon() external view override returns (IUintBeacon) {\\n    return _uintBeacon;\\n  }\\n\\n  function _createPairTokens(\\n    string memory tokenNameSuffix,\\n    string memory tokenSymbolSuffix,\\n    bytes32 longTokenSalt,\\n    bytes32 shortTokenSalt\\n  )\\n    internal\\n    returns (LongShortToken newLongToken, LongShortToken newShortToken)\\n  {\\n    string memory longTokenName = string(\\n      abi.encodePacked(\\\"LONG\\\", \\\" \\\", tokenNameSuffix)\\n    );\\n    string memory shortTokenName = string(\\n      abi.encodePacked(\\\"SHORT\\\", \\\" \\\", tokenNameSuffix)\\n    );\\n    string memory longTokenSymbol = string(\\n      abi.encodePacked(\\\"L\\\", \\\"_\\\", tokenSymbolSuffix)\\n    );\\n    string memory shortTokenSymbol = string(\\n      abi.encodePacked(\\\"S\\\", \\\"_\\\", tokenSymbolSuffix)\\n    );\\n    newLongToken = new LongShortToken{salt: longTokenSalt}(\\n      longTokenName,\\n      longTokenSymbol\\n    );\\n    newShortToken = new LongShortToken{salt: shortTokenSalt}(\\n      shortTokenName,\\n      shortTokenSymbol\\n    );\\n    return (newLongToken, newShortToken);\\n  }\\n}\\n\",\"keccak256\":\"0xdbebc07b27ec98737c02eb49a90ba02e5fdb88a727904a4bf2f3e569579e5562\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ICollateral.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport {IHook} from \\\"./IHook.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {IERC20PermitUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\\\";\\n\\ninterface ICollateral is IERC20Upgradeable, IERC20PermitUpgradeable {\\n  event Deposit(\\n    address indexed funder,\\n    address indexed recipient,\\n    uint256 amountAfterFee,\\n    uint256 fee\\n  );\\n  event DepositFeePercentChange(uint256 percent);\\n  event DepositHookChange(address hook);\\n  event Withdraw(\\n    address indexed funder,\\n    address indexed recipient,\\n    uint256 amountAfterFee,\\n    uint256 fee\\n  );\\n  event WithdrawFeePercentChange(uint256 percent);\\n  event WithdrawHookChange(address hook);\\n\\n  function deposit(\\n    address recipient,\\n    uint256 baseTokenAmount,\\n    bytes calldata data\\n  ) external returns (uint256 collateralMintAmount);\\n\\n  function withdraw(\\n    address recipient,\\n    uint256 collateralAmount,\\n    bytes calldata data\\n  ) external returns (uint256 baseTokenAmountAfterFee);\\n\\n  function setDepositFeePercent(uint256 depositFeePercent) external;\\n\\n  function setWithdrawFeePercent(uint256 withdrawFeePercent) external;\\n\\n  function setDepositHook(IHook hook) external;\\n\\n  function setWithdrawHook(IHook hook) external;\\n\\n  function getBaseToken() external view returns (IERC20);\\n\\n  function getDepositFeePercent() external view returns (uint256);\\n\\n  function getWithdrawFeePercent() external view returns (uint256);\\n\\n  function getDepositHook() external view returns (IHook);\\n\\n  function getWithdrawHook() external view returns (IHook);\\n\\n  function getBaseTokenBalance() external view returns (uint256);\\n\\n  function PERCENT_UNIT() external view returns (uint256);\\n\\n  function FEE_LIMIT() external view returns (uint256);\\n\\n  function SET_DEPOSIT_FEE_PERCENT_ROLE() external view returns (bytes32);\\n\\n  function SET_WITHDRAW_FEE_PERCENT_ROLE() external view returns (bytes32);\\n\\n  function SET_DEPOSIT_HOOK_ROLE() external view returns (bytes32);\\n\\n  function SET_WITHDRAW_HOOK_ROLE() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x7a3cd4fc56cf0caa9db1bca5d6d74c9fe823fc3e66ea94eacfc864622e4c7fea\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IHook.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\ninterface IHook {\\n  function hook(\\n    address funder,\\n    address recipient,\\n    uint256 amountBeforeFee,\\n    uint256 amountAfterFee,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x2255d480b5a471b927ac5e95225c03ac164a1cf5d187ad22493d1cab46fabf01\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ILongShortToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.7;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ILongShortToken is IERC20 {\\n  function owner() external returns (address);\\n\\n  function mint(address recipient, uint256 amount) external;\\n\\n  function burnFrom(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x098486f2585b5a0581444470a8dd7b4cf0b4ad834622516e2ceb9ac3f4700618\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPrePOMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.7;\\n\\nimport {ICollateral} from \\\"./ICollateral.sol\\\";\\nimport {IERC20, ILongShortToken} from \\\"./ILongShortToken.sol\\\";\\nimport {IAddressBeacon} from \\\"prepo-shared-contracts/contracts/interfaces/IAddressBeacon.sol\\\";\\nimport {IUintBeacon} from \\\"prepo-shared-contracts/contracts/interfaces/IUintBeacon.sol\\\";\\n\\ninterface IPrePOMarket {\\n  struct MarketParameters {\\n    address collateral;\\n    uint256 floorLongPayout;\\n    uint256 ceilingLongPayout;\\n    uint256 expiryLongPayout;\\n    uint256 floorValuation;\\n    uint256 ceilingValuation;\\n    uint256 expiryTime;\\n  }\\n\\n  struct Permit {\\n    uint256 deadline;\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n\\n  event AddressBeaconChange(address beacon);\\n  event FinalLongPayoutSet(uint256 payout);\\n  event Mint(\\n    address indexed funder,\\n    address indexed recipient,\\n    uint256 amountAfterFee,\\n    uint256 fee\\n  );\\n  event Redemption(\\n    address indexed funder,\\n    address indexed recipient,\\n    uint256 amountAfterFee,\\n    uint256 fee\\n  );\\n  event UintBeaconChange(address beacon);\\n\\n  error CeilingNotAboveFloor();\\n  error CeilingTooHigh();\\n  error ExpiryInPast();\\n  error ExpiryNotPassed();\\n  error FeePercentTooHigh();\\n  error FeeRoundsToZero();\\n  error FinalPayoutTooHigh();\\n  error FinalPayoutTooLow();\\n  error InsufficientCollateral();\\n  error InsufficientLongToken();\\n  error InsufficientShortToken();\\n  error MarketEnded();\\n  error UnequalRedemption();\\n  error ZeroCollateralAmount();\\n\\n  function mint(\\n    uint256 amount,\\n    address recipient,\\n    bytes calldata data\\n  ) external returns (uint256);\\n\\n  function permitAndMint(\\n    Permit calldata permit,\\n    uint256 collateralAmount,\\n    address recipient,\\n    bytes calldata data\\n  ) external returns (uint256);\\n\\n  function redeem(\\n    uint256 longAmount,\\n    uint256 shortAmount,\\n    address recipient,\\n    bytes calldata data\\n  ) external;\\n\\n  function setFinalLongPayout(uint256 finalLongPayout) external;\\n\\n  function setFinalLongPayoutAfterExpiry() external;\\n\\n  function getLongToken() external view returns (ILongShortToken);\\n\\n  function getShortToken() external view returns (ILongShortToken);\\n\\n  function getAddressBeacon() external view returns (IAddressBeacon);\\n\\n  function getUintBeacon() external view returns (IUintBeacon);\\n\\n  function getCollateral() external view returns (ICollateral);\\n\\n  function getFloorLongPayout() external view returns (uint256);\\n\\n  function getCeilingLongPayout() external view returns (uint256);\\n\\n  function getExpiryLongPayout() external view returns (uint256);\\n\\n  function getFinalLongPayout() external view returns (uint256);\\n\\n  function getFloorValuation() external view returns (uint256);\\n\\n  function getCeilingValuation() external view returns (uint256);\\n\\n  function getExpiryTime() external view returns (uint256);\\n\\n  function getFeePercent(bytes32 feeKey) external view returns (uint256);\\n\\n  function PERCENT_UNIT() external view returns (uint256);\\n\\n  function FEE_LIMIT() external view returns (uint256);\\n\\n  function SET_FINAL_LONG_PAYOUT_ROLE() external view returns (bytes32);\\n\\n  function MINT_HOOK_KEY() external view returns (bytes32);\\n\\n  function REDEEM_HOOK_KEY() external view returns (bytes32);\\n\\n  function MINT_FEE_PERCENT_KEY() external view returns (bytes32);\\n\\n  function REDEEM_FEE_PERCENT_KEY() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x96481c8ccb9eb8a9bbd3f2289597b9f5201c5b85d543d96cf01b543115cd5ab8\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPrePOMarketFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.7;\\n\\nimport {IPrePOMarket} from \\\"../PrePOMarket.sol\\\";\\nimport {IAddressBeacon} from \\\"prepo-shared-contracts/contracts/interfaces/IAddressBeacon.sol\\\";\\nimport {IUintBeacon} from \\\"prepo-shared-contracts/contracts/interfaces/IUintBeacon.sol\\\";\\n\\ninterface IPrePOMarketFactory {\\n  event AddressBeaconChange(address beacon);\\n  event MarketCreation(\\n    address market,\\n    address deployer,\\n    address longToken,\\n    address shortToken,\\n    address addressBeacon,\\n    address uintBeacon,\\n    IPrePOMarket.MarketParameters parameters\\n  );\\n  event UintBeaconChange(address beacon);\\n\\n  error AddressBeaconNotSet();\\n  error LongTokenAddressTooHigh();\\n  error ShortTokenAddressTooHigh();\\n  error UintBeaconNotSet();\\n\\n  function createMarket(\\n    string calldata tokenNameSuffix,\\n    string calldata tokenSymbolSuffix,\\n    bytes32 longTokenSalt,\\n    bytes32 shortTokenSalt,\\n    IPrePOMarket.MarketParameters calldata parameters\\n  ) external;\\n\\n  function setAddressBeacon(IAddressBeacon addressBeacon) external;\\n\\n  function setUintBeacon(IUintBeacon uintBeacon) external;\\n\\n  function getAddressBeacon() external view returns (IAddressBeacon);\\n\\n  function getUintBeacon() external view returns (IUintBeacon);\\n}\\n\",\"keccak256\":\"0x4c9c5613d3cedc0c35b7ee1e5007ccf2f2b17f5d46029b19dcc71648c86631af\",\"license\":\"UNLICENSED\"},\"prepo-shared-contracts/contracts/SafeAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport {ISafeAccessControlEnumerable} from \\\"./interfaces/ISafeAccessControlEnumerable.sol\\\";\\nimport {AccessControlEnumerable} from \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\n\\ncontract SafeAccessControlEnumerable is\\n  ISafeAccessControlEnumerable,\\n  AccessControlEnumerable\\n{\\n  mapping(bytes32 => bytes32) private _roleToRoleAdminNominee;\\n  mapping(bytes32 => mapping(address => bool))\\n    private _roleToAccountToNominated;\\n\\n  constructor() {\\n    _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n  }\\n\\n  function setRoleAdminNominee(bytes32 role, bytes32 roleAdminNominee)\\n    public\\n    virtual\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _setRoleAdminNominee(role, roleAdminNominee);\\n  }\\n\\n  function acceptRoleAdmin(bytes32 role)\\n    public\\n    virtual\\n    override\\n    onlyRole(_roleToRoleAdminNominee[role])\\n  {\\n    _setRoleAdmin(role, _roleToRoleAdminNominee[role]);\\n    _setRoleAdminNominee(role, 0x00);\\n  }\\n\\n  function grantRole(bytes32 role, address account)\\n    public\\n    virtual\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _setRoleNominee(role, account, true);\\n  }\\n\\n  function acceptRole(bytes32 role) public virtual override {\\n    require(\\n      _roleToAccountToNominated[role][_msgSender()],\\n      \\\"msg.sender != role nominee\\\"\\n    );\\n    _setRoleNominee(role, _msgSender(), false);\\n    _grantRole(role, _msgSender());\\n  }\\n\\n  function revokeNomination(bytes32 role, address account)\\n    public\\n    virtual\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _setRoleNominee(role, account, false);\\n  }\\n\\n  function getRoleAdminNominee(bytes32 role)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bytes32)\\n  {\\n    return _roleToRoleAdminNominee[role];\\n  }\\n\\n  function isNominated(bytes32 role, address account)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return _roleToAccountToNominated[role][account];\\n  }\\n\\n  function _setRoleAdminNominee(bytes32 role, bytes32 newRoleAdminNominee)\\n    internal\\n    virtual\\n  {\\n    emit RoleAdminNomineeUpdate(\\n      _roleToRoleAdminNominee[role],\\n      newRoleAdminNominee\\n    );\\n    _roleToRoleAdminNominee[role] = newRoleAdminNominee;\\n  }\\n\\n  function _setRoleNominee(\\n    bytes32 role,\\n    address account,\\n    bool nominationStatus\\n  ) internal virtual {\\n    _roleToAccountToNominated[role][account] = nominationStatus;\\n    emit RoleNomineeUpdate(role, account, nominationStatus);\\n  }\\n}\\n\",\"keccak256\":\"0x45d2dc8abce8e958186d5fd3083bc5d71a4afd361cac04522a2e9d1437939482\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/SafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ISafeOwnable} from \\\"./interfaces/ISafeOwnable.sol\\\";\\n\\ncontract SafeOwnable is ISafeOwnable, Ownable {\\n  address private _nominee;\\n\\n  modifier onlyNominee() {\\n    require(_msgSender() == _nominee, \\\"msg.sender != nominee\\\");\\n    _;\\n  }\\n\\n  function transferOwnership(address nominee)\\n    public\\n    virtual\\n    override(ISafeOwnable, Ownable)\\n    onlyOwner\\n  {\\n    _setNominee(nominee);\\n  }\\n\\n  function acceptOwnership() public virtual override onlyNominee {\\n    _transferOwnership(_nominee);\\n    _setNominee(address(0));\\n  }\\n\\n  function renounceOwnership()\\n    public\\n    virtual\\n    override(ISafeOwnable, Ownable)\\n    onlyOwner\\n  {\\n    super.renounceOwnership();\\n    _setNominee(address(0));\\n  }\\n\\n  function getNominee() public view virtual override returns (address) {\\n    return _nominee;\\n  }\\n\\n  function _setNominee(address nominee) internal virtual {\\n    address _oldNominee = _nominee;\\n    _nominee = nominee;\\n    emit NomineeUpdate(_oldNominee, nominee);\\n  }\\n}\\n\",\"keccak256\":\"0x14ff6ff98a27878ff8bcdda000dfbb07bb7e743cb08ceee6251455b2531c27eb\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/IAddressBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\ninterface IAddressBeacon {\\n  event AddressChange(bytes32 key, address addr);\\n\\n  function set(bytes32 key, address addr) external;\\n\\n  function get(bytes32 key) external view returns (address);\\n}\\n\",\"keccak256\":\"0x6e0adbfc873cd477b776ecdf05fe49075b8443369ad0cfbf1f01d7666c131bc0\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/ISafeAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport {IAccessControlEnumerable} from \\\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\\\";\\n\\n/**\\n * @notice An extension of OpenZeppelin's `AccessControlEnumerable.sol`\\n * contract that requires an address/role to initially be nominated, and then\\n * accepted, before the role or admin role is granted.\\n */\\ninterface ISafeAccessControlEnumerable is IAccessControlEnumerable {\\n  /**\\n   * @dev Emitted via `setRoleAdminNominee()` and `acceptRoleAdmin()`.\\n   * @param role The role an admin was nominated for\\n   * @param newRoleAdminNominee The role nominated as the new admin\\n   */\\n  event RoleAdminNomineeUpdate(bytes32 role, bytes32 newRoleAdminNominee);\\n  /**\\n   * @dev Emitted via `grantRole()`, `acceptRole()`, and `revokeNomination()`.\\n   * @param role The role that an address's nomination status was changed for\\n   * @param account The nominee whose nomination status was changed\\n   * @param nominated Whether the address was nominated\\n   */\\n  event RoleNomineeUpdate(bytes32 role, address account, bool nominated);\\n\\n  /**\\n   * @notice Nominates a role to be a role admin.\\n   * @dev Only callable by a member of the role's current role admin.\\n   * @param role The role for which role admin is to be nominated\\n   * @param adminRoleNominee The role admin to be nominated\\n   */\\n  function setRoleAdminNominee(bytes32 role, bytes32 adminRoleNominee)\\n    external;\\n\\n  /**\\n   * @notice Accepts a role admin nomination.\\n   * @dev Only callable by a member of the role admin nominee.\\n   * @param role The role a role admin nomination is to be accepted for\\n   */\\n  function acceptRoleAdmin(bytes32 role) external;\\n\\n  /**\\n   * @notice Accepts a role nomination.\\n   * @dev Only callable by the role nominee.\\n   * @param role The role of the nomination to be accepted\\n   */\\n  function acceptRole(bytes32 role) external;\\n\\n  /**\\n   * @notice Revokes a role nomination.\\n   * @dev Only callable by a member of the role's current role admin.\\n   * @param role The role of the nomination to be revoked\\n   * @param account Address for which nomination is to be revoked\\n   */\\n  function revokeNomination(bytes32 role, address account) external;\\n\\n  /**\\n   * @param role The role to retrieve the role admin nominee for\\n   * @return The current role admin nominee of `role`\\n   */\\n  function getRoleAdminNominee(bytes32 role) external view returns (bytes32);\\n\\n  /**\\n   * @param role The role to retrieve nomination status for\\n   * @param account The address to retrieve nomination status for\\n   * @return Whether `account` is nominated for `role`\\n   */\\n  function isNominated(bytes32 role, address account)\\n    external\\n    view\\n    returns (bool);\\n}\\n\",\"keccak256\":\"0x37161c19873610d857838d2f52b02fc96a6f1619a581817c5a61f9b9931af6c7\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/ISafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\n/**\\n * @notice An extension of OpenZeppelin's `Ownable.sol` contract that requires\\n * an address to be nominated, and then accept that nomination, before\\n * ownership is transferred.\\n */\\ninterface ISafeOwnable {\\n  /**\\n   * @dev Emitted via `transferOwnership()`.\\n   * @param previousNominee The previous nominee\\n   * @param newNominee The new nominee\\n   */\\n  event NomineeUpdate(\\n    address indexed previousNominee,\\n    address indexed newNominee\\n  );\\n\\n  /**\\n   * @notice Nominates an address to be owner of the contract.\\n   * @dev Only callable by `owner()`.\\n   * @param nominee The address that will be nominated\\n   */\\n  function transferOwnership(address nominee) external;\\n\\n  /**\\n   * @notice Renounces ownership of contract and leaves the contract\\n   * without any owner.\\n   * @dev Only callable by `owner()`.\\n   * Sets nominee back to zero address.\\n   * It will not be possible to call `onlyOwner` functions anymore.\\n   */\\n  function renounceOwnership() external;\\n\\n  /**\\n   * @notice Accepts ownership nomination.\\n   * @dev Only callable by the current nominee. Sets nominee back to zero\\n   * address.\\n   */\\n  function acceptOwnership() external;\\n\\n  /// @return The current nominee\\n  function getNominee() external view returns (address);\\n}\\n\",\"keccak256\":\"0x50f8ea0098b1205f0e346f320aed8ea83d2de8fcbf08264b2e4fcefcc25c7780\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/IUintBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\ninterface IUintBeacon {\\n  event UintChange(bytes32 key, uint256 value);\\n\\n  function set(bytes32 key, uint256 value) external;\\n\\n  function get(bytes32 key) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa88f401de178b14e9156495384aec5307000659ad56e0885b7384dfb026f86b4\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600160005561001f33610024565b610076565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6151a0806100856000396000f3fe60806040523480156200001157600080fd5b5060043610620000ab5760003560e01c80638da5cb5b116200006e5780638da5cb5b146200011d578063b2fc0e69146200012f578063b6ca0b631462000146578063db0da0481462000158578063f2fde38b146200016a57600080fd5b806307c2962414620000b0578063715018a614620000d9578063797e304414620000e557806379ba509714620000fc57806388cc770b1462000106575b600080fd5b6003546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b620000e362000181565b005b620000e3620000f636600462000927565b620001a3565b620000e362000202565b620000e3620001173660046200094e565b6200027a565b6001546001600160a01b0316620000bd565b620000e36200014036600462000927565b620005b0565b6002546001600160a01b0316620000bd565b6004546001600160a01b0316620000bd565b620000e36200017b36600462000927565b62000609565b6200018b62000621565b620001956200067d565b620001a1600062000693565b565b620001ad62000621565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527fdd9ea2ef622d5a0feb18625614e110e4ed31b520d671629c93f98baff98d8fc9906020015b60405180910390a150565b6002546001600160a01b0316336001600160a01b031614620002635760405162461bcd60e51b81526020600482015260156024820152746d73672e73656e64657220213d206e6f6d696e656560581b60448201526064015b60405180910390fd5b60025462000195906001600160a01b0316620006e5565b6200028462000737565b6003546001600160a01b0316620002ae57604051630a8a366d60e11b815260040160405180910390fd5b6004546001600160a01b0316620002d857604051631ecc96a160e11b815260040160405180910390fd5b6000806200035489898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a90819084018382808284376000920191909152508a9250899150620007939050565b909250905062000368602084018462000927565b6001600160a01b0316826001600160a01b031611156200039b57604051639efde05d60e01b815260040160405180910390fd5b620003aa602084018462000927565b6001600160a01b0316816001600160a01b03161115620003dd5760405163b810d27560e01b815260040160405180910390fd5b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015260009060480160408051601f1981840301815290829052805160209091012060035460045491935060009284923392889288926001600160a01b039283169216908b906200045190620008bf565b620004629695949392919062000b9b565b8190604051809103906000f590508015801562000483573d6000803e3d6000fd5b5060405163f2fde38b60e01b81526001600160a01b0380831660048301529192509085169063f2fde38b90602401600060405180830381600087803b158015620004cc57600080fd5b505af1158015620004e1573d6000803e3d6000fd5b505060405163f2fde38b60e01b81526001600160a01b0384811660048301528616925063f2fde38b9150602401600060405180830381600087803b1580156200052957600080fd5b505af11580156200053e573d6000803e3d6000fd5b50506003546004546040517f70fe6a5efe69fd759182d14d6b80f301cdff42110d295b0661b362b7e8fada3d9450620005909350859233928a928a926001600160a01b039081169216908d9062000b47565b60405180910390a150505050620005a76001600055565b50505050505050565b620005ba62000621565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527fbcfbdc3d0c5b05010c8bb38262f41f22e721d8d6f117103f1f4c368e6cac0a6390602001620001f7565b6200061362000621565b6200061e8162000693565b50565b6001546001600160a01b03163314620001a15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200025a565b6200068762000621565b620001a16000620006e5565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fe7624d724357e317f51579affee5050a97c60b060e513e69aa8a1a35fb3315a790600090a35050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600260005414156200078c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016200025a565b6002600055565b600080600086604051602001620007ab919062000a79565b6040516020818303038152906040529050600087604051602001620007d1919062000ab1565b6040516020818303038152906040529050600087604051602001620007f7919062000aea565b60405160208183030381529060405290506000886040516020016200081d919062000b1f565b60405160208183030381529060405290508784836040516200083f90620008cd565b6200084c92919062000be6565b8190604051809103906000f59050801580156200086d573d6000803e3d6000fd5b5095508683826040516200088190620008cd565b6200088e92919062000be6565b8190604051809103906000f5905080158015620008af573d6000803e3d6000fd5b5094505050505094509492505050565b612dde8062000c6283390190565b61172b8062003a4083390190565b60008083601f840112620008ee57600080fd5b50813567ffffffffffffffff8111156200090757600080fd5b6020830191508360208285010111156200092057600080fd5b9250929050565b6000602082840312156200093a57600080fd5b8135620009478162000c4b565b9392505050565b60008060008060008060008789036101608112156200096c57600080fd5b883567ffffffffffffffff808211156200098557600080fd5b620009938c838d01620008db565b909a50985060208b0135915080821115620009ad57600080fd5b50620009bc8b828c01620008db565b909750955050604089013593506060890135925060e0607f1982011215620009e357600080fd5b5060808801905092959891949750929550565b6000815180845262000a1081602086016020860162000c18565b601f01601f19169290920160200192915050565b803562000a318162000c4b565b6001600160a01b031682526020818101359083015260408082013590830152606080820135908301526080808201359083015260a0818101359083015260c090810135910152565b634c4f4e4760e01b8152600160fd1b60048201526000825162000aa481600585016020870162000c18565b9190910160050192915050565b6414d213d49560da1b8152600160fd1b60058201526000825162000add81600685016020870162000c18565b9190910160060192915050565b601360fa1b8152605f60f81b60018201526000825162000b1281600285016020870162000c18565b9190910160020192915050565b605360f81b8152605f60f81b60018201526000825162000b1281600285016020870162000c18565b6001600160a01b0388811682528781166020830152868116604083015285811660608301528481166080830152831660a08201526101a0810162000b8f60c083018462000a24565b98975050505050505050565b6001600160a01b03878116825286811660208301528581166040830152848116606083015283166080820152610180810162000bdb60a083018462000a24565b979650505050505050565b60408152600062000bfb6040830185620009f6565b828103602084015262000c0f8185620009f6565b95945050505050565b60005b8381101562000c3557818101518382015260200162000c1b565b8381111562000c45576000848401525b50505050565b6001600160a01b03811681146200061e57600080fdfe6101e06040523480156200001257600080fd5b5060405162002dde38038062002dde83398101604081905262000035916200057c565b60016000908155620000489033620001f3565b8060200151816040015111620000715760405163bdf5494360e01b815260040160405180910390fd5b670de0b6b3a7640000816040015111156200009f5760405163fabfffff60e01b815260040160405180910390fd5b806020015181606001511015620000c957604051631118fbc760e21b815260040160405180910390fd5b806040015181606001511115620000f3576040516374b015ad60e11b815260040160405180910390fd5b8060c001514210620001185760405163079955a160e41b815260040160405180910390fd5b6200012560003362000203565b620001517f6277df547c9740e5c99a69c4bb32861284d2c5d224317168740012fdee5e79898762000246565b6200017d7f6277df547c9740e5c99a69c4bb32861284d2c5d224317168740012fdee5e79898062000284565b6001600160601b0319606095861b8116608090815294861b811660a090815293861b811660c090815292861b811660e0528151861b1661010052602081015161012052604081015161014052938401516101605260001960055591830151610180528201516101a05201516101c0525062000704565b620001ff828262000246565b5050565b6200021a8282620002d160201b6200123d1760201c565b600082815260026020908152604090912062000241918390620012a462000355821b17901c565b505050565b6200025d82826200037560201b620012b91760201c565b60008281526002602090815260409091206200024191839062001324620003fd821b17901c565b6000828152600160208190526040808320909101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff1615620001ff5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006200036c836001600160a01b03841662000414565b90505b92915050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16620001ff5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b60006200036c836001600160a01b03841662000518565b600081815260018301602052604081205480156200050d5760006200043b60018362000699565b8554909150600090620004519060019062000699565b9050818114620004bd576000866000018281548110620004755762000475620006d5565b90600052602060002001549050808760000184815481106200049b576200049b620006d5565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080620004d157620004d1620006bf565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506200036f565b60009150506200036f565b600081815260018301602052604081205462000561575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200036f565b5060006200036f565b80516200057781620006eb565b919050565b6000806000806000808688036101808112156200059857600080fd5b8751620005a581620006eb565b6020890151909750620005b881620006eb565b6040890151909650620005cb81620006eb565b6060890151909550620005de81620006eb565b6080890151909450620005f181620006eb565b925060e0609f19820112156200060657600080fd5b5060405160e081016001600160401b03811182821017156200063857634e487b7160e01b600052604160045260246000fd5b6040526200064960a089016200056a565b815260c0880151602082015260e088015160408201526101008801516060820152610120880151608082015261014088015160a082015261016088015160c0820152809150509295509295509295565b600082821015620006ba57634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03811681146200070157600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c610120516101405161016051610180516101a0516101c05161259c620008426000396000818161032b015261072f015260006105fa0152600061035b015260008181610277015261076f0152600081816104aa015281816106ed01528181610f6c01528181610fef01526119400152600081816106940152610fae01526000818161042501528181610b8601528181610dd101528181611604015281816116a9015281816117bb0152818161186a015281816119950152611a59015260008181610620015281816110c1015261117a0152600081816102a7015261146d0152600081816104d0015281816108c801528181610aec0152611be50152600081816102e10152818161081201528181610a650152611b63015261259c6000f3fe608060405234801561001057600080fd5b50600436106102485760003560e01c80637a71e6841161013b578063ca15c873116100b8578063db0da0481161007c578063db0da0481461061e578063e46bd1cc14610644578063e90e4e691461066b578063f12c7be614610692578063fa415632146106b857600080fd5b8063ca15c873146105ac578063cd0c1d96146105bf578063cebad90a146105d2578063d547741f146105e5578063dab12f86146105f857600080fd5b80639010d07c116100ff5780639010d07c1461056157806391d1485414610574578063a217fddf14610587578063b0b843741461058f578063bd30da0e1461059957600080fd5b80637a71e684146104ce5780637b56f2b9146104f457806380db43291461051b57806381a2cf791461053b5780638bb06b0b1461054e57600080fd5b806336568abe116101c95780635c1548fb1161018d5780635c1548fb146104235780635c449f7c146104495780636acfd6731461048257806373c025191461049557806378195e5d146104a857600080fd5b806336568abe146103a557806336fc1787146103b85780633e005d4a146103cb57806340163a63146103f257806358136165146103fc57600080fd5b806325cb5bc01161021057806325cb5bc0146103295780632c41f2971461034f5780632c6826f7146103595780632f2ff15d1461037f57806332bc34641461039257600080fd5b806301ffc9a71461024d57806307c0d26f1461027557806307c29624146102a557806313c7df66146102df578063248a9ca314610305575b600080fd5b61026061025b3660046121b6565b6106c0565b60405190151581526020015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b60405190815260200161026c565b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b03909116815260200161026c565b7f00000000000000000000000000000000000000000000000000000000000000006102c7565b61029761031336600461214b565b6000908152600160208190526040909120015490565b7f0000000000000000000000000000000000000000000000000000000000000000610297565b6103576106eb565b005b7f0000000000000000000000000000000000000000000000000000000000000000610297565b61035761038d366004612164565b6107c8565b6103576103a03660046122ce565b6107f5565b6103576103b3366004612164565b610c5f565b6103576103c636600461214b565b610ce2565b6102977f6277df547c9740e5c99a69c4bb32861284d2c5d224317168740012fdee5e798981565b610297620f424081565b6102977f146f48974fc095fc7e77b15586006eb4b8b4d0d4f840a96e8258529bcfb6c5eb81565b7f00000000000000000000000000000000000000000000000000000000000000006102c7565b610260610457366004612164565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610357610490366004612164565b610d64565b6102976104a3366004612272565b610d8c565b7f0000000000000000000000000000000000000000000000000000000000000000610297565b7f00000000000000000000000000000000000000000000000000000000000000006102c7565b6102977f02bc46a2df2f34e2dd488f99d3b46825185f3c15356a2d43fbada8c4702190eb81565b61029761052936600461214b565b60009081526003602052604090205490565b6102976105493660046121e0565b610db6565b61035761055c36600461214b565b610eb9565b6102c761056f366004612194565b610ef6565b610260610582366004612164565b610f15565b610297600081565b610297620186a081565b6103576105a736600461214b565b610f40565b6102976105ba36600461214b565b61106a565b6103576105cd366004612194565b611081565b6102976105e036600461214b565b6110a7565b6103576105f3366004612164565b611217565b7f0000000000000000000000000000000000000000000000000000000000000000610297565b7f00000000000000000000000000000000000000000000000000000000000000006102c7565b6102977f5e86c8fc8b92fef7e25b2dfd331ced3bbe16e1ea4896dd49d32b34f8d6bd608f81565b6102977fe3b8046d7e6959c2d85a97e02cad9b35438693e986956269362f56ca0819169881565b7f0000000000000000000000000000000000000000000000000000000000000000610297565b600554610297565b60006001600160e01b03198216635a05180f60e01b14806106e557506106e582611339565b92915050565b7f00000000000000000000000000000000000000000000000000000000000000006005541161072d5760405163262b753160e21b815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000421161076d576040516349a2522760e01b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000060058190556040519081527ff5a9597b2040ee4886f0ddfdab78b03fb09f3bbf04edde66d81f3b9f07e2f5c09060200160405180910390a1565b600082815260016020819052604090912001546107e48161136e565b6107f083836001611378565b505050565b6107fd6113f0565b6040516370a0823160e01b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561085c57600080fd5b505afa158015610870573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108949190612259565b8511156108b35760405162a7b40560e41b815260040160405180910390fd5b6040516370a0823160e01b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561091257600080fd5b505afa158015610926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094a9190612259565b84111561096a5760405163355650f560e01b815260040160405180910390fd5b6000600019600554146109ce576000600554670de0b6b3a764000061098f919061249b565b9050670de0b6b3a76400006109a4878361247c565b886005546109b2919061247c565b6109bc9190612442565b6109c6919061245a565b9150506109f1565b8486146109ee576040516379b8989160e11b815260040160405180910390fd5b50845b6000610a417f02bc46a2df2f34e2dd488f99d3b46825185f3c15356a2d43fbada8c4702190eb7f5e86c8fc8b92fef7e25b2dfd331ced3bbe16e1ea4896dd49d32b34f8d6bd608f8488888861144a565b90508615610aca5760405163079cc67960e41b8152336004820152602481018890527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906379cc679090604401600060405180830381600087803b158015610ab157600080fd5b505af1158015610ac5573d6000803e3d6000fd5b505050505b8515610b515760405163079cc67960e41b8152336004820152602481018790527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906379cc679090604401600060405180830381600087803b158015610b3857600080fd5b505af1158015610b4c573d6000803e3d6000fd5b505050505b6000610b5d828461249b565b60405163a9059cbb60e01b81526001600160a01b038881166004830152602482018390529192507f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb90604401602060405180830381600087803b158015610bcc57600080fd5b505af1158015610be0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c049190612129565b5060408051828152602081018490526001600160a01b0388169133917fa28d80c9910787c0c058ed9b50c577f1389264bf61563fa45529e0771976f562910160405180910390a3505050610c586001600055565b5050505050565b6001600160a01b0381163314610cd45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610cde82826118f8565b5050565b600081815260046020908152604080832033845290915290205460ff16610d4b5760405162461bcd60e51b815260206004820152601a60248201527f6d73672e73656e64657220213d20726f6c65206e6f6d696e65650000000000006044820152606401610ccb565b610d5781336000611378565b610d61813361191a565b50565b60008281526001602081905260409091200154610d808161136e565b6107f083836000611378565b6000610d966113f0565b610da28585858561193c565b9050610dae6001600055565b949350505050565b6000610dc06113f0565b853515610e98576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663d505accf33306000198a35610e0d60408d0160208e0161231b565b604080516001600160e01b031960e089901b1681526001600160a01b0396871660048201529590941660248601526044850192909252606484015260ff16608483015289013560a4820152606089013560c482015260e401600060405180830381600087803b158015610e7f57600080fd5b505af1158015610e93573d6000803e3d6000fd5b505050505b610ea48585858561193c565b9050610eb06001600055565b95945050505050565b600081815260036020526040902054610ed18161136e565b600082815260036020526040902054610eeb908390611c92565b610cde826000611cdf565b6000828152600260205260408120610f0e9083611d3a565b9392505050565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b7f6277df547c9740e5c99a69c4bb32861284d2c5d224317168740012fdee5e7989610f6a8161136e565b7f000000000000000000000000000000000000000000000000000000000000000060055411610fac5760405163262b753160e21b815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000821015610fed57604051631118fbc760e21b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000082111561102e576040516374b015ad60e11b815260040160405180910390fd5b60058290556040518281527ff5a9597b2040ee4886f0ddfdab78b03fb09f3bbf04edde66d81f3b9f07e2f5c09060200160405180910390a15050565b60008181526002602052604081206106e590611d46565b6000828152600160208190526040909120015461109d8161136e565b6107f08383611cdf565b60405163023aa9ab60e61b815230600482015260009081907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638eaa6ac09060240160206040518083038186803b15801561110b57600080fd5b505afa15801561111f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111439190612259565b9050801561116457600019811461115a578061115d565b60005b91506111ff565b60405163023aa9ab60e61b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638eaa6ac09060240160206040518083038186803b1580156111c457600080fd5b505afa1580156111d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fc9190612259565b91505b620186a082111561121157620186a091505b50919050565b600082815260016020819052604090912001546112338161136e565b6107f083836118f8565b6112478282610f15565b15610cde5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610f0e836001600160a01b038416611d50565b6112c38282610f15565b610cde5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6000610f0e836001600160a01b038416611e43565b60006001600160e01b03198216637965db0b60e01b14806106e557506301ffc9a760e01b6001600160e01b03198316146106e5565b610d618133611e92565b60008381526004602090815260408083206001600160a01b03861680855290835292819020805460ff19168515159081179091558151878152928301939093528101919091527fd4eaea07a6439b4db5273291dd4d77f204d9eaf0d67149318c911f449f3df5d69060600160405180910390a1505050565b600260005414156114435760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ccb565b6002600055565b60405163023aa9ab60e61b81526004810187905260009081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638eaa6ac09060240160206040518083038186803b1580156114af57600080fd5b505afa1580156114c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e7919061210c565b90506001600160a01b0381166115015760009150506118ee565b600061150c886110a7565b9050806115a4578661153157604051632006714760e01b815260040160405180910390fd5b604051631a04f3b560e21b81526001600160a01b03831690636813ced4906115679033908a908c9081908c908c906004016123b3565b600060405180830381600087803b15801561158157600080fd5b505af1158015611595573d6000803e3d6000fd5b505050506000925050506118ee565b6000620f42406115b4838a61247c565b6115be919061245a565b9050806115de576040516375e4ec8360e01b815260040160405180910390fd5b60405163095ea7b360e01b81526001600160a01b038481166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390604401602060405180830381600087803b15801561164857600080fd5b505af115801561165c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116809190612129565b50604051636eb1769f60e11b81523060048201526001600160a01b0384811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063dd62ed3e9060440160206040518083038186803b1580156116ed57600080fd5b505afa158015611701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117259190612259565b90506001600160a01b038416636813ced4338a8c611743878261249b565b8c8c6040518763ffffffff1660e01b8152600401611766969594939291906123b3565b600060405180830381600087803b15801561178057600080fd5b505af1158015611794573d6000803e3d6000fd5b5050604051636eb1769f60e11b81523060048201526001600160a01b0387811660248301527f000000000000000000000000000000000000000000000000000000000000000016925063dd62ed3e915060440160206040518083038186803b1580156117ff57600080fd5b505afa158015611813573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118379190612259565b611841908261249b565b60405163095ea7b360e01b81526001600160a01b038681166004830152600060248301529196507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b390604401602060405180830381600087803b1580156118b057600080fd5b505af11580156118c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e89190612129565b50505050505b9695505050505050565b611902828261123d565b60008281526002602052604090206107f090826112a4565b61192482826112b9565b60008281526002602052604090206107f09082611324565b60007f0000000000000000000000000000000000000000000000000000000000000000600554116119805760405163262b753160e21b815260040160405180910390fd5b6040516370a0823160e01b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156119df57600080fd5b505afa1580156119f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a179190612259565b851115611a3757604051633a23d82560e01b815260040160405180910390fd5b6040516323b872dd60e01b8152336004820152306024820152604481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90606401602060405180830381600087803b158015611aa557600080fd5b505af1158015611ab9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611add9190612129565b506000611b2e7fe3b8046d7e6959c2d85a97e02cad9b35438693e986956269362f56ca081916987f146f48974fc095fc7e77b15586006eb4b8b4d0d4f840a96e8258529bcfb6c5eb8888888861144a565b9050611b3a818761249b565b6040516340c10f1960e01b81526001600160a01b038781166004830152602482018390529193507f0000000000000000000000000000000000000000000000000000000000000000909116906340c10f1990604401600060405180830381600087803b158015611ba957600080fd5b505af1158015611bbd573d6000803e3d6000fd5b50506040516340c10f1960e01b81526001600160a01b038881166004830152602482018690527f00000000000000000000000000000000000000000000000000000000000000001692506340c10f199150604401600060405180830381600087803b158015611c2b57600080fd5b505af1158015611c3f573d6000803e3d6000fd5b505060408051858152602081018590526001600160a01b03891693503392507f2f00e3cdd69a77be7ed215ec7b2a36784dd158f921fca79ac29deffa353fe6ee910160405180910390a350949350505050565b6000828152600160208190526040808320909101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000828152600360209081526040918290205482519081529081018390527fb7f84e320be67bd09b884f0142b70ae1256025837c61650411a58567f9137c5d910160405180910390a160009182526003602052604090912055565b6000610f0e8383611eeb565b60006106e5825490565b60008181526001830160205260408120548015611e39576000611d7460018361249b565b8554909150600090611d889060019061249b565b9050818114611ded576000866000018281548110611da857611da8612525565b9060005260206000200154905080876000018481548110611dcb57611dcb612525565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611dfe57611dfe61250f565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506106e5565b60009150506106e5565b6000818152600183016020526040812054611e8a575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106e5565b5060006106e5565b611e9c8282610f15565b610cde57611ea981611f15565b611eb4836020611f27565b604051602001611ec592919061233e565b60408051601f198184030181529082905262461bcd60e51b8252610ccb9160040161240f565b6000826000018281548110611f0257611f02612525565b9060005260206000200154905092915050565b60606106e56001600160a01b03831660145b60606000611f3683600261247c565b611f41906002612442565b67ffffffffffffffff811115611f5957611f5961253b565b6040519080825280601f01601f191660200182016040528015611f83576020820181803683370190505b509050600360fc1b81600081518110611f9e57611f9e612525565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611fcd57611fcd612525565b60200101906001600160f81b031916908160001a9053506000611ff184600261247c565b611ffc906001612442565b90505b6001811115612074576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061203057612030612525565b1a60f81b82828151811061204657612046612525565b60200101906001600160f81b031916908160001a90535060049490941c9361206d816124e2565b9050611fff565b508315610f0e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610ccb565b60008083601f8401126120d557600080fd5b50813567ffffffffffffffff8111156120ed57600080fd5b60208301915083602082850101111561210557600080fd5b9250929050565b60006020828403121561211e57600080fd5b8151610f0e81612551565b60006020828403121561213b57600080fd5b81518015158114610f0e57600080fd5b60006020828403121561215d57600080fd5b5035919050565b6000806040838503121561217757600080fd5b82359150602083013561218981612551565b809150509250929050565b600080604083850312156121a757600080fd5b50508035926020909101359150565b6000602082840312156121c857600080fd5b81356001600160e01b031981168114610f0e57600080fd5b600080600080600085870360e08112156121f957600080fd5b608081121561220757600080fd5b508594506080860135935060a086013561222081612551565b925060c086013567ffffffffffffffff81111561223c57600080fd5b612248888289016120c3565b969995985093965092949392505050565b60006020828403121561226b57600080fd5b5051919050565b6000806000806060858703121561228857600080fd5b84359350602085013561229a81612551565b9250604085013567ffffffffffffffff8111156122b657600080fd5b6122c2878288016120c3565b95989497509550505050565b6000806000806000608086880312156122e657600080fd5b853594506020860135935060408601356122ff81612551565b9250606086013567ffffffffffffffff81111561223c57600080fd5b60006020828403121561232d57600080fd5b813560ff81168114610f0e57600080fd5b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516123768160178501602088016124b2565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516123a78160288401602088016124b2565b01602801949350505050565b6001600160a01b03878116825286166020820152604081018590526060810184905260a06080820181905281018290526000828460c0840137600060c0848401015260c0601f19601f8501168301019050979650505050505050565b602081526000825180602084015261242e8160408501602087016124b2565b601f01601f19169190910160400192915050565b60008219821115612455576124556124f9565b500190565b60008261247757634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615612496576124966124f9565b500290565b6000828210156124ad576124ad6124f9565b500390565b60005b838110156124cd5781810151838201526020016124b5565b838111156124dc576000848401525b50505050565b6000816124f1576124f16124f9565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610d6157600080fdfea26469706673582212208d1fd10dab64bef7b86df4743eaebe7801d72f2fcee9840922cea5839e4be7e664736f6c634300080700336101406040523480156200001257600080fd5b506040516200172b3803806200172b8339810160408190526200003591620002eb565b8180604051806040016040528060018152602001603160f81b815250848481600390805190602001906200006b9291906200018e565b508051620000819060049060208401906200018e565b5050825160208085019190912083518483012060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81880181905281830187905260608201869052608082019490945230818401528151808203909301835260c0019052805194019390932091935091906080523060601b60c05261012052506200013093506200012a925050620001389050565b6200013c565b5050620003a8565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200019c9062000355565b90600052602060002090601f016020900481019282620001c057600085556200020b565b82601f10620001db57805160ff19168380011785556200020b565b828001600101855582156200020b579182015b828111156200020b578251825591602001919060010190620001ee565b50620002199291506200021d565b5090565b5b808211156200021957600081556001016200021e565b600082601f8301126200024657600080fd5b81516001600160401b038082111562000263576200026362000392565b604051601f8301601f19908116603f011681019082821181831017156200028e576200028e62000392565b81604052838152602092508683858801011115620002ab57600080fd5b600091505b83821015620002cf5785820183015181830184015290820190620002b0565b83821115620002e15760008385830101525b9695505050505050565b60008060408385031215620002ff57600080fd5b82516001600160401b03808211156200031757600080fd5b620003258683870162000234565b935060208501519150808211156200033c57600080fd5b506200034b8582860162000234565b9150509250929050565b600181811c908216806200036a57607f821691505b602082108114156200038c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160a05160c05160601c60e0516101005161012051611330620003fb6000396000610ad501526000610b2401526000610aff01526000610a5801526000610a8201526000610aac01526113306000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063715018a6116100ad578063a457c2d711610071578063a457c2d714610268578063a9059cbb1461027b578063d505accf1461028e578063dd62ed3e146102a1578063f2fde38b146102b457600080fd5b8063715018a61461021257806379cc67901461021a5780637ecebe001461022d5780638da5cb5b1461024057806395d89b411461026057600080fd5b80633644e515116100f45780633644e515146101a657806339509351146101ae57806340c10f19146101c157806342966c68146101d657806370a08231146101e957600080fd5b806306fdde0314610131578063095ea7b31461014f57806318160ddd1461017257806323b872dd14610184578063313ce56714610197575b600080fd5b6101396102c7565b6040516101469190611234565b60405180910390f35b61016261015d3660046111f1565b610359565b6040519015158152602001610146565b6002545b604051908152602001610146565b610162610192366004611142565b610371565b60405160128152602001610146565b610176610395565b6101626101bc3660046111f1565b6103a4565b6101d46101cf3660046111f1565b6103c6565b005b6101d46101e436600461121b565b6103dc565b6101766101f73660046110ed565b6001600160a01b031660009081526020819052604090205490565b6101d46103e9565b6101d46102283660046111f1565b6103fd565b61017661023b3660046110ed565b610432565b610248610452565b6040516001600160a01b039091168152602001610146565b610139610466565b6101626102763660046111f1565b610475565b6101626102893660046111f1565b6104f5565b6101d461029c36600461117e565b610503565b6101766102af36600461110f565b610667565b6101d46102c23660046110ed565b610692565b6060600380546102d6906112af565b80601f0160208091040260200160405190810160405280929190818152602001828054610302906112af565b801561034f5780601f106103245761010080835404028352916020019161034f565b820191906000526020600020905b81548152906001019060200180831161033257829003601f168201915b5050505050905090565b600033610367818585610708565b5060019392505050565b60003361037f85828561082d565b61038a8585856108a7565b506001949350505050565b600061039f610a4b565b905090565b6000336103678185856103b78383610667565b6103c19190611289565b610708565b6103ce610b72565b6103d88282610bd1565b5050565b6103e63382610c90565b50565b6103f1610b72565b6103fb6000610dba565b565b610405610452565b6001600160a01b0316336001600160a01b03161415610428576103d88282610c90565b6103d88282610e0c565b6001600160a01b0381166000908152600560205260408120545b92915050565b600061039f6007546001600160a01b031690565b6060600480546102d6906112af565b600033816104838286610667565b9050838110156104e85760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b61038a8286868403610708565b6000336103678185856108a7565b834211156105535760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e6500000060448201526064016104df565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886105828c610e21565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905060006105dd82610e49565b905060006105ed82878787610e97565b9050896001600160a01b0316816001600160a01b0316146106505760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e6174757265000060448201526064016104df565b61065b8a8a8a610708565b50505050505050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61069a610b72565b6001600160a01b0381166106ff5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104df565b6103e681610dba565b6001600160a01b03831661076a5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104df565b6001600160a01b0382166107cb5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104df565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006108398484610667565b905060001981146108a157818110156108945760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016104df565b6108a18484848403610708565b50505050565b6001600160a01b03831661090b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104df565b6001600160a01b03821661096d5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104df565b6001600160a01b038316600090815260208190526040902054818110156109e55760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016104df565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36108a1565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610aa457507f000000000000000000000000000000000000000000000000000000000000000046145b15610ace57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b33610b7b610452565b6001600160a01b0316146103fb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104df565b6001600160a01b038216610c275760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016104df565b8060026000828254610c399190611289565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b038216610cf05760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016104df565b6001600160a01b03821660009081526020819052604090205481811015610d645760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016104df565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101610820565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610e1782338361082d565b6103d88282610c90565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b600061044c610e56610a4b565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000610ea887878787610ebf565b91509150610eb581610f83565b5095945050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610ef65750600090506003610f7a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610f4a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610f7357600060019250925050610f7a565b9150600090505b94509492505050565b6000816004811115610f9757610f976112e4565b1415610fa05750565b6001816004811115610fb457610fb46112e4565b14156110025760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016104df565b6002816004811115611016576110166112e4565b14156110645760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104df565b6003816004811115611078576110786112e4565b14156103e65760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016104df565b80356001600160a01b03811681146110e857600080fd5b919050565b6000602082840312156110ff57600080fd5b611108826110d1565b9392505050565b6000806040838503121561112257600080fd5b61112b836110d1565b9150611139602084016110d1565b90509250929050565b60008060006060848603121561115757600080fd5b611160846110d1565b925061116e602085016110d1565b9150604084013590509250925092565b600080600080600080600060e0888a03121561119957600080fd5b6111a2886110d1565b96506111b0602089016110d1565b95506040880135945060608801359350608088013560ff811681146111d457600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561120457600080fd5b61120d836110d1565b946020939093013593505050565b60006020828403121561122d57600080fd5b5035919050565b600060208083528351808285015260005b8181101561126157858101830151858201604001528201611245565b81811115611273576000604083870101525b50601f01601f1916929092016040019392505050565b600082198211156112aa57634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806112c357607f821691505b60208210811415610e4357634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052602160045260246000fdfea2646970667358221220966b30691582f0f1e994d4be86388219b7102c213078aafb9a85c84bcede701964736f6c63430008070033a264697066735822122065ac8c4ba9f5587cb0f7f488e1d733748a79bc9e57b5342f3b52969f81f33e3c64736f6c63430008070033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000ab5760003560e01c80638da5cb5b116200006e5780638da5cb5b146200011d578063b2fc0e69146200012f578063b6ca0b631462000146578063db0da0481462000158578063f2fde38b146200016a57600080fd5b806307c2962414620000b0578063715018a614620000d9578063797e304414620000e557806379ba509714620000fc57806388cc770b1462000106575b600080fd5b6003546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b620000e362000181565b005b620000e3620000f636600462000927565b620001a3565b620000e362000202565b620000e3620001173660046200094e565b6200027a565b6001546001600160a01b0316620000bd565b620000e36200014036600462000927565b620005b0565b6002546001600160a01b0316620000bd565b6004546001600160a01b0316620000bd565b620000e36200017b36600462000927565b62000609565b6200018b62000621565b620001956200067d565b620001a1600062000693565b565b620001ad62000621565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527fdd9ea2ef622d5a0feb18625614e110e4ed31b520d671629c93f98baff98d8fc9906020015b60405180910390a150565b6002546001600160a01b0316336001600160a01b031614620002635760405162461bcd60e51b81526020600482015260156024820152746d73672e73656e64657220213d206e6f6d696e656560581b60448201526064015b60405180910390fd5b60025462000195906001600160a01b0316620006e5565b6200028462000737565b6003546001600160a01b0316620002ae57604051630a8a366d60e11b815260040160405180910390fd5b6004546001600160a01b0316620002d857604051631ecc96a160e11b815260040160405180910390fd5b6000806200035489898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a90819084018382808284376000920191909152508a9250899150620007939050565b909250905062000368602084018462000927565b6001600160a01b0316826001600160a01b031611156200039b57604051639efde05d60e01b815260040160405180910390fd5b620003aa602084018462000927565b6001600160a01b0316816001600160a01b03161115620003dd5760405163b810d27560e01b815260040160405180910390fd5b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015260009060480160408051601f1981840301815290829052805160209091012060035460045491935060009284923392889288926001600160a01b039283169216908b906200045190620008bf565b620004629695949392919062000b9b565b8190604051809103906000f590508015801562000483573d6000803e3d6000fd5b5060405163f2fde38b60e01b81526001600160a01b0380831660048301529192509085169063f2fde38b90602401600060405180830381600087803b158015620004cc57600080fd5b505af1158015620004e1573d6000803e3d6000fd5b505060405163f2fde38b60e01b81526001600160a01b0384811660048301528616925063f2fde38b9150602401600060405180830381600087803b1580156200052957600080fd5b505af11580156200053e573d6000803e3d6000fd5b50506003546004546040517f70fe6a5efe69fd759182d14d6b80f301cdff42110d295b0661b362b7e8fada3d9450620005909350859233928a928a926001600160a01b039081169216908d9062000b47565b60405180910390a150505050620005a76001600055565b50505050505050565b620005ba62000621565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527fbcfbdc3d0c5b05010c8bb38262f41f22e721d8d6f117103f1f4c368e6cac0a6390602001620001f7565b6200061362000621565b6200061e8162000693565b50565b6001546001600160a01b03163314620001a15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200025a565b6200068762000621565b620001a16000620006e5565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fe7624d724357e317f51579affee5050a97c60b060e513e69aa8a1a35fb3315a790600090a35050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600260005414156200078c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016200025a565b6002600055565b600080600086604051602001620007ab919062000a79565b6040516020818303038152906040529050600087604051602001620007d1919062000ab1565b6040516020818303038152906040529050600087604051602001620007f7919062000aea565b60405160208183030381529060405290506000886040516020016200081d919062000b1f565b60405160208183030381529060405290508784836040516200083f90620008cd565b6200084c92919062000be6565b8190604051809103906000f59050801580156200086d573d6000803e3d6000fd5b5095508683826040516200088190620008cd565b6200088e92919062000be6565b8190604051809103906000f5905080158015620008af573d6000803e3d6000fd5b5094505050505094509492505050565b612dde8062000c6283390190565b61172b8062003a4083390190565b60008083601f840112620008ee57600080fd5b50813567ffffffffffffffff8111156200090757600080fd5b6020830191508360208285010111156200092057600080fd5b9250929050565b6000602082840312156200093a57600080fd5b8135620009478162000c4b565b9392505050565b60008060008060008060008789036101608112156200096c57600080fd5b883567ffffffffffffffff808211156200098557600080fd5b620009938c838d01620008db565b909a50985060208b0135915080821115620009ad57600080fd5b50620009bc8b828c01620008db565b909750955050604089013593506060890135925060e0607f1982011215620009e357600080fd5b5060808801905092959891949750929550565b6000815180845262000a1081602086016020860162000c18565b601f01601f19169290920160200192915050565b803562000a318162000c4b565b6001600160a01b031682526020818101359083015260408082013590830152606080820135908301526080808201359083015260a0818101359083015260c090810135910152565b634c4f4e4760e01b8152600160fd1b60048201526000825162000aa481600585016020870162000c18565b9190910160050192915050565b6414d213d49560da1b8152600160fd1b60058201526000825162000add81600685016020870162000c18565b9190910160060192915050565b601360fa1b8152605f60f81b60018201526000825162000b1281600285016020870162000c18565b9190910160020192915050565b605360f81b8152605f60f81b60018201526000825162000b1281600285016020870162000c18565b6001600160a01b0388811682528781166020830152868116604083015285811660608301528481166080830152831660a08201526101a0810162000b8f60c083018462000a24565b98975050505050505050565b6001600160a01b03878116825286811660208301528581166040830152848116606083015283166080820152610180810162000bdb60a083018462000a24565b979650505050505050565b60408152600062000bfb6040830185620009f6565b828103602084015262000c0f8185620009f6565b95945050505050565b60005b8381101562000c3557818101518382015260200162000c1b565b8381111562000c45576000848401525b50505050565b6001600160a01b03811681146200061e57600080fdfe6101e06040523480156200001257600080fd5b5060405162002dde38038062002dde83398101604081905262000035916200057c565b60016000908155620000489033620001f3565b8060200151816040015111620000715760405163bdf5494360e01b815260040160405180910390fd5b670de0b6b3a7640000816040015111156200009f5760405163fabfffff60e01b815260040160405180910390fd5b806020015181606001511015620000c957604051631118fbc760e21b815260040160405180910390fd5b806040015181606001511115620000f3576040516374b015ad60e11b815260040160405180910390fd5b8060c001514210620001185760405163079955a160e41b815260040160405180910390fd5b6200012560003362000203565b620001517f6277df547c9740e5c99a69c4bb32861284d2c5d224317168740012fdee5e79898762000246565b6200017d7f6277df547c9740e5c99a69c4bb32861284d2c5d224317168740012fdee5e79898062000284565b6001600160601b0319606095861b8116608090815294861b811660a090815293861b811660c090815292861b811660e0528151861b1661010052602081015161012052604081015161014052938401516101605260001960055591830151610180528201516101a05201516101c0525062000704565b620001ff828262000246565b5050565b6200021a8282620002d160201b6200123d1760201c565b600082815260026020908152604090912062000241918390620012a462000355821b17901c565b505050565b6200025d82826200037560201b620012b91760201c565b60008281526002602090815260409091206200024191839062001324620003fd821b17901c565b6000828152600160208190526040808320909101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff1615620001ff5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006200036c836001600160a01b03841662000414565b90505b92915050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16620001ff5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b60006200036c836001600160a01b03841662000518565b600081815260018301602052604081205480156200050d5760006200043b60018362000699565b8554909150600090620004519060019062000699565b9050818114620004bd576000866000018281548110620004755762000475620006d5565b90600052602060002001549050808760000184815481106200049b576200049b620006d5565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080620004d157620004d1620006bf565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506200036f565b60009150506200036f565b600081815260018301602052604081205462000561575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200036f565b5060006200036f565b80516200057781620006eb565b919050565b6000806000806000808688036101808112156200059857600080fd5b8751620005a581620006eb565b6020890151909750620005b881620006eb565b6040890151909650620005cb81620006eb565b6060890151909550620005de81620006eb565b6080890151909450620005f181620006eb565b925060e0609f19820112156200060657600080fd5b5060405160e081016001600160401b03811182821017156200063857634e487b7160e01b600052604160045260246000fd5b6040526200064960a089016200056a565b815260c0880151602082015260e088015160408201526101008801516060820152610120880151608082015261014088015160a082015261016088015160c0820152809150509295509295509295565b600082821015620006ba57634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03811681146200070157600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c610120516101405161016051610180516101a0516101c05161259c620008426000396000818161032b015261072f015260006105fa0152600061035b015260008181610277015261076f0152600081816104aa015281816106ed01528181610f6c01528181610fef01526119400152600081816106940152610fae01526000818161042501528181610b8601528181610dd101528181611604015281816116a9015281816117bb0152818161186a015281816119950152611a59015260008181610620015281816110c1015261117a0152600081816102a7015261146d0152600081816104d0015281816108c801528181610aec0152611be50152600081816102e10152818161081201528181610a650152611b63015261259c6000f3fe608060405234801561001057600080fd5b50600436106102485760003560e01c80637a71e6841161013b578063ca15c873116100b8578063db0da0481161007c578063db0da0481461061e578063e46bd1cc14610644578063e90e4e691461066b578063f12c7be614610692578063fa415632146106b857600080fd5b8063ca15c873146105ac578063cd0c1d96146105bf578063cebad90a146105d2578063d547741f146105e5578063dab12f86146105f857600080fd5b80639010d07c116100ff5780639010d07c1461056157806391d1485414610574578063a217fddf14610587578063b0b843741461058f578063bd30da0e1461059957600080fd5b80637a71e684146104ce5780637b56f2b9146104f457806380db43291461051b57806381a2cf791461053b5780638bb06b0b1461054e57600080fd5b806336568abe116101c95780635c1548fb1161018d5780635c1548fb146104235780635c449f7c146104495780636acfd6731461048257806373c025191461049557806378195e5d146104a857600080fd5b806336568abe146103a557806336fc1787146103b85780633e005d4a146103cb57806340163a63146103f257806358136165146103fc57600080fd5b806325cb5bc01161021057806325cb5bc0146103295780632c41f2971461034f5780632c6826f7146103595780632f2ff15d1461037f57806332bc34641461039257600080fd5b806301ffc9a71461024d57806307c0d26f1461027557806307c29624146102a557806313c7df66146102df578063248a9ca314610305575b600080fd5b61026061025b3660046121b6565b6106c0565b60405190151581526020015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b60405190815260200161026c565b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b03909116815260200161026c565b7f00000000000000000000000000000000000000000000000000000000000000006102c7565b61029761031336600461214b565b6000908152600160208190526040909120015490565b7f0000000000000000000000000000000000000000000000000000000000000000610297565b6103576106eb565b005b7f0000000000000000000000000000000000000000000000000000000000000000610297565b61035761038d366004612164565b6107c8565b6103576103a03660046122ce565b6107f5565b6103576103b3366004612164565b610c5f565b6103576103c636600461214b565b610ce2565b6102977f6277df547c9740e5c99a69c4bb32861284d2c5d224317168740012fdee5e798981565b610297620f424081565b6102977f146f48974fc095fc7e77b15586006eb4b8b4d0d4f840a96e8258529bcfb6c5eb81565b7f00000000000000000000000000000000000000000000000000000000000000006102c7565b610260610457366004612164565b60009182526004602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610357610490366004612164565b610d64565b6102976104a3366004612272565b610d8c565b7f0000000000000000000000000000000000000000000000000000000000000000610297565b7f00000000000000000000000000000000000000000000000000000000000000006102c7565b6102977f02bc46a2df2f34e2dd488f99d3b46825185f3c15356a2d43fbada8c4702190eb81565b61029761052936600461214b565b60009081526003602052604090205490565b6102976105493660046121e0565b610db6565b61035761055c36600461214b565b610eb9565b6102c761056f366004612194565b610ef6565b610260610582366004612164565b610f15565b610297600081565b610297620186a081565b6103576105a736600461214b565b610f40565b6102976105ba36600461214b565b61106a565b6103576105cd366004612194565b611081565b6102976105e036600461214b565b6110a7565b6103576105f3366004612164565b611217565b7f0000000000000000000000000000000000000000000000000000000000000000610297565b7f00000000000000000000000000000000000000000000000000000000000000006102c7565b6102977f5e86c8fc8b92fef7e25b2dfd331ced3bbe16e1ea4896dd49d32b34f8d6bd608f81565b6102977fe3b8046d7e6959c2d85a97e02cad9b35438693e986956269362f56ca0819169881565b7f0000000000000000000000000000000000000000000000000000000000000000610297565b600554610297565b60006001600160e01b03198216635a05180f60e01b14806106e557506106e582611339565b92915050565b7f00000000000000000000000000000000000000000000000000000000000000006005541161072d5760405163262b753160e21b815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000421161076d576040516349a2522760e01b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000060058190556040519081527ff5a9597b2040ee4886f0ddfdab78b03fb09f3bbf04edde66d81f3b9f07e2f5c09060200160405180910390a1565b600082815260016020819052604090912001546107e48161136e565b6107f083836001611378565b505050565b6107fd6113f0565b6040516370a0823160e01b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561085c57600080fd5b505afa158015610870573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108949190612259565b8511156108b35760405162a7b40560e41b815260040160405180910390fd5b6040516370a0823160e01b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561091257600080fd5b505afa158015610926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094a9190612259565b84111561096a5760405163355650f560e01b815260040160405180910390fd5b6000600019600554146109ce576000600554670de0b6b3a764000061098f919061249b565b9050670de0b6b3a76400006109a4878361247c565b886005546109b2919061247c565b6109bc9190612442565b6109c6919061245a565b9150506109f1565b8486146109ee576040516379b8989160e11b815260040160405180910390fd5b50845b6000610a417f02bc46a2df2f34e2dd488f99d3b46825185f3c15356a2d43fbada8c4702190eb7f5e86c8fc8b92fef7e25b2dfd331ced3bbe16e1ea4896dd49d32b34f8d6bd608f8488888861144a565b90508615610aca5760405163079cc67960e41b8152336004820152602481018890527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906379cc679090604401600060405180830381600087803b158015610ab157600080fd5b505af1158015610ac5573d6000803e3d6000fd5b505050505b8515610b515760405163079cc67960e41b8152336004820152602481018790527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906379cc679090604401600060405180830381600087803b158015610b3857600080fd5b505af1158015610b4c573d6000803e3d6000fd5b505050505b6000610b5d828461249b565b60405163a9059cbb60e01b81526001600160a01b038881166004830152602482018390529192507f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb90604401602060405180830381600087803b158015610bcc57600080fd5b505af1158015610be0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c049190612129565b5060408051828152602081018490526001600160a01b0388169133917fa28d80c9910787c0c058ed9b50c577f1389264bf61563fa45529e0771976f562910160405180910390a3505050610c586001600055565b5050505050565b6001600160a01b0381163314610cd45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610cde82826118f8565b5050565b600081815260046020908152604080832033845290915290205460ff16610d4b5760405162461bcd60e51b815260206004820152601a60248201527f6d73672e73656e64657220213d20726f6c65206e6f6d696e65650000000000006044820152606401610ccb565b610d5781336000611378565b610d61813361191a565b50565b60008281526001602081905260409091200154610d808161136e565b6107f083836000611378565b6000610d966113f0565b610da28585858561193c565b9050610dae6001600055565b949350505050565b6000610dc06113f0565b853515610e98576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663d505accf33306000198a35610e0d60408d0160208e0161231b565b604080516001600160e01b031960e089901b1681526001600160a01b0396871660048201529590941660248601526044850192909252606484015260ff16608483015289013560a4820152606089013560c482015260e401600060405180830381600087803b158015610e7f57600080fd5b505af1158015610e93573d6000803e3d6000fd5b505050505b610ea48585858561193c565b9050610eb06001600055565b95945050505050565b600081815260036020526040902054610ed18161136e565b600082815260036020526040902054610eeb908390611c92565b610cde826000611cdf565b6000828152600260205260408120610f0e9083611d3a565b9392505050565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b7f6277df547c9740e5c99a69c4bb32861284d2c5d224317168740012fdee5e7989610f6a8161136e565b7f000000000000000000000000000000000000000000000000000000000000000060055411610fac5760405163262b753160e21b815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000821015610fed57604051631118fbc760e21b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000082111561102e576040516374b015ad60e11b815260040160405180910390fd5b60058290556040518281527ff5a9597b2040ee4886f0ddfdab78b03fb09f3bbf04edde66d81f3b9f07e2f5c09060200160405180910390a15050565b60008181526002602052604081206106e590611d46565b6000828152600160208190526040909120015461109d8161136e565b6107f08383611cdf565b60405163023aa9ab60e61b815230600482015260009081907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638eaa6ac09060240160206040518083038186803b15801561110b57600080fd5b505afa15801561111f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111439190612259565b9050801561116457600019811461115a578061115d565b60005b91506111ff565b60405163023aa9ab60e61b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638eaa6ac09060240160206040518083038186803b1580156111c457600080fd5b505afa1580156111d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fc9190612259565b91505b620186a082111561121157620186a091505b50919050565b600082815260016020819052604090912001546112338161136e565b6107f083836118f8565b6112478282610f15565b15610cde5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610f0e836001600160a01b038416611d50565b6112c38282610f15565b610cde5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6000610f0e836001600160a01b038416611e43565b60006001600160e01b03198216637965db0b60e01b14806106e557506301ffc9a760e01b6001600160e01b03198316146106e5565b610d618133611e92565b60008381526004602090815260408083206001600160a01b03861680855290835292819020805460ff19168515159081179091558151878152928301939093528101919091527fd4eaea07a6439b4db5273291dd4d77f204d9eaf0d67149318c911f449f3df5d69060600160405180910390a1505050565b600260005414156114435760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610ccb565b6002600055565b60405163023aa9ab60e61b81526004810187905260009081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638eaa6ac09060240160206040518083038186803b1580156114af57600080fd5b505afa1580156114c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e7919061210c565b90506001600160a01b0381166115015760009150506118ee565b600061150c886110a7565b9050806115a4578661153157604051632006714760e01b815260040160405180910390fd5b604051631a04f3b560e21b81526001600160a01b03831690636813ced4906115679033908a908c9081908c908c906004016123b3565b600060405180830381600087803b15801561158157600080fd5b505af1158015611595573d6000803e3d6000fd5b505050506000925050506118ee565b6000620f42406115b4838a61247c565b6115be919061245a565b9050806115de576040516375e4ec8360e01b815260040160405180910390fd5b60405163095ea7b360e01b81526001600160a01b038481166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390604401602060405180830381600087803b15801561164857600080fd5b505af115801561165c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116809190612129565b50604051636eb1769f60e11b81523060048201526001600160a01b0384811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063dd62ed3e9060440160206040518083038186803b1580156116ed57600080fd5b505afa158015611701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117259190612259565b90506001600160a01b038416636813ced4338a8c611743878261249b565b8c8c6040518763ffffffff1660e01b8152600401611766969594939291906123b3565b600060405180830381600087803b15801561178057600080fd5b505af1158015611794573d6000803e3d6000fd5b5050604051636eb1769f60e11b81523060048201526001600160a01b0387811660248301527f000000000000000000000000000000000000000000000000000000000000000016925063dd62ed3e915060440160206040518083038186803b1580156117ff57600080fd5b505afa158015611813573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118379190612259565b611841908261249b565b60405163095ea7b360e01b81526001600160a01b038681166004830152600060248301529196507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b390604401602060405180830381600087803b1580156118b057600080fd5b505af11580156118c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e89190612129565b50505050505b9695505050505050565b611902828261123d565b60008281526002602052604090206107f090826112a4565b61192482826112b9565b60008281526002602052604090206107f09082611324565b60007f0000000000000000000000000000000000000000000000000000000000000000600554116119805760405163262b753160e21b815260040160405180910390fd5b6040516370a0823160e01b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156119df57600080fd5b505afa1580156119f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a179190612259565b851115611a3757604051633a23d82560e01b815260040160405180910390fd5b6040516323b872dd60e01b8152336004820152306024820152604481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90606401602060405180830381600087803b158015611aa557600080fd5b505af1158015611ab9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611add9190612129565b506000611b2e7fe3b8046d7e6959c2d85a97e02cad9b35438693e986956269362f56ca081916987f146f48974fc095fc7e77b15586006eb4b8b4d0d4f840a96e8258529bcfb6c5eb8888888861144a565b9050611b3a818761249b565b6040516340c10f1960e01b81526001600160a01b038781166004830152602482018390529193507f0000000000000000000000000000000000000000000000000000000000000000909116906340c10f1990604401600060405180830381600087803b158015611ba957600080fd5b505af1158015611bbd573d6000803e3d6000fd5b50506040516340c10f1960e01b81526001600160a01b038881166004830152602482018690527f00000000000000000000000000000000000000000000000000000000000000001692506340c10f199150604401600060405180830381600087803b158015611c2b57600080fd5b505af1158015611c3f573d6000803e3d6000fd5b505060408051858152602081018590526001600160a01b03891693503392507f2f00e3cdd69a77be7ed215ec7b2a36784dd158f921fca79ac29deffa353fe6ee910160405180910390a350949350505050565b6000828152600160208190526040808320909101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000828152600360209081526040918290205482519081529081018390527fb7f84e320be67bd09b884f0142b70ae1256025837c61650411a58567f9137c5d910160405180910390a160009182526003602052604090912055565b6000610f0e8383611eeb565b60006106e5825490565b60008181526001830160205260408120548015611e39576000611d7460018361249b565b8554909150600090611d889060019061249b565b9050818114611ded576000866000018281548110611da857611da8612525565b9060005260206000200154905080876000018481548110611dcb57611dcb612525565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611dfe57611dfe61250f565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506106e5565b60009150506106e5565b6000818152600183016020526040812054611e8a575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106e5565b5060006106e5565b611e9c8282610f15565b610cde57611ea981611f15565b611eb4836020611f27565b604051602001611ec592919061233e565b60408051601f198184030181529082905262461bcd60e51b8252610ccb9160040161240f565b6000826000018281548110611f0257611f02612525565b9060005260206000200154905092915050565b60606106e56001600160a01b03831660145b60606000611f3683600261247c565b611f41906002612442565b67ffffffffffffffff811115611f5957611f5961253b565b6040519080825280601f01601f191660200182016040528015611f83576020820181803683370190505b509050600360fc1b81600081518110611f9e57611f9e612525565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611fcd57611fcd612525565b60200101906001600160f81b031916908160001a9053506000611ff184600261247c565b611ffc906001612442565b90505b6001811115612074576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061203057612030612525565b1a60f81b82828151811061204657612046612525565b60200101906001600160f81b031916908160001a90535060049490941c9361206d816124e2565b9050611fff565b508315610f0e5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610ccb565b60008083601f8401126120d557600080fd5b50813567ffffffffffffffff8111156120ed57600080fd5b60208301915083602082850101111561210557600080fd5b9250929050565b60006020828403121561211e57600080fd5b8151610f0e81612551565b60006020828403121561213b57600080fd5b81518015158114610f0e57600080fd5b60006020828403121561215d57600080fd5b5035919050565b6000806040838503121561217757600080fd5b82359150602083013561218981612551565b809150509250929050565b600080604083850312156121a757600080fd5b50508035926020909101359150565b6000602082840312156121c857600080fd5b81356001600160e01b031981168114610f0e57600080fd5b600080600080600085870360e08112156121f957600080fd5b608081121561220757600080fd5b508594506080860135935060a086013561222081612551565b925060c086013567ffffffffffffffff81111561223c57600080fd5b612248888289016120c3565b969995985093965092949392505050565b60006020828403121561226b57600080fd5b5051919050565b6000806000806060858703121561228857600080fd5b84359350602085013561229a81612551565b9250604085013567ffffffffffffffff8111156122b657600080fd5b6122c2878288016120c3565b95989497509550505050565b6000806000806000608086880312156122e657600080fd5b853594506020860135935060408601356122ff81612551565b9250606086013567ffffffffffffffff81111561223c57600080fd5b60006020828403121561232d57600080fd5b813560ff81168114610f0e57600080fd5b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516123768160178501602088016124b2565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516123a78160288401602088016124b2565b01602801949350505050565b6001600160a01b03878116825286166020820152604081018590526060810184905260a06080820181905281018290526000828460c0840137600060c0848401015260c0601f19601f8501168301019050979650505050505050565b602081526000825180602084015261242e8160408501602087016124b2565b601f01601f19169190910160400192915050565b60008219821115612455576124556124f9565b500190565b60008261247757634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615612496576124966124f9565b500290565b6000828210156124ad576124ad6124f9565b500390565b60005b838110156124cd5781810151838201526020016124b5565b838111156124dc576000848401525b50505050565b6000816124f1576124f16124f9565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610d6157600080fdfea26469706673582212208d1fd10dab64bef7b86df4743eaebe7801d72f2fcee9840922cea5839e4be7e664736f6c634300080700336101406040523480156200001257600080fd5b506040516200172b3803806200172b8339810160408190526200003591620002eb565b8180604051806040016040528060018152602001603160f81b815250848481600390805190602001906200006b9291906200018e565b508051620000819060049060208401906200018e565b5050825160208085019190912083518483012060e08290526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81880181905281830187905260608201869052608082019490945230818401528151808203909301835260c0019052805194019390932091935091906080523060601b60c05261012052506200013093506200012a925050620001389050565b6200013c565b5050620003a8565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200019c9062000355565b90600052602060002090601f016020900481019282620001c057600085556200020b565b82601f10620001db57805160ff19168380011785556200020b565b828001600101855582156200020b579182015b828111156200020b578251825591602001919060010190620001ee565b50620002199291506200021d565b5090565b5b808211156200021957600081556001016200021e565b600082601f8301126200024657600080fd5b81516001600160401b038082111562000263576200026362000392565b604051601f8301601f19908116603f011681019082821181831017156200028e576200028e62000392565b81604052838152602092508683858801011115620002ab57600080fd5b600091505b83821015620002cf5785820183015181830184015290820190620002b0565b83821115620002e15760008385830101525b9695505050505050565b60008060408385031215620002ff57600080fd5b82516001600160401b03808211156200031757600080fd5b620003258683870162000234565b935060208501519150808211156200033c57600080fd5b506200034b8582860162000234565b9150509250929050565b600181811c908216806200036a57607f821691505b602082108114156200038c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160a05160c05160601c60e0516101005161012051611330620003fb6000396000610ad501526000610b2401526000610aff01526000610a5801526000610a8201526000610aac01526113306000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063715018a6116100ad578063a457c2d711610071578063a457c2d714610268578063a9059cbb1461027b578063d505accf1461028e578063dd62ed3e146102a1578063f2fde38b146102b457600080fd5b8063715018a61461021257806379cc67901461021a5780637ecebe001461022d5780638da5cb5b1461024057806395d89b411461026057600080fd5b80633644e515116100f45780633644e515146101a657806339509351146101ae57806340c10f19146101c157806342966c68146101d657806370a08231146101e957600080fd5b806306fdde0314610131578063095ea7b31461014f57806318160ddd1461017257806323b872dd14610184578063313ce56714610197575b600080fd5b6101396102c7565b6040516101469190611234565b60405180910390f35b61016261015d3660046111f1565b610359565b6040519015158152602001610146565b6002545b604051908152602001610146565b610162610192366004611142565b610371565b60405160128152602001610146565b610176610395565b6101626101bc3660046111f1565b6103a4565b6101d46101cf3660046111f1565b6103c6565b005b6101d46101e436600461121b565b6103dc565b6101766101f73660046110ed565b6001600160a01b031660009081526020819052604090205490565b6101d46103e9565b6101d46102283660046111f1565b6103fd565b61017661023b3660046110ed565b610432565b610248610452565b6040516001600160a01b039091168152602001610146565b610139610466565b6101626102763660046111f1565b610475565b6101626102893660046111f1565b6104f5565b6101d461029c36600461117e565b610503565b6101766102af36600461110f565b610667565b6101d46102c23660046110ed565b610692565b6060600380546102d6906112af565b80601f0160208091040260200160405190810160405280929190818152602001828054610302906112af565b801561034f5780601f106103245761010080835404028352916020019161034f565b820191906000526020600020905b81548152906001019060200180831161033257829003601f168201915b5050505050905090565b600033610367818585610708565b5060019392505050565b60003361037f85828561082d565b61038a8585856108a7565b506001949350505050565b600061039f610a4b565b905090565b6000336103678185856103b78383610667565b6103c19190611289565b610708565b6103ce610b72565b6103d88282610bd1565b5050565b6103e63382610c90565b50565b6103f1610b72565b6103fb6000610dba565b565b610405610452565b6001600160a01b0316336001600160a01b03161415610428576103d88282610c90565b6103d88282610e0c565b6001600160a01b0381166000908152600560205260408120545b92915050565b600061039f6007546001600160a01b031690565b6060600480546102d6906112af565b600033816104838286610667565b9050838110156104e85760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b61038a8286868403610708565b6000336103678185856108a7565b834211156105535760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e6500000060448201526064016104df565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886105828c610e21565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905060006105dd82610e49565b905060006105ed82878787610e97565b9050896001600160a01b0316816001600160a01b0316146106505760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e6174757265000060448201526064016104df565b61065b8a8a8a610708565b50505050505050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61069a610b72565b6001600160a01b0381166106ff5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104df565b6103e681610dba565b6001600160a01b03831661076a5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104df565b6001600160a01b0382166107cb5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104df565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006108398484610667565b905060001981146108a157818110156108945760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016104df565b6108a18484848403610708565b50505050565b6001600160a01b03831661090b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104df565b6001600160a01b03821661096d5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104df565b6001600160a01b038316600090815260208190526040902054818110156109e55760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016104df565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36108a1565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610aa457507f000000000000000000000000000000000000000000000000000000000000000046145b15610ace57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b33610b7b610452565b6001600160a01b0316146103fb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104df565b6001600160a01b038216610c275760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016104df565b8060026000828254610c399190611289565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6001600160a01b038216610cf05760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016104df565b6001600160a01b03821660009081526020819052604090205481811015610d645760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016104df565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101610820565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610e1782338361082d565b6103d88282610c90565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b600061044c610e56610a4b565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000610ea887878787610ebf565b91509150610eb581610f83565b5095945050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610ef65750600090506003610f7a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610f4a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610f7357600060019250925050610f7a565b9150600090505b94509492505050565b6000816004811115610f9757610f976112e4565b1415610fa05750565b6001816004811115610fb457610fb46112e4565b14156110025760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016104df565b6002816004811115611016576110166112e4565b14156110645760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104df565b6003816004811115611078576110786112e4565b14156103e65760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016104df565b80356001600160a01b03811681146110e857600080fd5b919050565b6000602082840312156110ff57600080fd5b611108826110d1565b9392505050565b6000806040838503121561112257600080fd5b61112b836110d1565b9150611139602084016110d1565b90509250929050565b60008060006060848603121561115757600080fd5b611160846110d1565b925061116e602085016110d1565b9150604084013590509250925092565b600080600080600080600060e0888a03121561119957600080fd5b6111a2886110d1565b96506111b0602089016110d1565b95506040880135945060608801359350608088013560ff811681146111d457600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561120457600080fd5b61120d836110d1565b946020939093013593505050565b60006020828403121561122d57600080fd5b5035919050565b600060208083528351808285015260005b8181101561126157858101830151858201604001528201611245565b81811115611273576000604083870101525b50601f01601f1916929092016040019392505050565b600082198211156112aa57634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806112c357607f821691505b60208210811415610e4357634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052602160045260246000fdfea2646970667358221220966b30691582f0f1e994d4be86388219b7102c213078aafb9a85c84bcede701964736f6c63430008070033a264697066735822122065ac8c4ba9f5587cb0f7f488e1d733748a79bc9e57b5342f3b52969f81f33e3c64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "Only callable by the current nominee. Sets nominee back to zero address."
      },
      "getNominee()": {
        "returns": {
          "_0": "The current nominee"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Accepts ownership nomination."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5045,
        "contract": "contracts/PrePOMarketFactory.sol:PrePOMarketFactory",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4929,
        "contract": "contracts/PrePOMarketFactory.sol:PrePOMarketFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 20063,
        "contract": "contracts/PrePOMarketFactory.sol:PrePOMarketFactory",
        "label": "_nominee",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 15715,
        "contract": "contracts/PrePOMarketFactory.sol:PrePOMarketFactory",
        "label": "_addressBeacon",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IAddressBeacon)20547"
      },
      {
        "astId": 15718,
        "contract": "contracts/PrePOMarketFactory.sol:PrePOMarketFactory",
        "label": "_uintBeacon",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IUintBeacon)20978"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IAddressBeacon)20547": {
        "encoding": "inplace",
        "label": "contract IAddressBeacon",
        "numberOfBytes": "20"
      },
      "t_contract(IUintBeacon)20978": {
        "encoding": "inplace",
        "label": "contract IUintBeacon",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
