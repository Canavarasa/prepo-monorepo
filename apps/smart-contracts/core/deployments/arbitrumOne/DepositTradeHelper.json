{
  "address": "0x6DA2F6cE51A0E0fA2DB04d5829d255163CB0ca86",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ICollateral",
          "name": "collateral",
          "type": "address"
        },
        {
          "internalType": "contract ISwapRouter",
          "name": "swapRouter",
          "type": "address"
        },
        {
          "internalType": "contract IVault",
          "name": "wstethVault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        }
      ],
      "name": "AmountMultiplierChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousNominee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newNominee",
          "type": "address"
        }
      ],
      "name": "NomineeUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "TokenSenderChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "percent",
          "type": "uint256"
        }
      ],
      "name": "TradeFeePercentChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "TreasuryChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "wstethPoolId",
          "type": "bytes32"
        }
      ],
      "name": "WstethPoolIdChange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PERCENT_UNIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL_FEE_TIER",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAmountMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateral",
      "outputs": [
        {
          "internalType": "contract ICollateral",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNominee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSwapRouter",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenSender",
      "outputs": [
        {
          "internalType": "contract ITokenSender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTradeFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWstethPoolId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWstethVault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountMultiplier",
          "type": "uint256"
        }
      ],
      "name": "setAmountMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITokenSender",
          "name": "tokenSender",
          "type": "address"
        }
      ],
      "name": "setTokenSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tradeFeePercent",
          "type": "uint256"
        }
      ],
      "name": "setTradeFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "wstethPoolId",
          "type": "bytes32"
        }
      ],
      "name": "setWstethPoolId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "positionAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IDepositTradeHelper.Permit",
          "name": "positionPermit",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "positionToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            }
          ],
          "internalType": "struct IDepositTradeHelper.OffChainTradeParams",
          "name": "tradeParams",
          "type": "tuple"
        }
      ],
      "name": "tradeForCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IDepositTradeHelper.Permit",
          "name": "collateralPermit",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "positionToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            }
          ],
          "internalType": "struct IDepositTradeHelper.OffChainTradeParams",
          "name": "tradeParams",
          "type": "tuple"
        }
      ],
      "name": "tradeForPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nominee",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "withdrawData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IDepositTradeHelper.Permit",
          "name": "collateralPermit",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDepositTradeHelper.OffChainBalancerParams",
          "name": "balancerParams",
          "type": "tuple"
        }
      ],
      "name": "withdrawAndUnwrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IDepositTradeHelper.Permit",
          "name": "collateralPermit",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDepositTradeHelper.OffChainBalancerParams",
          "name": "balancerParams",
          "type": "tuple"
        }
      ],
      "name": "withdrawAndUnwrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDepositTradeHelper.OffChainBalancerParams",
          "name": "balancerParams",
          "type": "tuple"
        }
      ],
      "name": "wrapAndDeposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "depositData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDepositTradeHelper.OffChainBalancerParams",
          "name": "balancerParams",
          "type": "tuple"
        }
      ],
      "name": "wrapAndDeposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDepositTradeHelper.OffChainBalancerParams",
          "name": "balancerParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IDepositTradeHelper.Permit",
          "name": "collateralPermit",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "positionToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            }
          ],
          "internalType": "struct IDepositTradeHelper.OffChainTradeParams",
          "name": "tradeParams",
          "type": "tuple"
        }
      ],
      "name": "wrapAndDepositAndTrade",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "depositData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct IDepositTradeHelper.OffChainBalancerParams",
          "name": "balancerParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IDepositTradeHelper.Permit",
          "name": "collateralPermit",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "positionToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            }
          ],
          "internalType": "struct IDepositTradeHelper.OffChainTradeParams",
          "name": "tradeParams",
          "type": "tuple"
        }
      ],
      "name": "wrapAndDepositAndTrade",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0cab0771ec89aac05cfdef8f9144a444b596d43c5e4e53252d7c64749ec0bd40",
  "receipt": {
    "to": null,
    "from": "0x4F05Cf239a8BC2bfdA92673bC3c8a87E091b6D97",
    "contractAddress": "0x6DA2F6cE51A0E0fA2DB04d5829d255163CB0ca86",
    "transactionIndex": 2,
    "gasUsed": "9785497",
    "logsBloom": "0x00000002000000000000001000000000000000000000000000800000000000000000000000000000000000000000800000000000000080000000000000200000080000000000000000000000000000000001000000000000000000000000000000000000020000000000110000000800020000000000000000000000000000400000000000000000000000000000000100000001000000000000000000000000020008000000000000000001800000000040004000008000000000002000000000000000002000000000000000000000002000000000000001000000001020000010000100000000000000000000000000000000000000800000000000000000",
    "blockHash": "0x1b2e89f71a2c156e67d4f07290a746883aa11d14593ab602f98275df7cac5584",
    "transactionHash": "0x0cab0771ec89aac05cfdef8f9144a444b596d43c5e4e53252d7c64749ec0bd40",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 105302719,
        "transactionHash": "0x0cab0771ec89aac05cfdef8f9144a444b596d43c5e4e53252d7c64749ec0bd40",
        "address": "0x6DA2F6cE51A0E0fA2DB04d5829d255163CB0ca86",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004f05cf239a8bc2bfda92673bc3c8a87e091b6d97"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1b2e89f71a2c156e67d4f07290a746883aa11d14593ab602f98275df7cac5584"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 105302719,
        "transactionHash": "0x0cab0771ec89aac05cfdef8f9144a444b596d43c5e4e53252d7c64749ec0bd40",
        "address": "0x5979D7b546E38E414F7E9822514be443A4800529",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000006da2f6ce51a0e0fa2db04d5829d255163cb0ca86",
          "0x00000000000000000000000067a5246e2dbbd51250b41128ea277674c65e8dee"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0x1b2e89f71a2c156e67d4f07290a746883aa11d14593ab602f98275df7cac5584"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 105302719,
        "transactionHash": "0x0cab0771ec89aac05cfdef8f9144a444b596d43c5e4e53252d7c64749ec0bd40",
        "address": "0x5979D7b546E38E414F7E9822514be443A4800529",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000006da2f6ce51a0e0fa2db04d5829d255163cb0ca86",
          "0x000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c8"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0x1b2e89f71a2c156e67d4f07290a746883aa11d14593ab602f98275df7cac5584"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 105302719,
        "transactionHash": "0x0cab0771ec89aac05cfdef8f9144a444b596d43c5e4e53252d7c64749ec0bd40",
        "address": "0x67a5246e2DbbD51250b41128EA277674C65e8dee",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000006da2f6ce51a0e0fa2db04d5829d255163cb0ca86",
          "0x000000000000000000000000e592427a0aece92de3edee1f18e0157c05861564"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 3,
        "blockHash": "0x1b2e89f71a2c156e67d4f07290a746883aa11d14593ab602f98275df7cac5584"
      }
    ],
    "blockNumber": 105302719,
    "cumulativeGasUsed": "10403220",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x67a5246e2DbbD51250b41128EA277674C65e8dee",
    "0xE592427A0AEce92De3Edee1F18E0157C05861564",
    "0xBA12222222228d8Ba445958a75a0704d566BF2C8"
  ],
  "numDeployments": 1,
  "solcInputHash": "db787d8080b719d0d5f261c540615290",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ICollateral\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"contract ISwapRouter\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"wstethVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"AmountMultiplierChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousNominee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newNominee\",\"type\":\"address\"}],\"name\":\"NomineeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"TokenSenderChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"TradeFeePercentChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasuryChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"wstethPoolId\",\"type\":\"bytes32\"}],\"name\":\"WstethPoolIdChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENT_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_FEE_TIER\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAmountMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateral\",\"outputs\":[{\"internalType\":\"contract ICollateral\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNominee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenSender\",\"outputs\":[{\"internalType\":\"contract ITokenSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTradeFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWstethPoolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWstethVault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMultiplier\",\"type\":\"uint256\"}],\"name\":\"setAmountMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITokenSender\",\"name\":\"tokenSender\",\"type\":\"address\"}],\"name\":\"setTokenSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeFeePercent\",\"type\":\"uint256\"}],\"name\":\"setTradeFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"wstethPoolId\",\"type\":\"bytes32\"}],\"name\":\"setWstethPoolId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IDepositTradeHelper.Permit\",\"name\":\"positionPermit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"positionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IDepositTradeHelper.OffChainTradeParams\",\"name\":\"tradeParams\",\"type\":\"tuple\"}],\"name\":\"tradeForCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IDepositTradeHelper.Permit\",\"name\":\"collateralPermit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"positionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IDepositTradeHelper.OffChainTradeParams\",\"name\":\"tradeParams\",\"type\":\"tuple\"}],\"name\":\"tradeForPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nominee\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"withdrawData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IDepositTradeHelper.Permit\",\"name\":\"collateralPermit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IDepositTradeHelper.OffChainBalancerParams\",\"name\":\"balancerParams\",\"type\":\"tuple\"}],\"name\":\"withdrawAndUnwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IDepositTradeHelper.Permit\",\"name\":\"collateralPermit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IDepositTradeHelper.OffChainBalancerParams\",\"name\":\"balancerParams\",\"type\":\"tuple\"}],\"name\":\"withdrawAndUnwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IDepositTradeHelper.OffChainBalancerParams\",\"name\":\"balancerParams\",\"type\":\"tuple\"}],\"name\":\"wrapAndDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IDepositTradeHelper.OffChainBalancerParams\",\"name\":\"balancerParams\",\"type\":\"tuple\"}],\"name\":\"wrapAndDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IDepositTradeHelper.OffChainBalancerParams\",\"name\":\"balancerParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IDepositTradeHelper.Permit\",\"name\":\"collateralPermit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"positionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IDepositTradeHelper.OffChainTradeParams\",\"name\":\"tradeParams\",\"type\":\"tuple\"}],\"name\":\"wrapAndDepositAndTrade\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IDepositTradeHelper.OffChainBalancerParams\",\"name\":\"balancerParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IDepositTradeHelper.Permit\",\"name\":\"collateralPermit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"positionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct IDepositTradeHelper.OffChainTradeParams\",\"name\":\"tradeParams\",\"type\":\"tuple\"}],\"name\":\"wrapAndDepositAndTrade\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"Only callable by the current nominee. Sets nominee back to zero address.\"},\"getNominee()\":{\"returns\":{\"_0\":\"The current nominee\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"wrapAndDeposit(address,bytes,(uint256,uint256))\":{\"details\":\"Assumes `_baseToken` is WstETH\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Accepts ownership nomination.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DepositTradeHelper.sol\":\"DepositTradeHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/DepositTradeHelper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport {IAsset, ICollateral, IDepositTradeHelper, IERC20, ISwapRouter, IVault} from \\\"./interfaces/IDepositTradeHelper.sol\\\";\\nimport {SafeOwnable} from \\\"prepo-shared-contracts/contracts/SafeOwnable.sol\\\";\\nimport {ITokenSender, TokenSenderCaller} from \\\"prepo-shared-contracts/contracts/TokenSenderCaller.sol\\\";\\nimport {TreasuryCaller} from \\\"prepo-shared-contracts/contracts/TreasuryCaller.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IERC20Permit} from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\ncontract DepositTradeHelper is\\n  IDepositTradeHelper,\\n  ReentrancyGuard,\\n  SafeOwnable,\\n  TokenSenderCaller,\\n  TreasuryCaller\\n{\\n  ICollateral private immutable _collateral;\\n  IERC20 private immutable _baseToken;\\n  ISwapRouter private immutable _swapRouter;\\n  IVault private immutable _wstethVault;\\n\\n  bytes32 private _wstethPoolId;\\n  uint256 private _tradeFeePercent;\\n\\n  uint24 public constant override POOL_FEE_TIER = 100;\\n\\n  constructor(\\n    ICollateral collateral,\\n    ISwapRouter swapRouter,\\n    IVault wstethVault\\n  ) {\\n    _collateral = collateral;\\n    _baseToken = collateral.getBaseToken();\\n    _swapRouter = swapRouter;\\n    _wstethVault = wstethVault;\\n    collateral.getBaseToken().approve(address(collateral), type(uint256).max);\\n    collateral.getBaseToken().approve(address(wstethVault), type(uint256).max);\\n    collateral.approve(address(swapRouter), type(uint256).max);\\n  }\\n\\n  /// @dev Assumes `_baseToken` is WstETH\\n  function wrapAndDeposit(\\n    address recipient,\\n    bytes calldata depositData,\\n    OffChainBalancerParams calldata balancerParams\\n  ) external payable override nonReentrant {\\n    _wrapAndDeposit(recipient, depositData, balancerParams);\\n  }\\n\\n  function wrapAndDeposit(\\n    address recipient,\\n    OffChainBalancerParams calldata balancerParams\\n  ) external payable override nonReentrant {\\n    _wrapAndDeposit(recipient, balancerParams);\\n  }\\n\\n  function tradeForPosition(\\n    address recipient,\\n    uint256 collateralAmount,\\n    Permit calldata collateralPermit,\\n    OffChainTradeParams calldata tradeParams\\n  ) external override nonReentrant {\\n    _permitAndTransfer(\\n      msg.sender,\\n      address(_collateral),\\n      collateralAmount,\\n      collateralPermit\\n    );\\n    uint256 collateralAmountAfterFee = _sendCollateralFeeAndRebate(\\n      recipient,\\n      collateralAmount\\n    );\\n    _trade(\\n      recipient,\\n      address(_collateral),\\n      tradeParams.positionToken,\\n      collateralAmountAfterFee,\\n      tradeParams\\n    );\\n  }\\n\\n  function tradeForCollateral(\\n    address recipient,\\n    uint256 positionAmount,\\n    Permit calldata positionPermit,\\n    OffChainTradeParams calldata tradeParams\\n  ) external override nonReentrant {\\n    _permitAndTransfer(\\n      msg.sender,\\n      tradeParams.positionToken,\\n      positionAmount,\\n      positionPermit\\n    );\\n    /**\\n     * Since any position token could be passed in, it is simpler to just\\n     * perform a one-time approval on the first trade of a Long or Short\\n     * token. This removes the need to \\\"register\\\" Long or Short tokens\\n     * every time we need the contract to support one.\\n     */\\n    if (\\n      IERC20(tradeParams.positionToken).allowance(\\n        address(this),\\n        address(_swapRouter)\\n      ) != type(uint256).max\\n    ) {\\n      IERC20(tradeParams.positionToken).approve(\\n        address(_swapRouter),\\n        type(uint256).max\\n      );\\n    }\\n    // trade recipient is this contract so fee can be captured\\n    uint256 collateralAmountBeforeFee = _trade(\\n      address(this),\\n      tradeParams.positionToken,\\n      address(_collateral),\\n      positionAmount,\\n      tradeParams\\n    );\\n    uint256 collateralAmountAfterFee = _sendCollateralFeeAndRebate(\\n      recipient,\\n      collateralAmountBeforeFee\\n    );\\n    _collateral.transfer(recipient, collateralAmountAfterFee);\\n  }\\n\\n  function wrapAndDepositAndTrade(\\n    address recipient,\\n    bytes calldata depositData,\\n    OffChainBalancerParams calldata balancerParams,\\n    Permit calldata collateralPermit,\\n    OffChainTradeParams calldata tradeParams\\n  ) external payable override nonReentrant {\\n    uint256 collateralAmountBeforeFee = _wrapAndDeposit(\\n      recipient,\\n      depositData,\\n      balancerParams\\n    );\\n    /**\\n     * funder = recipient in this case since minted collateral is attributed\\n     * to the recipient. Since this function will only be used for collateral\\n     * => position trading, can assume collateral will be the input token and\\n     * position token as the output.\\n     */\\n    _permitAndTransfer(\\n      recipient,\\n      address(_collateral),\\n      collateralAmountBeforeFee,\\n      collateralPermit\\n    );\\n    uint256 collateralAmountAfterFee = _sendCollateralFeeAndRebate(\\n      recipient,\\n      collateralAmountBeforeFee\\n    );\\n    _trade(\\n      recipient,\\n      address(_collateral),\\n      tradeParams.positionToken,\\n      collateralAmountAfterFee,\\n      tradeParams\\n    );\\n  }\\n\\n  function wrapAndDepositAndTrade(\\n    address recipient,\\n    OffChainBalancerParams calldata balancerParams,\\n    Permit calldata collateralPermit,\\n    OffChainTradeParams calldata tradeParams\\n  ) external payable override nonReentrant {\\n    uint256 collateralAmountBeforeFee = _wrapAndDeposit(\\n      recipient,\\n      balancerParams\\n    );\\n    /**\\n     * funder = recipient in this case since minted collateral is attributed\\n     * to the recipient. Since this function will only be used for collateral\\n     * => position trading, can assume collateral will be the input token and\\n     * position token as the output.\\n     */\\n    _permitAndTransfer(\\n      recipient,\\n      address(_collateral),\\n      collateralAmountBeforeFee,\\n      collateralPermit\\n    );\\n    uint256 collateralAmountAfterFee = _sendCollateralFeeAndRebate(\\n      recipient,\\n      collateralAmountBeforeFee\\n    );\\n    _trade(\\n      recipient,\\n      address(_collateral),\\n      tradeParams.positionToken,\\n      collateralAmountAfterFee,\\n      tradeParams\\n    );\\n  }\\n\\n  function withdrawAndUnwrap(\\n    address recipient,\\n    uint256 amount,\\n    bytes calldata withdrawData,\\n    Permit calldata collateralPermit,\\n    OffChainBalancerParams calldata balancerParams\\n  ) external override nonReentrant {\\n    uint256 recipientETHBefore = recipient.balance;\\n    _permitAndTransfer(\\n      msg.sender,\\n      address(_collateral),\\n      amount,\\n      collateralPermit\\n    );\\n    uint256 wstethAmount = _collateral.withdraw(\\n      address(this),\\n      amount,\\n      withdrawData\\n    );\\n    IERC20 rewardToken = _tokenSender.getOutputToken();\\n    uint256 rewardTokenBalance = rewardToken.balanceOf(address(this));\\n    if (rewardTokenBalance > 0)\\n      rewardToken.transfer(recipient, rewardTokenBalance);\\n    IVault.SingleSwap memory wstethSwapParams = IVault.SingleSwap(\\n      _wstethPoolId,\\n      IVault.SwapKind.GIVEN_IN,\\n      IAsset(address(_baseToken)),\\n      // output token as zero address means ETH\\n      IAsset(address(0)),\\n      wstethAmount,\\n      \\\"\\\"\\n    );\\n    IVault.FundManagement memory wstethFundingParams = IVault.FundManagement(\\n      address(this),\\n      false,\\n      // Unwraps WETH into ETH directly to recipient\\n      payable(recipient),\\n      false\\n    );\\n    _wstethVault.swap(\\n      wstethSwapParams,\\n      wstethFundingParams,\\n      balancerParams.amountOutMinimum,\\n      balancerParams.deadline\\n    );\\n    require(\\n      recipient.balance - recipientETHBefore >=\\n        balancerParams.amountOutMinimum,\\n      \\\"Insufficient ETH from swap\\\"\\n    );\\n  }\\n\\n  function withdrawAndUnwrap(\\n    address recipient,\\n    uint256 amount,\\n    Permit calldata collateralPermit,\\n    OffChainBalancerParams calldata balancerParams\\n  ) external override nonReentrant {\\n    uint256 recipientETHBefore = recipient.balance;\\n    _permitAndTransfer(\\n      msg.sender,\\n      address(_collateral),\\n      amount,\\n      collateralPermit\\n    );\\n    uint256 wstethAmount = _collateral.withdraw(address(this), amount);\\n    IERC20 rewardToken = _tokenSender.getOutputToken();\\n    uint256 rewardTokenBalance = rewardToken.balanceOf(address(this));\\n    if (rewardTokenBalance > 0)\\n      rewardToken.transfer(recipient, rewardTokenBalance);\\n    IVault.SingleSwap memory wstethSwapParams = IVault.SingleSwap(\\n      _wstethPoolId,\\n      IVault.SwapKind.GIVEN_IN,\\n      IAsset(address(_baseToken)),\\n      // output token as zero address means ETH\\n      IAsset(address(0)),\\n      wstethAmount,\\n      \\\"\\\"\\n    );\\n    IVault.FundManagement memory wstethFundingParams = IVault.FundManagement(\\n      address(this),\\n      false,\\n      // Unwraps WETH into ETH directly to recipient\\n      payable(recipient),\\n      false\\n    );\\n    _wstethVault.swap(\\n      wstethSwapParams,\\n      wstethFundingParams,\\n      balancerParams.amountOutMinimum,\\n      balancerParams.deadline\\n    );\\n    require(\\n      recipient.balance - recipientETHBefore >=\\n        balancerParams.amountOutMinimum,\\n      \\\"Insufficient ETH from swap\\\"\\n    );\\n  }\\n\\n  function setWstethPoolId(bytes32 wstethPoolId) external override onlyOwner {\\n    _wstethPoolId = wstethPoolId;\\n    emit WstethPoolIdChange(wstethPoolId);\\n  }\\n\\n  function setTradeFeePercent(uint256 tradeFeePercent)\\n    external\\n    override\\n    onlyOwner\\n  {\\n    _tradeFeePercent = tradeFeePercent;\\n    emit TradeFeePercentChange(tradeFeePercent);\\n  }\\n\\n  function setAmountMultiplier(address account, uint256 amountMultiplier)\\n    public\\n    override\\n    onlyOwner\\n  {\\n    /**\\n     * Zero address is used here to represent that this multiplier will be\\n     * applied to all accounts.\\n     */\\n    if (account != address(0)) revert InvalidAccount();\\n    super.setAmountMultiplier(account, amountMultiplier);\\n  }\\n\\n  function setTokenSender(ITokenSender tokenSender) public override onlyOwner {\\n    super.setTokenSender(tokenSender);\\n  }\\n\\n  function setTreasury(address treasury) public override onlyOwner {\\n    super.setTreasury(treasury);\\n  }\\n\\n  function getCollateral() external view override returns (ICollateral) {\\n    return _collateral;\\n  }\\n\\n  function getBaseToken() external view override returns (IERC20) {\\n    return _baseToken;\\n  }\\n\\n  function getSwapRouter() external view override returns (ISwapRouter) {\\n    return _swapRouter;\\n  }\\n\\n  function getWstethVault() external view override returns (IVault) {\\n    return _wstethVault;\\n  }\\n\\n  function getWstethPoolId() external view override returns (bytes32) {\\n    return _wstethPoolId;\\n  }\\n\\n  function getTradeFeePercent() external view override returns (uint256) {\\n    return _tradeFeePercent;\\n  }\\n\\n  function _wrapAndDeposit(\\n    address recipient,\\n    bytes memory depositData,\\n    OffChainBalancerParams calldata balancerParams\\n  ) internal returns (uint256) {\\n    uint256 wstethBalanceBefore = _baseToken.balanceOf(address(this));\\n    IVault.SingleSwap memory wstethSwapParams = IVault.SingleSwap(\\n      _wstethPoolId,\\n      IVault.SwapKind.GIVEN_IN,\\n      // input token as zero address means ETH\\n      IAsset(address(0)),\\n      IAsset(address(_baseToken)),\\n      msg.value,\\n      // keep optional `userData` field empty\\n      \\\"\\\"\\n    );\\n    IVault.FundManagement memory wstethFundingParams = IVault.FundManagement(\\n      address(this),\\n      // false because we are not trading with internal pool balances\\n      false,\\n      /**\\n       * Although the contract is not receiving ETH in this swap, the\\n       * parameter is payable because Balancer allows recipients to receive\\n       * ETH.\\n       */\\n      payable(address(this)),\\n      false\\n    );\\n    uint256 wstethAmount = _wstethVault.swap{value: msg.value}(\\n      wstethSwapParams,\\n      wstethFundingParams,\\n      balancerParams.amountOutMinimum,\\n      balancerParams.deadline\\n    );\\n    require(\\n      _baseToken.balanceOf(address(this)) - wstethBalanceBefore >=\\n        balancerParams.amountOutMinimum,\\n      \\\"Insufficient wstETH from swap\\\"\\n    );\\n    return _collateral.deposit(recipient, wstethAmount, depositData);\\n  }\\n\\n  function _wrapAndDeposit(\\n    address recipient,\\n    OffChainBalancerParams calldata balancerParams\\n  ) internal returns (uint256) {\\n    uint256 wstethBalanceBefore = _baseToken.balanceOf(address(this));\\n    IVault.SingleSwap memory wstethSwapParams = IVault.SingleSwap(\\n      _wstethPoolId,\\n      IVault.SwapKind.GIVEN_IN,\\n      // input token as zero address means ETH\\n      IAsset(address(0)),\\n      IAsset(address(_baseToken)),\\n      msg.value,\\n      // keep optional `userData` field empty\\n      \\\"\\\"\\n    );\\n    IVault.FundManagement memory wstethFundingParams = IVault.FundManagement(\\n      address(this),\\n      // false because we are not trading with internal pool balances\\n      false,\\n      /**\\n       * Although the contract is not receiving ETH in this swap, the\\n       * parameter is payable because Balancer allows recipients to receive\\n       * ETH.\\n       */\\n      payable(address(this)),\\n      false\\n    );\\n    uint256 wstethAmount = _wstethVault.swap{value: msg.value}(\\n      wstethSwapParams,\\n      wstethFundingParams,\\n      balancerParams.amountOutMinimum,\\n      balancerParams.deadline\\n    );\\n    require(\\n      _baseToken.balanceOf(address(this)) - wstethBalanceBefore >=\\n        balancerParams.amountOutMinimum,\\n      \\\"Insufficient wstETH from swap\\\"\\n    );\\n    return _collateral.deposit(recipient, wstethAmount);\\n  }\\n\\n  function _permitAndTransfer(\\n    address funder,\\n    address token,\\n    uint256 amount,\\n    Permit calldata permit\\n  ) internal {\\n    /**\\n     * Because `IERC20Permit` and `IERC20` do not overlap, it is cleaner to\\n     * pass it in as an address and recast it separately when we need to\\n     * access its functions.\\n     */\\n    if (permit.deadline != 0) {\\n      IERC20Permit(token).permit(\\n        funder,\\n        address(this),\\n        type(uint256).max,\\n        permit.deadline,\\n        permit.v,\\n        permit.r,\\n        permit.s\\n      );\\n    }\\n    IERC20(token).transferFrom(funder, address(this), amount);\\n  }\\n\\n  function _sendCollateralFeeAndRebate(\\n    address recipient,\\n    uint256 amountBeforeFee\\n  ) internal returns (uint256 amountAfterFee) {\\n    uint256 fee = (amountBeforeFee * _tradeFeePercent) / PERCENT_UNIT;\\n    amountAfterFee = amountBeforeFee - fee;\\n    if (fee == 0) return amountAfterFee;\\n    _collateral.transfer(_treasury, fee);\\n    if (address(_tokenSender) == address(0)) return amountAfterFee;\\n    uint256 scaledFee = (fee * _accountToAmountMultiplier[address(0)]) /\\n      PERCENT_UNIT;\\n    if (scaledFee == 0) return amountAfterFee;\\n    _tokenSender.send(recipient, scaledFee);\\n  }\\n\\n  function _trade(\\n    address recipient,\\n    address inputToken,\\n    address outputToken,\\n    uint256 inputTokenAmount,\\n    OffChainTradeParams calldata tradeParams\\n  ) internal returns (uint256 outputTokenAmount) {\\n    ISwapRouter.ExactInputSingleParams memory exactInputSingleParams = ISwapRouter\\n      .ExactInputSingleParams(\\n        inputToken,\\n        /**\\n         * Don't use tradeParams.positionToken because calling function might\\n         * have position token as the input rather than the output.\\n         */\\n        outputToken,\\n        POOL_FEE_TIER,\\n        recipient,\\n        tradeParams.deadline,\\n        inputTokenAmount,\\n        tradeParams.amountOutMinimum,\\n        tradeParams.sqrtPriceLimitX96\\n      );\\n    outputTokenAmount = _swapRouter.exactInputSingle(exactInputSingleParams);\\n  }\\n}\\n\",\"keccak256\":\"0xcf0fda3d6c3d528487b45f14f6be4ff1394d52e6146c1e85dcb68676557d1da7\",\"license\":\"AGPL-3.0\"},\"contracts/balancer/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n  // solhint-disable-previous-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0x69d855c34a30b96e7c7a994c0a2a3e8bbcfe12b41d21c9af0a880fd72d5ea1af\",\"license\":\"GPL-3.0-or-later\"},\"contracts/balancer/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IAsset.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Stripped version of `@balancer-labs/v2-interfaces/contracts/vault/IVault.sol`\\n * that only exposes the necessary vault methods for DepositTradeHelper.\\n */\\ninterface IVault {\\n  /**\\n   * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n   * the tokens' `balances` changed.\\n   *\\n   * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n   * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n   *\\n   * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n   * order as passed to `registerTokens`.\\n   *\\n   * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n   * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n   * instead.\\n   */\\n  function getPoolTokens(bytes32 poolId)\\n    external\\n    view\\n    returns (\\n      IERC20[] memory tokens,\\n      uint256[] memory balances,\\n      uint256 lastChangeBlock\\n    );\\n\\n  // Swaps\\n  //\\n  // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n  // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n  // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n  //\\n  // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n  // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n  // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n  // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n  // individual swaps.\\n  //\\n  // There are two swap kinds:\\n  //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n  // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n  //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n  // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n  //\\n  // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n  // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n  // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n  // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n  // the final intended token.\\n  //\\n  // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n  // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n  // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n  // much less gas than they would otherwise.\\n  //\\n  // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n  // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n  // updating the Pool's internal accounting).\\n  //\\n  // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n  // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n  // minimum amount of tokens to receive (by passing a negative value) is specified.\\n  //\\n  // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n  // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n  //\\n  // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n  // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n  // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n  // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n  //\\n  // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n  enum SwapKind {\\n    GIVEN_IN,\\n    GIVEN_OUT\\n  }\\n\\n  /**\\n   * @dev Performs a swap with a single Pool.\\n   *\\n   * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n   * taken from the Pool, which must be greater than or equal to `limit`.\\n   *\\n   * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n   * sent to the Pool, which must be less than or equal to `limit`.\\n   *\\n   * Internal Balance usage and the recipient are determined by the `funds` struct.\\n   *\\n   * Emits a `Swap` event.\\n   */\\n  function swap(\\n    SingleSwap memory singleSwap,\\n    FundManagement memory funds,\\n    uint256 limit,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n\\n  /**\\n   * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n   * the `kind` value.\\n   *\\n   * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n   * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n   *\\n   * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n   * used to extend swap behavior.\\n   */\\n  struct SingleSwap {\\n    bytes32 poolId;\\n    SwapKind kind;\\n    IAsset assetIn;\\n    IAsset assetOut;\\n    uint256 amount;\\n    bytes userData;\\n  }\\n\\n  /**\\n   * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n   * `assets` array passed to that function, and ETH assets are converted to WETH.\\n   *\\n   * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n   * from the previous swap, depending on the swap kind.\\n   *\\n   * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n   * used to extend swap behavior.\\n   */\\n  struct BatchSwapStep {\\n    bytes32 poolId;\\n    uint256 assetInIndex;\\n    uint256 assetOutIndex;\\n    uint256 amount;\\n    bytes userData;\\n  }\\n\\n  /**\\n   * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n   * `recipient` account.\\n   *\\n   * If the caller is not `sender`, it must be an authorized relayer for them.\\n   *\\n   * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n   * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n   * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n   * `joinPool`.\\n   *\\n   * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n   * transferred. This matches the behavior of `exitPool`.\\n   *\\n   * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n   * revert.\\n   */\\n  struct FundManagement {\\n    address sender;\\n    bool fromInternalBalance;\\n    address payable recipient;\\n    bool toInternalBalance;\\n  }\\n\\n  /**\\n   * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\\n   * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\\n   *\\n   * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\n   * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\n   * receives are the same that an equivalent `batchSwap` call would receive.\\n   *\\n   * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\\n   * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\\n   * approve them for the Vault, or even know a user's address.\\n   *\\n   * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\n   * eth_call instead of eth_sendTransaction.\\n   */\\n  function queryBatchSwap(\\n    SwapKind kind,\\n    BatchSwapStep[] memory swaps,\\n    IAsset[] memory assets,\\n    FundManagement memory funds\\n  ) external returns (int256[] memory assetDeltas);\\n}\\n\",\"keccak256\":\"0x9d0122dbf40d75d77e57cb1ba6d3ed48ace8b5651c7edc741cdb1992a44b4180\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ICollateral.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport {IHook} from \\\"./IHook.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {IERC20PermitUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\\\";\\n\\ninterface ICollateral is IERC20Upgradeable, IERC20PermitUpgradeable {\\n  event Deposit(\\n    address indexed funder,\\n    address indexed recipient,\\n    uint256 amountAfterFee,\\n    uint256 fee\\n  );\\n  event DepositFeePercentChange(uint256 percent);\\n  event DepositHookChange(address hook);\\n  event Withdraw(\\n    address indexed funder,\\n    address indexed recipient,\\n    uint256 amountAfterFee,\\n    uint256 fee\\n  );\\n  event WithdrawFeePercentChange(uint256 percent);\\n  event WithdrawHookChange(address hook);\\n\\n  function deposit(\\n    address recipient,\\n    uint256 baseTokenAmount,\\n    bytes calldata data\\n  ) external returns (uint256 collateralMintAmount);\\n\\n  function deposit(address recipient, uint256 baseTokenAmount)\\n    external\\n    returns (uint256 collateralMintAmount);\\n\\n  function withdraw(\\n    address recipient,\\n    uint256 collateralAmount,\\n    bytes calldata data\\n  ) external returns (uint256 baseTokenAmountAfterFee);\\n\\n  function withdraw(address recipient, uint256 collateralAmount)\\n    external\\n    returns (uint256 baseTokenAmountAfterFee);\\n\\n  function setDepositFeePercent(uint256 depositFeePercent) external;\\n\\n  function setWithdrawFeePercent(uint256 withdrawFeePercent) external;\\n\\n  function setDepositHook(IHook hook) external;\\n\\n  function setWithdrawHook(IHook hook) external;\\n\\n  function getBaseToken() external view returns (IERC20);\\n\\n  function getDepositFeePercent() external view returns (uint256);\\n\\n  function getWithdrawFeePercent() external view returns (uint256);\\n\\n  function getDepositHook() external view returns (IHook);\\n\\n  function getWithdrawHook() external view returns (IHook);\\n\\n  function getBaseTokenBalance() external view returns (uint256);\\n\\n  function PERCENT_UNIT() external view returns (uint256);\\n\\n  function FEE_LIMIT() external view returns (uint256);\\n\\n  function SET_DEPOSIT_FEE_PERCENT_ROLE() external view returns (bytes32);\\n\\n  function SET_WITHDRAW_FEE_PERCENT_ROLE() external view returns (bytes32);\\n\\n  function SET_DEPOSIT_HOOK_ROLE() external view returns (bytes32);\\n\\n  function SET_WITHDRAW_HOOK_ROLE() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x7f1d53124f4a2ad55999d34e3af6030ff72cd0045883edca3fa60b0a8d5a1341\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IDepositTradeHelper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport {ICollateral, IERC20} from \\\"./ICollateral.sol\\\";\\nimport {IAsset, IVault} from \\\"../balancer/IVault.sol\\\";\\nimport {ISwapRouter} from \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\n\\ninterface IDepositTradeHelper {\\n  struct Permit {\\n    uint256 deadline;\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n\\n  struct OffChainBalancerParams {\\n    uint256 amountOutMinimum;\\n    uint256 deadline;\\n  }\\n\\n  struct OffChainTradeParams {\\n    address positionToken;\\n    uint256 deadline;\\n    uint256 amountOutMinimum;\\n    uint160 sqrtPriceLimitX96;\\n  }\\n\\n  event TradeFeePercentChange(uint256 percent);\\n  event WstethPoolIdChange(bytes32 wstethPoolId);\\n\\n  function wrapAndDeposit(\\n    address recipient,\\n    bytes calldata depositData,\\n    OffChainBalancerParams calldata balancerParams\\n  ) external payable;\\n\\n  function wrapAndDeposit(\\n    address recipient,\\n    OffChainBalancerParams calldata balancerParams\\n  ) external payable;\\n\\n  function tradeForPosition(\\n    address recipient,\\n    uint256 collateralAmount,\\n    Permit calldata collateralPermit,\\n    OffChainTradeParams calldata tradeParams\\n  ) external;\\n\\n  function tradeForCollateral(\\n    address recipient,\\n    uint256 positionAmount,\\n    Permit calldata positionPermit,\\n    OffChainTradeParams calldata tradeParams\\n  ) external;\\n\\n  function wrapAndDepositAndTrade(\\n    address recipient,\\n    bytes calldata depositData,\\n    OffChainBalancerParams calldata balancerParams,\\n    Permit calldata collateralPermit,\\n    OffChainTradeParams calldata tradeParams\\n  ) external payable;\\n\\n  function wrapAndDepositAndTrade(\\n    address recipient,\\n    OffChainBalancerParams calldata balancerParams,\\n    Permit calldata collateralPermit,\\n    OffChainTradeParams calldata tradeParams\\n  ) external payable;\\n\\n  function withdrawAndUnwrap(\\n    address recipient,\\n    uint256 amount,\\n    bytes calldata withdrawData,\\n    Permit calldata collateralPermit,\\n    OffChainBalancerParams calldata balancerParams\\n  ) external;\\n\\n  function withdrawAndUnwrap(\\n    address recipient,\\n    uint256 amount,\\n    Permit calldata collateralPermit,\\n    OffChainBalancerParams calldata balancerParams\\n  ) external;\\n\\n  function setWstethPoolId(bytes32 wstethPoolId) external;\\n\\n  function setTradeFeePercent(uint256 tradeFeePercent) external;\\n\\n  function getBaseToken() external view returns (IERC20);\\n\\n  function getCollateral() external view returns (ICollateral);\\n\\n  function getSwapRouter() external view returns (ISwapRouter);\\n\\n  function getWstethVault() external view returns (IVault);\\n\\n  function getWstethPoolId() external view returns (bytes32);\\n\\n  function getTradeFeePercent() external view returns (uint256);\\n\\n  function POOL_FEE_TIER() external view returns (uint24);\\n}\\n\",\"keccak256\":\"0xae45ccabc0b05f3b98a6863359a60900eb8a1db494786ce75db68fe4d42298cf\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IHook.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\ninterface IHook {\\n  function hook(\\n    address funder,\\n    address recipient,\\n    uint256 amountBeforeFee,\\n    uint256 amountAfterFee,\\n    bytes calldata data\\n  ) external;\\n\\n  function hook(\\n    address funder,\\n    address recipient,\\n    uint256 amountBeforeFee,\\n    uint256 amountAfterFee\\n  ) external;\\n}\\n\",\"keccak256\":\"0xdd1acf7bbb8e8ef46cc9c0b6e810e2ef07e7a46e3d4475396c3cd61298d81ed7\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/SafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ISafeOwnable} from \\\"./interfaces/ISafeOwnable.sol\\\";\\n\\ncontract SafeOwnable is ISafeOwnable, Ownable {\\n  address private _nominee;\\n\\n  modifier onlyNominee() {\\n    require(_msgSender() == _nominee, \\\"msg.sender != nominee\\\");\\n    _;\\n  }\\n\\n  function transferOwnership(address nominee)\\n    public\\n    virtual\\n    override(ISafeOwnable, Ownable)\\n    onlyOwner\\n  {\\n    _setNominee(nominee);\\n  }\\n\\n  function acceptOwnership() public virtual override onlyNominee {\\n    _transferOwnership(_nominee);\\n    _setNominee(address(0));\\n  }\\n\\n  function renounceOwnership()\\n    public\\n    virtual\\n    override(ISafeOwnable, Ownable)\\n    onlyOwner\\n  {\\n    super.renounceOwnership();\\n    _setNominee(address(0));\\n  }\\n\\n  function getNominee() public view virtual override returns (address) {\\n    return _nominee;\\n  }\\n\\n  function _setNominee(address nominee) internal virtual {\\n    address _oldNominee = _nominee;\\n    _nominee = nominee;\\n    emit NomineeUpdate(_oldNominee, nominee);\\n  }\\n}\\n\",\"keccak256\":\"0x14ff6ff98a27878ff8bcdda000dfbb07bb7e743cb08ceee6251455b2531c27eb\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/TokenSenderCaller.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport {ITokenSender, ITokenSenderCaller} from \\\"./interfaces/ITokenSenderCaller.sol\\\";\\n\\ncontract TokenSenderCaller is ITokenSenderCaller {\\n  mapping(address => uint256) internal _accountToAmountMultiplier;\\n  ITokenSender internal _tokenSender;\\n\\n  uint256 public constant override PERCENT_UNIT = 1000000;\\n\\n  function setAmountMultiplier(address account, uint256 amountMultiplier)\\n    public\\n    virtual\\n    override\\n  {\\n    _accountToAmountMultiplier[account] = amountMultiplier;\\n    emit AmountMultiplierChange(account, amountMultiplier);\\n  }\\n\\n  function setTokenSender(ITokenSender tokenSender) public virtual override {\\n    _tokenSender = tokenSender;\\n    emit TokenSenderChange(address(tokenSender));\\n  }\\n\\n  function getAmountMultiplier(address account)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return _accountToAmountMultiplier[account];\\n  }\\n\\n  function getTokenSender() external view override returns (ITokenSender) {\\n    return _tokenSender;\\n  }\\n}\\n\",\"keccak256\":\"0xc4b31986b032f6826aa93451e28ccc32af8beba0c958d17dd7bbc7585959e579\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/TreasuryCaller.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport {ITreasuryCaller} from \\\"./interfaces/ITreasuryCaller.sol\\\";\\n\\ncontract TreasuryCaller is ITreasuryCaller {\\n  address internal _treasury;\\n\\n  function setTreasury(address treasury) public virtual override {\\n    _treasury = treasury;\\n    emit TreasuryChange(treasury);\\n  }\\n\\n  function getTreasury() external view override returns (address) {\\n    return _treasury;\\n  }\\n}\\n\",\"keccak256\":\"0x8486d46e9980a77cb64674fc43052d0d750cbd6d60f3946cf842616a09c518d7\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/ISafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\n/**\\n * @notice An extension of OpenZeppelin's `Ownable.sol` contract that requires\\n * an address to be nominated, and then accept that nomination, before\\n * ownership is transferred.\\n */\\ninterface ISafeOwnable {\\n  /**\\n   * @dev Emitted via `transferOwnership()`.\\n   * @param previousNominee The previous nominee\\n   * @param newNominee The new nominee\\n   */\\n  event NomineeUpdate(\\n    address indexed previousNominee,\\n    address indexed newNominee\\n  );\\n\\n  /**\\n   * @notice Nominates an address to be owner of the contract.\\n   * @dev Only callable by `owner()`.\\n   * @param nominee The address that will be nominated\\n   */\\n  function transferOwnership(address nominee) external;\\n\\n  /**\\n   * @notice Renounces ownership of contract and leaves the contract\\n   * without any owner.\\n   * @dev Only callable by `owner()`.\\n   * Sets nominee back to zero address.\\n   * It will not be possible to call `onlyOwner` functions anymore.\\n   */\\n  function renounceOwnership() external;\\n\\n  /**\\n   * @notice Accepts ownership nomination.\\n   * @dev Only callable by the current nominee. Sets nominee back to zero\\n   * address.\\n   */\\n  function acceptOwnership() external;\\n\\n  /// @return The current nominee\\n  function getNominee() external view returns (address);\\n}\\n\",\"keccak256\":\"0x50f8ea0098b1205f0e346f320aed8ea83d2de8fcbf08264b2e4fcefcc25c7780\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/ITokenSender.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport {IUintValue} from \\\"./IUintValue.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITokenSender {\\n  event PriceLowerBoundChange(uint256 price);\\n  event PriceOracleChange(IUintValue oracle);\\n\\n  function send(address recipient, uint256 inputAmount) external;\\n\\n  function setPriceOracle(IUintValue priceOracle) external;\\n\\n  function setPriceLowerBound(uint256 priceLowerBound) external;\\n\\n  function getOutputToken() external view returns (IERC20);\\n\\n  function getPriceOracle() external view returns (IUintValue);\\n\\n  function getPriceLowerBound() external view returns (uint256);\\n\\n  function SET_PRICE_ORACLE_ROLE() external view returns (bytes32);\\n\\n  function SET_PRICE_LOWER_BOUND_ROLE() external view returns (bytes32);\\n\\n  function SET_ALLOWED_MSG_SENDERS_ROLE() external view returns (bytes32);\\n\\n  function SET_ACCOUNT_LIMIT_RESET_PERIOD_ROLE()\\n    external\\n    view\\n    returns (bytes32);\\n\\n  function SET_ACCOUNT_LIMIT_PER_PERIOD_ROLE() external view returns (bytes32);\\n\\n  function WITHDRAW_ERC20_ROLE() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6315399dfe5c5f66d7ac347dd84384de49af8eb16845198a724f95fd9e32301d\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/ITokenSenderCaller.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport {ITokenSender} from \\\"./ITokenSender.sol\\\";\\n\\ninterface ITokenSenderCaller {\\n  event AmountMultiplierChange(address account, uint256 multiplier);\\n  event TokenSenderChange(address sender);\\n\\n  error InvalidAccount();\\n\\n  function setTokenSender(ITokenSender tokenSender) external;\\n\\n  function setAmountMultiplier(address account, uint256 amountMultiplier)\\n    external;\\n\\n  function getTokenSender() external view returns (ITokenSender);\\n\\n  function getAmountMultiplier(address account)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function PERCENT_UNIT() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5bfed1327d30775423894ee1cd2397ffcb03a00b766b4511d88716592eeb327f\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/ITreasuryCaller.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\ninterface ITreasuryCaller {\\n  event TreasuryChange(address treasury);\\n\\n  function setTreasury(address treasury) external;\\n\\n  function getTreasury() external view returns (address);\\n}\\n\",\"keccak256\":\"0x6d1176165dbbe16bcc55c8b9848cd3a65d40ce58ff3518d6cb57fb8b9f6bd57d\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/IUintValue.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\ninterface IUintValue {\\n  function get() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1b1ba9466eab57f66aa255fd76b50419656b37a4f8fa0ea73d7e0488fd7c45fc\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "Only callable by the current nominee. Sets nominee back to zero address."
      },
      "getNominee()": {
        "returns": {
          "_0": "The current nominee"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "wrapAndDeposit(address,bytes,(uint256,uint256))": {
        "details": "Assumes `_baseToken` is WstETH"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Accepts ownership nomination."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5045,
        "contract": "contracts/DepositTradeHelper.sol:DepositTradeHelper",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4929,
        "contract": "contracts/DepositTradeHelper.sol:DepositTradeHelper",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 17143,
        "contract": "contracts/DepositTradeHelper.sol:DepositTradeHelper",
        "label": "_nominee",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 17249,
        "contract": "contracts/DepositTradeHelper.sol:DepositTradeHelper",
        "label": "_accountToAmountMultiplier",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17252,
        "contract": "contracts/DepositTradeHelper.sol:DepositTradeHelper",
        "label": "_tokenSender",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ITokenSender)17843"
      },
      {
        "astId": 17327,
        "contract": "contracts/DepositTradeHelper.sol:DepositTradeHelper",
        "label": "_treasury",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 11175,
        "contract": "contracts/DepositTradeHelper.sol:DepositTradeHelper",
        "label": "_wstethPoolId",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 11177,
        "contract": "contracts/DepositTradeHelper.sol:DepositTradeHelper",
        "label": "_tradeFeePercent",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ITokenSender)17843": {
        "encoding": "inplace",
        "label": "contract ITokenSender",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
