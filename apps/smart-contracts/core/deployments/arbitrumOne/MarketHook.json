{
  "address": "0xD393D855F0A11F7fA6C0673D1667ddA6df97D35b",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IAccountList",
          "name": "accountList",
          "type": "address"
        }
      ],
      "name": "AccountListChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        }
      ],
      "name": "AmountMultiplierChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousNominee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newNominee",
          "type": "address"
        }
      ],
      "name": "NomineeUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "TokenSenderChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "TreasuryChange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PERCENT_UNIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAccountList",
      "outputs": [
        {
          "internalType": "contract IAccountList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAmountMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNominee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenSender",
      "outputs": [
        {
          "internalType": "contract ITokenSender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountBeforeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAfterFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "hook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountBeforeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAfterFee",
          "type": "uint256"
        }
      ],
      "name": "hook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAccountList",
          "name": "accountList",
          "type": "address"
        }
      ],
      "name": "setAccountList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountMultiplier",
          "type": "uint256"
        }
      ],
      "name": "setAmountMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITokenSender",
          "name": "tokenSender",
          "type": "address"
        }
      ],
      "name": "setTokenSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nominee",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbc824128d59ad1b006c2138fd23999d373d6c5f3ffca67a49fbb5b22502b9ce3",
  "receipt": {
    "to": null,
    "from": "0x4F05Cf239a8BC2bfdA92673bC3c8a87E091b6D97",
    "contractAddress": "0xD393D855F0A11F7fA6C0673D1667ddA6df97D35b",
    "transactionIndex": 3,
    "gasUsed": "4253687",
    "logsBloom": "0x
    "blockHash": "0x83c6f9f7d57b07e82ef788edf3bb3b73dfa0fc7649c3afd3778bfc8ec1617460",
    "transactionHash": "0xbc824128d59ad1b006c2138fd23999d373d6c5f3ffca67a49fbb5b22502b9ce3",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 100615898,
        "transactionHash": "0xbc824128d59ad1b006c2138fd23999d373d6c5f3ffca67a49fbb5b22502b9ce3",
        "address": "0xD393D855F0A11F7fA6C0673D1667ddA6df97D35b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004f05cf239a8bc2bfda92673bc3c8a87e091b6d97"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x83c6f9f7d57b07e82ef788edf3bb3b73dfa0fc7649c3afd3778bfc8ec1617460"
      }
    ],
    "blockNumber": 100615898,
    "cumulativeGasUsed": "7035320",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dde47185ae02100f3d165e5732653ea8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IAccountList\",\"name\":\"accountList\",\"type\":\"address\"}],\"name\":\"AccountListChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"AmountMultiplierChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousNominee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newNominee\",\"type\":\"address\"}],\"name\":\"NomineeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"TokenSenderChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasuryChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENT_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccountList\",\"outputs\":[{\"internalType\":\"contract IAccountList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAmountMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNominee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenSender\",\"outputs\":[{\"internalType\":\"contract ITokenSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountBeforeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAfterFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"hook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountBeforeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAfterFee\",\"type\":\"uint256\"}],\"name\":\"hook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAccountList\",\"name\":\"accountList\",\"type\":\"address\"}],\"name\":\"setAccountList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMultiplier\",\"type\":\"uint256\"}],\"name\":\"setAmountMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITokenSender\",\"name\":\"tokenSender\",\"type\":\"address\"}],\"name\":\"setTokenSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nominee\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"Only callable by the current nominee. Sets nominee back to zero address.\"},\"getNominee()\":{\"returns\":{\"_0\":\"The current nominee\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Accepts ownership nomination.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MarketHook.sol\":\"MarketHook\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/MarketHook.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport {IHook} from \\\"./interfaces/IHook.sol\\\";\\nimport {IPrePOMarket} from \\\"./interfaces/IPrePOMarket.sol\\\";\\nimport {IAccountList, AccountListCaller} from \\\"prepo-shared-contracts/contracts/AccountListCaller.sol\\\";\\nimport {AllowedMsgSenders} from \\\"prepo-shared-contracts/contracts/AllowedMsgSenders.sol\\\";\\nimport {SafeOwnable} from \\\"prepo-shared-contracts/contracts/SafeOwnable.sol\\\";\\nimport {ITokenSender, TokenSenderCaller} from \\\"prepo-shared-contracts/contracts/TokenSenderCaller.sol\\\";\\nimport {TreasuryCaller} from \\\"prepo-shared-contracts/contracts/TreasuryCaller.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract MarketHook is\\n  IHook,\\n  AccountListCaller,\\n  ReentrancyGuard,\\n  SafeOwnable,\\n  TokenSenderCaller,\\n  TreasuryCaller\\n{\\n  function hook(\\n    address funder,\\n    address recipient,\\n    uint256 amountBeforeFee,\\n    uint256 amountAfterFee,\\n    bytes calldata\\n  ) external virtual override nonReentrant {\\n    if (address(_accountList) != address(0) && _accountList.isIncluded(funder))\\n      return;\\n    uint256 fee = amountBeforeFee - amountAfterFee;\\n    if (fee == 0) return;\\n    IPrePOMarket(msg.sender).getCollateral().transferFrom(\\n      msg.sender,\\n      _treasury,\\n      fee\\n    );\\n    if (address(_tokenSender) == address(0)) return;\\n    uint256 scaledFee = (fee * _accountToAmountMultiplier[msg.sender]) /\\n      PERCENT_UNIT;\\n    if (scaledFee == 0) return;\\n    _tokenSender.send(recipient, scaledFee);\\n  }\\n\\n  function hook(\\n    address funder,\\n    address recipient,\\n    uint256 amountBeforeFee,\\n    uint256 amountAfterFee\\n  ) external virtual override nonReentrant {\\n    if (address(_accountList) != address(0) && _accountList.isIncluded(funder))\\n      return;\\n    uint256 fee = amountBeforeFee - amountAfterFee;\\n    if (fee == 0) return;\\n    IPrePOMarket(msg.sender).getCollateral().transferFrom(\\n      msg.sender,\\n      _treasury,\\n      fee\\n    );\\n    if (address(_tokenSender) == address(0)) return;\\n    uint256 scaledFee = (fee * _accountToAmountMultiplier[msg.sender]) /\\n      PERCENT_UNIT;\\n    if (scaledFee == 0) return;\\n    _tokenSender.send(recipient, scaledFee);\\n  }\\n\\n  function setAccountList(IAccountList accountList)\\n    public\\n    virtual\\n    override\\n    onlyOwner\\n  {\\n    super.setAccountList(accountList);\\n  }\\n\\n  function setTreasury(address _treasury) public override onlyOwner {\\n    super.setTreasury(_treasury);\\n  }\\n\\n  function setAmountMultiplier(address account, uint256 amountMultiplier)\\n    public\\n    override\\n    onlyOwner\\n  {\\n    super.setAmountMultiplier(account, amountMultiplier);\\n  }\\n\\n  function setTokenSender(ITokenSender tokenSender) public override onlyOwner {\\n    super.setTokenSender(tokenSender);\\n  }\\n}\\n\",\"keccak256\":\"0x1fea4568ffb847fcd19f0fb044c1b7a3253f43cd2ccb359283c4e51f40c153c3\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ICollateral.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport {IHook} from \\\"./IHook.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {IERC20PermitUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\\\";\\n\\ninterface ICollateral is IERC20Upgradeable, IERC20PermitUpgradeable {\\n  event Deposit(\\n    address indexed funder,\\n    address indexed recipient,\\n    uint256 amountAfterFee,\\n    uint256 fee\\n  );\\n  event DepositFeePercentChange(uint256 percent);\\n  event DepositHookChange(address hook);\\n  event Withdraw(\\n    address indexed funder,\\n    address indexed recipient,\\n    uint256 amountAfterFee,\\n    uint256 fee\\n  );\\n  event WithdrawFeePercentChange(uint256 percent);\\n  event WithdrawHookChange(address hook);\\n\\n  function deposit(\\n    address recipient,\\n    uint256 baseTokenAmount,\\n    bytes calldata data\\n  ) external returns (uint256 collateralMintAmount);\\n\\n  function deposit(address recipient, uint256 baseTokenAmount)\\n    external\\n    returns (uint256 collateralMintAmount);\\n\\n  function withdraw(\\n    address recipient,\\n    uint256 collateralAmount,\\n    bytes calldata data\\n  ) external returns (uint256 baseTokenAmountAfterFee);\\n\\n  function withdraw(address recipient, uint256 collateralAmount)\\n    external\\n    returns (uint256 baseTokenAmountAfterFee);\\n\\n  function setDepositFeePercent(uint256 depositFeePercent) external;\\n\\n  function setWithdrawFeePercent(uint256 withdrawFeePercent) external;\\n\\n  function setDepositHook(IHook hook) external;\\n\\n  function setWithdrawHook(IHook hook) external;\\n\\n  function getBaseToken() external view returns (IERC20);\\n\\n  function getDepositFeePercent() external view returns (uint256);\\n\\n  function getWithdrawFeePercent() external view returns (uint256);\\n\\n  function getDepositHook() external view returns (IHook);\\n\\n  function getWithdrawHook() external view returns (IHook);\\n\\n  function getBaseTokenBalance() external view returns (uint256);\\n\\n  function PERCENT_UNIT() external view returns (uint256);\\n\\n  function FEE_LIMIT() external view returns (uint256);\\n\\n  function SET_DEPOSIT_FEE_PERCENT_ROLE() external view returns (bytes32);\\n\\n  function SET_WITHDRAW_FEE_PERCENT_ROLE() external view returns (bytes32);\\n\\n  function SET_DEPOSIT_HOOK_ROLE() external view returns (bytes32);\\n\\n  function SET_WITHDRAW_HOOK_ROLE() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x7f1d53124f4a2ad55999d34e3af6030ff72cd0045883edca3fa60b0a8d5a1341\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IHook.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\ninterface IHook {\\n  function hook(\\n    address funder,\\n    address recipient,\\n    uint256 amountBeforeFee,\\n    uint256 amountAfterFee,\\n    bytes calldata data\\n  ) external;\\n\\n  function hook(\\n    address funder,\\n    address recipient,\\n    uint256 amountBeforeFee,\\n    uint256 amountAfterFee\\n  ) external;\\n}\\n\",\"keccak256\":\"0xdd1acf7bbb8e8ef46cc9c0b6e810e2ef07e7a46e3d4475396c3cd61298d81ed7\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ILongShortToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.7;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ILongShortToken is IERC20 {\\n  function owner() external returns (address);\\n\\n  function mint(address recipient, uint256 amount) external;\\n\\n  function burnFrom(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x098486f2585b5a0581444470a8dd7b4cf0b4ad834622516e2ceb9ac3f4700618\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPrePOMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.7;\\n\\nimport {ICollateral} from \\\"./ICollateral.sol\\\";\\nimport {IERC20, ILongShortToken} from \\\"./ILongShortToken.sol\\\";\\nimport {IAddressBeacon} from \\\"prepo-shared-contracts/contracts/interfaces/IAddressBeacon.sol\\\";\\nimport {IUintBeacon} from \\\"prepo-shared-contracts/contracts/interfaces/IUintBeacon.sol\\\";\\n\\ninterface IPrePOMarket {\\n  struct MarketParameters {\\n    address collateral;\\n    uint256 floorLongPayout;\\n    uint256 ceilingLongPayout;\\n    uint256 expiryLongPayout;\\n    uint256 floorValuation;\\n    uint256 ceilingValuation;\\n    uint256 expiryTime;\\n  }\\n\\n  struct Permit {\\n    uint256 deadline;\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n\\n  event AddressBeaconChange(address beacon);\\n  event FinalLongPayoutSet(uint256 payout);\\n  event Mint(\\n    address indexed funder,\\n    address indexed recipient,\\n    uint256 amountAfterFee,\\n    uint256 fee\\n  );\\n  event Redemption(\\n    address indexed funder,\\n    address indexed recipient,\\n    uint256 amountAfterFee,\\n    uint256 fee\\n  );\\n  event UintBeaconChange(address beacon);\\n\\n  error CeilingNotAboveFloor();\\n  error CeilingTooHigh();\\n  error ExpiryInPast();\\n  error ExpiryNotPassed();\\n  error FeePercentTooHigh();\\n  error FeeRoundsToZero();\\n  error FinalPayoutTooHigh();\\n  error FinalPayoutTooLow();\\n  error InsufficientCollateral();\\n  error InsufficientLongToken();\\n  error InsufficientShortToken();\\n  error MarketEnded();\\n  error UnequalRedemption();\\n  error ZeroCollateralAmount();\\n\\n  function mint(\\n    uint256 amount,\\n    address recipient,\\n    bytes calldata data\\n  ) external returns (uint256);\\n\\n  function permitAndMint(\\n    Permit calldata permit,\\n    uint256 collateralAmount,\\n    address recipient,\\n    bytes calldata data\\n  ) external returns (uint256);\\n\\n  function redeem(\\n    uint256 longAmount,\\n    uint256 shortAmount,\\n    address recipient,\\n    bytes calldata data\\n  ) external;\\n\\n  function setFinalLongPayout(uint256 finalLongPayout) external;\\n\\n  function setFinalLongPayoutAfterExpiry() external;\\n\\n  function getLongToken() external view returns (ILongShortToken);\\n\\n  function getShortToken() external view returns (ILongShortToken);\\n\\n  function getAddressBeacon() external view returns (IAddressBeacon);\\n\\n  function getUintBeacon() external view returns (IUintBeacon);\\n\\n  function getCollateral() external view returns (ICollateral);\\n\\n  function getFloorLongPayout() external view returns (uint256);\\n\\n  function getCeilingLongPayout() external view returns (uint256);\\n\\n  function getExpiryLongPayout() external view returns (uint256);\\n\\n  function getFinalLongPayout() external view returns (uint256);\\n\\n  function getFloorValuation() external view returns (uint256);\\n\\n  function getCeilingValuation() external view returns (uint256);\\n\\n  function getExpiryTime() external view returns (uint256);\\n\\n  function getFeePercent(bytes32 feeKey) external view returns (uint256);\\n\\n  function PERCENT_UNIT() external view returns (uint256);\\n\\n  function FEE_LIMIT() external view returns (uint256);\\n\\n  function SET_FINAL_LONG_PAYOUT_ROLE() external view returns (bytes32);\\n\\n  function MINT_HOOK_KEY() external view returns (bytes32);\\n\\n  function REDEEM_HOOK_KEY() external view returns (bytes32);\\n\\n  function MINT_FEE_PERCENT_KEY() external view returns (bytes32);\\n\\n  function REDEEM_FEE_PERCENT_KEY() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x96481c8ccb9eb8a9bbd3f2289597b9f5201c5b85d543d96cf01b543115cd5ab8\",\"license\":\"GPL-3.0\"},\"prepo-shared-contracts/contracts/AccountListCaller.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport {IAccountList, IAccountListCaller} from \\\"./interfaces/IAccountListCaller.sol\\\";\\n\\ncontract AccountListCaller is IAccountListCaller {\\n  IAccountList internal _accountList;\\n\\n  function setAccountList(IAccountList accountList) public virtual override {\\n    _accountList = accountList;\\n    emit AccountListChange(accountList);\\n  }\\n\\n  function getAccountList() external view override returns (IAccountList) {\\n    return _accountList;\\n  }\\n}\\n\",\"keccak256\":\"0x52d088841c0677d91b190998b41d2bb4c2778c1bc75723324123ebdd021e6362\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/AllowedMsgSenders.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport {IAccountList, IAllowedMsgSenders} from \\\"./interfaces/IAllowedMsgSenders.sol\\\";\\n\\ncontract AllowedMsgSenders is IAllowedMsgSenders {\\n  IAccountList private _allowedMsgSenders;\\n\\n  modifier onlyAllowedMsgSenders() {\\n    if (!_allowedMsgSenders.isIncluded(msg.sender))\\n      revert MsgSenderNotAllowed();\\n    _;\\n  }\\n\\n  function setAllowedMsgSenders(IAccountList allowedMsgSenders)\\n    public\\n    virtual\\n    override\\n  {\\n    _allowedMsgSenders = allowedMsgSenders;\\n    emit AllowedMsgSendersChange(allowedMsgSenders);\\n  }\\n\\n  function getAllowedMsgSenders()\\n    external\\n    view\\n    virtual\\n    override\\n    returns (IAccountList)\\n  {\\n    return _allowedMsgSenders;\\n  }\\n}\\n\",\"keccak256\":\"0xc8881e4a65bd77becfa57cccbdb2daf30e5029bfb318b1132a0161a9deffb536\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/SafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ISafeOwnable} from \\\"./interfaces/ISafeOwnable.sol\\\";\\n\\ncontract SafeOwnable is ISafeOwnable, Ownable {\\n  address private _nominee;\\n\\n  modifier onlyNominee() {\\n    require(_msgSender() == _nominee, \\\"msg.sender != nominee\\\");\\n    _;\\n  }\\n\\n  function transferOwnership(address nominee)\\n    public\\n    virtual\\n    override(ISafeOwnable, Ownable)\\n    onlyOwner\\n  {\\n    _setNominee(nominee);\\n  }\\n\\n  function acceptOwnership() public virtual override onlyNominee {\\n    _transferOwnership(_nominee);\\n    _setNominee(address(0));\\n  }\\n\\n  function renounceOwnership()\\n    public\\n    virtual\\n    override(ISafeOwnable, Ownable)\\n    onlyOwner\\n  {\\n    super.renounceOwnership();\\n    _setNominee(address(0));\\n  }\\n\\n  function getNominee() public view virtual override returns (address) {\\n    return _nominee;\\n  }\\n\\n  function _setNominee(address nominee) internal virtual {\\n    address _oldNominee = _nominee;\\n    _nominee = nominee;\\n    emit NomineeUpdate(_oldNominee, nominee);\\n  }\\n}\\n\",\"keccak256\":\"0x14ff6ff98a27878ff8bcdda000dfbb07bb7e743cb08ceee6251455b2531c27eb\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/TokenSenderCaller.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport {ITokenSender, ITokenSenderCaller} from \\\"./interfaces/ITokenSenderCaller.sol\\\";\\n\\ncontract TokenSenderCaller is ITokenSenderCaller {\\n  mapping(address => uint256) internal _accountToAmountMultiplier;\\n  ITokenSender internal _tokenSender;\\n\\n  uint256 public constant override PERCENT_UNIT = 1000000;\\n\\n  function setAmountMultiplier(address account, uint256 amountMultiplier)\\n    public\\n    virtual\\n    override\\n  {\\n    _accountToAmountMultiplier[account] = amountMultiplier;\\n    emit AmountMultiplierChange(account, amountMultiplier);\\n  }\\n\\n  function setTokenSender(ITokenSender tokenSender) public virtual override {\\n    _tokenSender = tokenSender;\\n    emit TokenSenderChange(address(tokenSender));\\n  }\\n\\n  function getAmountMultiplier(address account)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return _accountToAmountMultiplier[account];\\n  }\\n\\n  function getTokenSender() external view override returns (ITokenSender) {\\n    return _tokenSender;\\n  }\\n}\\n\",\"keccak256\":\"0xc4b31986b032f6826aa93451e28ccc32af8beba0c958d17dd7bbc7585959e579\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/TreasuryCaller.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport {ITreasuryCaller} from \\\"./interfaces/ITreasuryCaller.sol\\\";\\n\\ncontract TreasuryCaller is ITreasuryCaller {\\n  address internal _treasury;\\n\\n  function setTreasury(address treasury) public virtual override {\\n    _treasury = treasury;\\n    emit TreasuryChange(treasury);\\n  }\\n\\n  function getTreasury() external view override returns (address) {\\n    return _treasury;\\n  }\\n}\\n\",\"keccak256\":\"0x8486d46e9980a77cb64674fc43052d0d750cbd6d60f3946cf842616a09c518d7\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/IAccountList.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\n/**\\n * @notice Stores whether an address is included in a set.\\n */\\ninterface IAccountList {\\n  event AccountListChange(address[] accounts, bool[] included);\\n  event AccountListReset();\\n\\n  error ArrayLengthMismatch();\\n\\n  /**\\n   * @notice Sets whether an address in `accounts` is included.\\n   * @dev Whether an account is included is based on the boolean value at its\\n   * respective index in `included`. This function will only edit the\\n   * inclusion of addresses in `accounts`.\\n   *\\n   * The length of `accounts` and `included` must match.\\n   *\\n   * Only callable by `owner()`.\\n   * @param accounts Addresses to change inclusion for\\n   * @param included Whether to include corresponding address in `accounts`\\n   */\\n  function set(address[] calldata accounts, bool[] calldata included) external;\\n\\n  /**\\n   * @notice Removes every address from the set.\\n   * @dev Only callable by `owner()`.\\n   */\\n  function reset() external;\\n\\n  /**\\n   * @param account Address to check inclusion for\\n   * @return Whether `account` is included\\n   */\\n  function isIncluded(address account) external view returns (bool);\\n\\n  function getAccountAndInclusion(uint256 index)\\n    external\\n    view\\n    returns (address account, bool included);\\n\\n  function getAccountListLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5e7789b3d4293d341c43a3a22382883d6d9355b08757185dc403cbd0a72c7d75\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/IAccountListCaller.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport {IAccountList} from \\\"./IAccountList.sol\\\";\\n\\ninterface IAccountListCaller {\\n  event AccountListChange(IAccountList accountList);\\n\\n  function setAccountList(IAccountList accountList) external;\\n\\n  function getAccountList() external view returns (IAccountList);\\n}\\n\",\"keccak256\":\"0x50d9e99915413867ef326ccd73731ee91881d8545e3eb14c8e3667cc37a54c77\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/IAddressBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\ninterface IAddressBeacon {\\n  event AddressChange(bytes32 key, address addr);\\n\\n  function set(bytes32 key, address addr) external;\\n\\n  function get(bytes32 key) external view returns (address);\\n}\\n\",\"keccak256\":\"0x6e0adbfc873cd477b776ecdf05fe49075b8443369ad0cfbf1f01d7666c131bc0\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/IAllowedMsgSenders.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport {IAccountList} from \\\"./IAccountList.sol\\\";\\n\\ninterface IAllowedMsgSenders {\\n  event AllowedMsgSendersChange(IAccountList allowedMsgSenders);\\n  error MsgSenderNotAllowed();\\n\\n  function setAllowedMsgSenders(IAccountList allowedMsgSenders) external;\\n\\n  function getAllowedMsgSenders() external view returns (IAccountList);\\n}\\n\",\"keccak256\":\"0x678e0468d0378fdbb9a7a52682b3e3a264a75f22ac612be32538721ce93e1a78\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/ISafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\n/**\\n * @notice An extension of OpenZeppelin's `Ownable.sol` contract that requires\\n * an address to be nominated, and then accept that nomination, before\\n * ownership is transferred.\\n */\\ninterface ISafeOwnable {\\n  /**\\n   * @dev Emitted via `transferOwnership()`.\\n   * @param previousNominee The previous nominee\\n   * @param newNominee The new nominee\\n   */\\n  event NomineeUpdate(\\n    address indexed previousNominee,\\n    address indexed newNominee\\n  );\\n\\n  /**\\n   * @notice Nominates an address to be owner of the contract.\\n   * @dev Only callable by `owner()`.\\n   * @param nominee The address that will be nominated\\n   */\\n  function transferOwnership(address nominee) external;\\n\\n  /**\\n   * @notice Renounces ownership of contract and leaves the contract\\n   * without any owner.\\n   * @dev Only callable by `owner()`.\\n   * Sets nominee back to zero address.\\n   * It will not be possible to call `onlyOwner` functions anymore.\\n   */\\n  function renounceOwnership() external;\\n\\n  /**\\n   * @notice Accepts ownership nomination.\\n   * @dev Only callable by the current nominee. Sets nominee back to zero\\n   * address.\\n   */\\n  function acceptOwnership() external;\\n\\n  /// @return The current nominee\\n  function getNominee() external view returns (address);\\n}\\n\",\"keccak256\":\"0x50f8ea0098b1205f0e346f320aed8ea83d2de8fcbf08264b2e4fcefcc25c7780\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/ITokenSender.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport {IUintValue} from \\\"./IUintValue.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITokenSender {\\n  event PriceLowerBoundChange(uint256 price);\\n  event PriceOracleChange(IUintValue oracle);\\n\\n  function send(address recipient, uint256 inputAmount) external;\\n\\n  function setPriceOracle(IUintValue priceOracle) external;\\n\\n  function setPriceLowerBound(uint256 priceLowerBound) external;\\n\\n  function getOutputToken() external view returns (IERC20);\\n\\n  function getPriceOracle() external view returns (IUintValue);\\n\\n  function getPriceLowerBound() external view returns (uint256);\\n\\n  function SET_PRICE_ORACLE_ROLE() external view returns (bytes32);\\n\\n  function SET_PRICE_LOWER_BOUND_ROLE() external view returns (bytes32);\\n\\n  function SET_ALLOWED_MSG_SENDERS_ROLE() external view returns (bytes32);\\n\\n  function SET_ACCOUNT_LIMIT_RESET_PERIOD_ROLE()\\n    external\\n    view\\n    returns (bytes32);\\n\\n  function SET_ACCOUNT_LIMIT_PER_PERIOD_ROLE() external view returns (bytes32);\\n\\n  function WITHDRAW_ERC20_ROLE() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6315399dfe5c5f66d7ac347dd84384de49af8eb16845198a724f95fd9e32301d\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/ITokenSenderCaller.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport {ITokenSender} from \\\"./ITokenSender.sol\\\";\\n\\ninterface ITokenSenderCaller {\\n  event AmountMultiplierChange(address account, uint256 multiplier);\\n  event TokenSenderChange(address sender);\\n\\n  error InvalidAccount();\\n\\n  function setTokenSender(ITokenSender tokenSender) external;\\n\\n  function setAmountMultiplier(address account, uint256 amountMultiplier)\\n    external;\\n\\n  function getTokenSender() external view returns (ITokenSender);\\n\\n  function getAmountMultiplier(address account)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function PERCENT_UNIT() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5bfed1327d30775423894ee1cd2397ffcb03a00b766b4511d88716592eeb327f\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/ITreasuryCaller.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\ninterface ITreasuryCaller {\\n  event TreasuryChange(address treasury);\\n\\n  function setTreasury(address treasury) external;\\n\\n  function getTreasury() external view returns (address);\\n}\\n\",\"keccak256\":\"0x6d1176165dbbe16bcc55c8b9848cd3a65d40ce58ff3518d6cb57fb8b9f6bd57d\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/IUintBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\ninterface IUintBeacon {\\n  event UintChange(bytes32 key, uint256 value);\\n\\n  function set(bytes32 key, uint256 value) external;\\n\\n  function get(bytes32 key) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa88f401de178b14e9156495384aec5307000659ad56e0885b7384dfb026f86b4\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/IUintValue.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\ninterface IUintValue {\\n  function get() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1b1ba9466eab57f66aa255fd76b50419656b37a4f8fa0ea73d7e0488fd7c45fc\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001805561001e33610023565b610075565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610d24806100846000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063d8dc029011610066578063d8dc029014610201578063e6dab1a814610214578063f0f4426014610225578063f2fde38b1461023857600080fd5b80638da5cb5b146101b9578063b6ca0b63146101ca578063bfdbb7be146101db578063d338107e146101ee57600080fd5b80636813ced4116100d35780636813ced4146101815780636d14bd1f14610196578063715018a6146101a957806379ba5097146101b157600080fd5b80632843314e1461010557806333a417971461012f5780633b19e84a1461016657806340163a6314610177575b600080fd5b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b61015861013d366004610aec565b6001600160a01b031660009081526004602052604090205490565b604051908152602001610126565b6006546001600160a01b0316610112565b610158620f424081565b61019461018f366004610b56565b61024b565b005b6101946101a4366004610b10565b6104cc565b61019461074b565b610194610767565b6002546001600160a01b0316610112565b6003546001600160a01b0316610112565b6101946101e9366004610aec565b6107dc565b6101946101fc366004610aec565b6107f0565b61019461020f366004610c00565b610801565b6005546001600160a01b0316610112565b610194610233366004610aec565b610817565b610194610246366004610aec565b610828565b610253610839565b6000546001600160a01b0316158015906102e557506000546040516304d93ff560e31b81526001600160a01b038881166004830152909116906326c9ffa89060240160206040518083038186803b1580156102ad57600080fd5b505afa1580156102c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e59190610c2c565b156102ef576104bb565b60006102fb8486610cac565b90508061030857506104bb565b336001600160a01b0316635c1548fb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561034157600080fd5b505afa158015610355573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103799190610c4e565b6006546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018490529116906323b872dd90606401602060405180830381600087803b1580156103cc57600080fd5b505af11580156103e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104049190610c2c565b506005546001600160a01b031661041b57506104bb565b33600090815260046020526040812054620f42409061043a9084610c8d565b6104449190610c6b565b9050806104525750506104bb565b600554604051633419e74d60e21b81526001600160a01b038981166004830152602482018490529091169063d0679d3490604401600060405180830381600087803b1580156104a057600080fd5b505af11580156104b4573d6000803e3d6000fd5b5050505050505b6104c460018055565b505050505050565b6104d4610839565b6000546001600160a01b03161580159061056657506000546040516304d93ff560e31b81526001600160a01b038681166004830152909116906326c9ffa89060240160206040518083038186803b15801561052e57600080fd5b505afa158015610542573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105669190610c2c565b156105705761073c565b600061057c8284610cac565b905080610589575061073c565b336001600160a01b0316635c1548fb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105c257600080fd5b505afa1580156105d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fa9190610c4e565b6006546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018490529116906323b872dd90606401602060405180830381600087803b15801561064d57600080fd5b505af1158015610661573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106859190610c2c565b506005546001600160a01b031661069c575061073c565b33600090815260046020526040812054620f4240906106bb9084610c8d565b6106c59190610c6b565b9050806106d357505061073c565b600554604051633419e74d60e21b81526001600160a01b038781166004830152602482018490529091169063d0679d3490604401600060405180830381600087803b15801561072157600080fd5b505af1158015610735573d6000803e3d6000fd5b5050505050505b61074560018055565b50505050565b610753610893565b61075b6108ed565b61076560006108ff565b565b6003546001600160a01b0316336001600160a01b0316146107c75760405162461bcd60e51b81526020600482015260156024820152746d73672e73656e64657220213d206e6f6d696e656560581b60448201526064015b60405180910390fd5b60035461075b906001600160a01b0316610951565b6107e4610893565b6107ed816109a3565b50565b6107f8610893565b6107ed816109f8565b610809610893565b6108138282610a46565b5050565b61081f610893565b6107ed81610a9e565b610830610893565b6107ed816108ff565b6002600154141561088c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107be565b6002600155565b6002546001600160a01b031633146107655760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107be565b6108f5610893565b6107656000610951565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fe7624d724357e317f51579affee5050a97c60b060e513e69aa8a1a35fb3315a790600090a35050565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600580546001600160a01b0319166001600160a01b0383169081179091556040519081527fc675cdccdd880d63acbe7af916bd9e4b8e8ffc96d4b0e1764619fa064658e93e906020015b60405180910390a150565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f310aaf5db2aa9335d0aebcc973d03748ed641890df20d89139a312856b5a675c906020016109ed565b6001600160a01b038216600081815260046020908152604091829020849055815192835282018390527fd5ed868d32725cecbd7093a294cc2e71fc63dfbe7a241899218d41a6810fbf53910160405180910390a15050565b600680546001600160a01b0319166001600160a01b0383169081179091556040519081527f1ac54af2084ba0e4b86b7bc54b978ce7dd4ca046d3dec89d7c8963873820c0bb906020016109ed565b600060208284031215610afe57600080fd5b8135610b0981610cd9565b9392505050565b60008060008060808587031215610b2657600080fd5b8435610b3181610cd9565b93506020850135610b4181610cd9565b93969395505050506040820135916060013590565b60008060008060008060a08789031215610b6f57600080fd5b8635610b7a81610cd9565b95506020870135610b8a81610cd9565b94506040870135935060608701359250608087013567ffffffffffffffff80821115610bb557600080fd5b818901915089601f830112610bc957600080fd5b813581811115610bd857600080fd5b8a6020828501011115610bea57600080fd5b6020830194508093505050509295509295509295565b60008060408385031215610c1357600080fd5b8235610c1e81610cd9565b946020939093013593505050565b600060208284031215610c3e57600080fd5b81518015158114610b0957600080fd5b600060208284031215610c6057600080fd5b8151610b0981610cd9565b600082610c8857634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610ca757610ca7610cc3565b500290565b600082821015610cbe57610cbe610cc3565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146107ed57600080fdfea2646970667358221220fa42690631aff9a30d365f034dcfa17dcc195ed3e2c4aaf62d8754151c77cd1e64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063d8dc029011610066578063d8dc029014610201578063e6dab1a814610214578063f0f4426014610225578063f2fde38b1461023857600080fd5b80638da5cb5b146101b9578063b6ca0b63146101ca578063bfdbb7be146101db578063d338107e146101ee57600080fd5b80636813ced4116100d35780636813ced4146101815780636d14bd1f14610196578063715018a6146101a957806379ba5097146101b157600080fd5b80632843314e1461010557806333a417971461012f5780633b19e84a1461016657806340163a6314610177575b600080fd5b6000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b61015861013d366004610aec565b6001600160a01b031660009081526004602052604090205490565b604051908152602001610126565b6006546001600160a01b0316610112565b610158620f424081565b61019461018f366004610b56565b61024b565b005b6101946101a4366004610b10565b6104cc565b61019461074b565b610194610767565b6002546001600160a01b0316610112565b6003546001600160a01b0316610112565b6101946101e9366004610aec565b6107dc565b6101946101fc366004610aec565b6107f0565b61019461020f366004610c00565b610801565b6005546001600160a01b0316610112565b610194610233366004610aec565b610817565b610194610246366004610aec565b610828565b610253610839565b6000546001600160a01b0316158015906102e557506000546040516304d93ff560e31b81526001600160a01b038881166004830152909116906326c9ffa89060240160206040518083038186803b1580156102ad57600080fd5b505afa1580156102c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e59190610c2c565b156102ef576104bb565b60006102fb8486610cac565b90508061030857506104bb565b336001600160a01b0316635c1548fb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561034157600080fd5b505afa158015610355573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103799190610c4e565b6006546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018490529116906323b872dd90606401602060405180830381600087803b1580156103cc57600080fd5b505af11580156103e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104049190610c2c565b506005546001600160a01b031661041b57506104bb565b33600090815260046020526040812054620f42409061043a9084610c8d565b6104449190610c6b565b9050806104525750506104bb565b600554604051633419e74d60e21b81526001600160a01b038981166004830152602482018490529091169063d0679d3490604401600060405180830381600087803b1580156104a057600080fd5b505af11580156104b4573d6000803e3d6000fd5b5050505050505b6104c460018055565b505050505050565b6104d4610839565b6000546001600160a01b03161580159061056657506000546040516304d93ff560e31b81526001600160a01b038681166004830152909116906326c9ffa89060240160206040518083038186803b15801561052e57600080fd5b505afa158015610542573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105669190610c2c565b156105705761073c565b600061057c8284610cac565b905080610589575061073c565b336001600160a01b0316635c1548fb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105c257600080fd5b505afa1580156105d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fa9190610c4e565b6006546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018490529116906323b872dd90606401602060405180830381600087803b15801561064d57600080fd5b505af1158015610661573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106859190610c2c565b506005546001600160a01b031661069c575061073c565b33600090815260046020526040812054620f4240906106bb9084610c8d565b6106c59190610c6b565b9050806106d357505061073c565b600554604051633419e74d60e21b81526001600160a01b038781166004830152602482018490529091169063d0679d3490604401600060405180830381600087803b15801561072157600080fd5b505af1158015610735573d6000803e3d6000fd5b5050505050505b61074560018055565b50505050565b610753610893565b61075b6108ed565b61076560006108ff565b565b6003546001600160a01b0316336001600160a01b0316146107c75760405162461bcd60e51b81526020600482015260156024820152746d73672e73656e64657220213d206e6f6d696e656560581b60448201526064015b60405180910390fd5b60035461075b906001600160a01b0316610951565b6107e4610893565b6107ed816109a3565b50565b6107f8610893565b6107ed816109f8565b610809610893565b6108138282610a46565b5050565b61081f610893565b6107ed81610a9e565b610830610893565b6107ed816108ff565b6002600154141561088c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107be565b6002600155565b6002546001600160a01b031633146107655760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107be565b6108f5610893565b6107656000610951565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fe7624d724357e317f51579affee5050a97c60b060e513e69aa8a1a35fb3315a790600090a35050565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600580546001600160a01b0319166001600160a01b0383169081179091556040519081527fc675cdccdd880d63acbe7af916bd9e4b8e8ffc96d4b0e1764619fa064658e93e906020015b60405180910390a150565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f310aaf5db2aa9335d0aebcc973d03748ed641890df20d89139a312856b5a675c906020016109ed565b6001600160a01b038216600081815260046020908152604091829020849055815192835282018390527fd5ed868d32725cecbd7093a294cc2e71fc63dfbe7a241899218d41a6810fbf53910160405180910390a15050565b600680546001600160a01b0319166001600160a01b0383169081179091556040519081527f1ac54af2084ba0e4b86b7bc54b978ce7dd4ca046d3dec89d7c8963873820c0bb906020016109ed565b600060208284031215610afe57600080fd5b8135610b0981610cd9565b9392505050565b60008060008060808587031215610b2657600080fd5b8435610b3181610cd9565b93506020850135610b4181610cd9565b93969395505050506040820135916060013590565b60008060008060008060a08789031215610b6f57600080fd5b8635610b7a81610cd9565b95506020870135610b8a81610cd9565b94506040870135935060608701359250608087013567ffffffffffffffff80821115610bb557600080fd5b818901915089601f830112610bc957600080fd5b813581811115610bd857600080fd5b8a6020828501011115610bea57600080fd5b6020830194508093505050509295509295509295565b60008060408385031215610c1357600080fd5b8235610c1e81610cd9565b946020939093013593505050565b600060208284031215610c3e57600080fd5b81518015158114610b0957600080fd5b600060208284031215610c6057600080fd5b8151610b0981610cd9565b600082610c8857634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610ca757610ca7610cc3565b500290565b600082821015610cbe57610cbe610cc3565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146107ed57600080fdfea2646970667358221220fa42690631aff9a30d365f034dcfa17dcc195ed3e2c4aaf62d8754151c77cd1e64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "Only callable by the current nominee. Sets nominee back to zero address."
      },
      "getNominee()": {
        "returns": {
          "_0": "The current nominee"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Accepts ownership nomination."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 20402,
        "contract": "contracts/MarketHook.sol:MarketHook",
        "label": "_accountList",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAccountList)21542"
      },
      {
        "astId": 5045,
        "contract": "contracts/MarketHook.sol:MarketHook",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4929,
        "contract": "contracts/MarketHook.sol:MarketHook",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 21103,
        "contract": "contracts/MarketHook.sol:MarketHook",
        "label": "_nominee",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 21209,
        "contract": "contracts/MarketHook.sol:MarketHook",
        "label": "_accountToAmountMultiplier",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21212,
        "contract": "contracts/MarketHook.sol:MarketHook",
        "label": "_tokenSender",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ITokenSender)21930"
      },
      {
        "astId": 21287,
        "contract": "contracts/MarketHook.sol:MarketHook",
        "label": "_treasury",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IAccountList)21542": {
        "encoding": "inplace",
        "label": "contract IAccountList",
        "numberOfBytes": "20"
      },
      "t_contract(ITokenSender)21930": {
        "encoding": "inplace",
        "label": "contract ITokenSender",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
