{
  "address": "0x7f704257239650bF641fC6d8585d4B45B1720141",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousNominee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newNominee",
          "type": "address"
        }
      ],
      "name": "NomineeUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNominee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isIncluded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "includedAccounts",
          "type": "address[]"
        }
      ],
      "name": "reset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "included",
          "type": "bool[]"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nominee",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xff831ea2a6e0efbac4378ded94e509e98887963d1517095958fc62bd0fd6616a",
  "receipt": {
    "to": null,
    "from": "0x4F05Cf239a8BC2bfdA92673bC3c8a87E091b6D97",
    "contractAddress": "0x7f704257239650bF641fC6d8585d4B45B1720141",
    "transactionIndex": 4,
    "gasUsed": "4247546",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000010000000000000000000000000000000000000000000000000000000000400000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000002000000000000000002000000000000000000000000000000000000000000000000020000000000100000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x23092f2b537cffe42bb78ee39002e3142d920362d4e5b32434aee6ad71777f4b",
    "transactionHash": "0xff831ea2a6e0efbac4378ded94e509e98887963d1517095958fc62bd0fd6616a",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 75351172,
        "transactionHash": "0xff831ea2a6e0efbac4378ded94e509e98887963d1517095958fc62bd0fd6616a",
        "address": "0x7f704257239650bF641fC6d8585d4B45B1720141",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004f05cf239a8bc2bfda92673bc3c8a87e091b6d97"
        ],
        "data": "0x",
        "logIndex": 20,
        "blockHash": "0x23092f2b537cffe42bb78ee39002e3142d920362d4e5b32434aee6ad71777f4b"
      }
    ],
    "blockNumber": 75351172,
    "cumulativeGasUsed": "8720131",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "42e53d7d7e0c132b240d2ca5560eea51",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousNominee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newNominee\",\"type\":\"address\"}],\"name\":\"NomineeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNominee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isIncluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"includedAccounts\",\"type\":\"address[]\"}],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"included\",\"type\":\"bool[]\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nominee\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"Only callable by the current nominee. Sets nominee back to zero address.\"},\"getNominee()\":{\"returns\":{\"_0\":\"The current nominee\"}},\"isIncluded(address)\":{\"params\":{\"account\":\"Address to check inclusion for\"},\"returns\":{\"_0\":\"Whether `account` is included\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"reset(address[])\":{\"details\":\"Only callable by `owner()`.\",\"params\":{\"includedAccounts\":\"Addresses to include after reset\"}},\"set(address[],bool[])\":{\"details\":\"Whether an account is included is based on the boolean value at its respective index in `included`. This function will only edit the inclusion of addresses in `accounts`. The length of `accounts` and `included` must match. Only callable by `owner()`.\",\"params\":{\"accounts\":\"Addresses to change inclusion for\",\"included\":\"Whether to include corresponding address in `accounts`\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Accepts ownership nomination.\"},\"reset(address[])\":{\"notice\":\"Removes every address from the set. Atomically includes any addresses in `newIncludedAccounts`.\"},\"set(address[],bool[])\":{\"notice\":\"Sets whether an address in `accounts` is included.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AccountList.sol\":\"AccountList\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/AccountList.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"prepo-shared-contracts/contracts/SafeOwnable.sol\\\";\\nimport \\\"prepo-shared-contracts/contracts/interfaces/IAccountList.sol\\\";\\n\\ncontract AccountList is IAccountList, SafeOwnable {\\n  uint256 private _resetIndex;\\n  mapping(uint256 => mapping(address => bool))\\n    private _resetIndexToAccountToIncluded;\\n\\n  constructor() {}\\n\\n  function set(address[] calldata accounts, bool[] calldata included)\\n    external\\n    override\\n    onlyOwner\\n  {\\n    require(accounts.length == included.length, \\\"Array length mismatch\\\");\\n    uint256 arrayLength = accounts.length;\\n    for (uint256 i; i < arrayLength; ) {\\n      _resetIndexToAccountToIncluded[_resetIndex][accounts[i]] = included[i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  function reset(address[] calldata includedAccounts)\\n    external\\n    override\\n    onlyOwner\\n  {\\n    _resetIndex++;\\n    uint256 arrayLength = includedAccounts.length;\\n    for (uint256 i; i < arrayLength; ) {\\n      _resetIndexToAccountToIncluded[_resetIndex][includedAccounts[i]] = true;\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  function isIncluded(address account) external view override returns (bool) {\\n    return _resetIndexToAccountToIncluded[_resetIndex][account];\\n  }\\n}\\n\",\"keccak256\":\"0x2b5f8652d27b338c7809e0ff03e6ca611faf8246c2c9634b02efb19d5e6ea61a\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/SafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ISafeOwnable.sol\\\";\\n\\ncontract SafeOwnable is ISafeOwnable, Ownable {\\n  address private _nominee;\\n\\n  modifier onlyNominee() {\\n    require(_msgSender() == _nominee, \\\"msg.sender != nominee\\\");\\n    _;\\n  }\\n\\n  function transferOwnership(address nominee)\\n    public\\n    virtual\\n    override(ISafeOwnable, Ownable)\\n    onlyOwner\\n  {\\n    _setNominee(nominee);\\n  }\\n\\n  function acceptOwnership() public virtual override onlyNominee {\\n    _transferOwnership(_nominee);\\n    _setNominee(address(0));\\n  }\\n\\n  function renounceOwnership()\\n    public\\n    virtual\\n    override(ISafeOwnable, Ownable)\\n    onlyOwner\\n  {\\n    super.renounceOwnership();\\n    _setNominee(address(0));\\n  }\\n\\n  function getNominee() public view virtual override returns (address) {\\n    return _nominee;\\n  }\\n\\n  function _setNominee(address nominee) internal virtual {\\n    address _oldNominee = _nominee;\\n    _nominee = nominee;\\n    emit NomineeUpdate(_oldNominee, nominee);\\n  }\\n}\\n\",\"keccak256\":\"0xbb0a5407dcd2bc88279cdb40e03fd71e0e6663fced7202056672f12d74e110db\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/IAccountList.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\n/**\\n * @notice Stores whether an address is included in a set.\\n */\\ninterface IAccountList {\\n  /**\\n   * @notice Sets whether an address in `accounts` is included.\\n   * @dev Whether an account is included is based on the boolean value at its\\n   * respective index in `included`. This function will only edit the\\n   * inclusion of addresses in `accounts`.\\n   *\\n   * The length of `accounts` and `included` must match.\\n   *\\n   * Only callable by `owner()`.\\n   * @param accounts Addresses to change inclusion for\\n   * @param included Whether to include corresponding address in `accounts`\\n   */\\n  function set(address[] calldata accounts, bool[] calldata included) external;\\n\\n  /**\\n   * @notice Removes every address from the set. Atomically includes any\\n   * addresses in `newIncludedAccounts`.\\n   * @dev Only callable by `owner()`.\\n   * @param includedAccounts Addresses to include after reset\\n   */\\n  function reset(address[] calldata includedAccounts) external;\\n\\n  /**\\n   * @param account Address to check inclusion for\\n   * @return Whether `account` is included\\n   */\\n  function isIncluded(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x46c75bd30d3ddf35d42bc109e27ccfac164ad532e4b222f916793ef683563208\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/ISafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\n/**\\n * @notice An extension of OpenZeppelin's `Ownable.sol` contract that requires\\n * an address to be nominated, and then accept that nomination, before\\n * ownership is transferred.\\n */\\ninterface ISafeOwnable {\\n  /**\\n   * @dev Emitted via `transferOwnership()`.\\n   * @param previousNominee The previous nominee\\n   * @param newNominee The new nominee\\n   */\\n  event NomineeUpdate(\\n    address indexed previousNominee,\\n    address indexed newNominee\\n  );\\n\\n  /**\\n   * @notice Nominates an address to be owner of the contract.\\n   * @dev Only callable by `owner()`.\\n   * @param nominee The address that will be nominated\\n   */\\n  function transferOwnership(address nominee) external;\\n\\n  /**\\n   * @notice Renounces ownership of contract and leaves the contract\\n   * without any owner.\\n   * @dev Only callable by `owner()`.\\n   * Sets nominee back to zero address.\\n   * It will not be possible to call `onlyOwner` functions anymore.\\n   */\\n  function renounceOwnership() external;\\n\\n  /**\\n   * @notice Accepts ownership nomination.\\n   * @dev Only callable by the current nominee. Sets nominee back to zero\\n   * address.\\n   */\\n  function acceptOwnership() external;\\n\\n  /// @return The current nominee\\n  function getNominee() external view returns (address);\\n}\\n\",\"keccak256\":\"0x50f8ea0098b1205f0e346f320aed8ea83d2de8fcbf08264b2e4fcefcc25c7780\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61065f8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063b6ca0b631161005b578063b6ca0b6314610113578063b916de5914610124578063bfec52e714610137578063f2fde38b1461014a57600080fd5b806326c9ffa81461008d578063715018a6146100dc57806379ba5097146100e65780638da5cb5b146100ee575b600080fd5b6100c761009b3660046104ea565b60025460009081526003602090815260408083206001600160a01b039094168352929052205460ff1690565b60405190151581526020015b60405180910390f35b6100e461015d565b005b6100e4610179565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100d3565b6001546001600160a01b03166100fb565b6100e461013236600461051a565b6101ee565b6100e461014536600461055c565b610289565b6100e46101583660046104ea565b61037c565b610165610390565b61016d6103ea565b61017760006103fc565b565b6001546001600160a01b0316336001600160a01b0316146101d95760405162461bcd60e51b81526020600482015260156024820152746d73672e73656e64657220213d206e6f6d696e656560581b60448201526064015b60405180910390fd5b60015461016d906001600160a01b031661044e565b6101f6610390565b60028054906000610206836105ea565b9091555081905060005b8181101561028357600254600090815260036020526040812060019186868581811061023e5761023e610613565b905060200201602081019061025391906104ea565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055600101610210565b50505050565b610291610390565b8281146102d85760405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b60448201526064016101d0565b8260005b81811015610374578383828181106102f6576102f6610613565b905060200201602081019061030b91906105c8565b60025460009081526003602052604081209088888581811061032f5761032f610613565b905060200201602081019061034491906104ea565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790556001016102dc565b505050505050565b610384610390565b61038d816103fc565b50565b6000546001600160a01b031633146101775760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101d0565b6103f2610390565b610177600061044e565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fe7624d724357e317f51579affee5050a97c60b060e513e69aa8a1a35fb3315a790600090a35050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008083601f8401126104b057600080fd5b50813567ffffffffffffffff8111156104c857600080fd5b6020830191508360208260051b85010111156104e357600080fd5b9250929050565b6000602082840312156104fc57600080fd5b81356001600160a01b038116811461051357600080fd5b9392505050565b6000806020838503121561052d57600080fd5b823567ffffffffffffffff81111561054457600080fd5b6105508582860161049e565b90969095509350505050565b6000806000806040858703121561057257600080fd5b843567ffffffffffffffff8082111561058a57600080fd5b6105968883890161049e565b909650945060208701359150808211156105af57600080fd5b506105bc8782880161049e565b95989497509550505050565b6000602082840312156105da57600080fd5b8135801515811461051357600080fd5b600060001982141561060c57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fdfea26469706673582212203097055e290ec35fc9b33dfd7653571fe7e9f880fb7a7b4994e911e4b5772cc164736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063b6ca0b631161005b578063b6ca0b6314610113578063b916de5914610124578063bfec52e714610137578063f2fde38b1461014a57600080fd5b806326c9ffa81461008d578063715018a6146100dc57806379ba5097146100e65780638da5cb5b146100ee575b600080fd5b6100c761009b3660046104ea565b60025460009081526003602090815260408083206001600160a01b039094168352929052205460ff1690565b60405190151581526020015b60405180910390f35b6100e461015d565b005b6100e4610179565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100d3565b6001546001600160a01b03166100fb565b6100e461013236600461051a565b6101ee565b6100e461014536600461055c565b610289565b6100e46101583660046104ea565b61037c565b610165610390565b61016d6103ea565b61017760006103fc565b565b6001546001600160a01b0316336001600160a01b0316146101d95760405162461bcd60e51b81526020600482015260156024820152746d73672e73656e64657220213d206e6f6d696e656560581b60448201526064015b60405180910390fd5b60015461016d906001600160a01b031661044e565b6101f6610390565b60028054906000610206836105ea565b9091555081905060005b8181101561028357600254600090815260036020526040812060019186868581811061023e5761023e610613565b905060200201602081019061025391906104ea565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055600101610210565b50505050565b610291610390565b8281146102d85760405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b60448201526064016101d0565b8260005b81811015610374578383828181106102f6576102f6610613565b905060200201602081019061030b91906105c8565b60025460009081526003602052604081209088888581811061032f5761032f610613565b905060200201602081019061034491906104ea565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790556001016102dc565b505050505050565b610384610390565b61038d816103fc565b50565b6000546001600160a01b031633146101775760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101d0565b6103f2610390565b610177600061044e565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907fe7624d724357e317f51579affee5050a97c60b060e513e69aa8a1a35fb3315a790600090a35050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008083601f8401126104b057600080fd5b50813567ffffffffffffffff8111156104c857600080fd5b6020830191508360208260051b85010111156104e357600080fd5b9250929050565b6000602082840312156104fc57600080fd5b81356001600160a01b038116811461051357600080fd5b9392505050565b6000806020838503121561052d57600080fd5b823567ffffffffffffffff81111561054457600080fd5b6105508582860161049e565b90969095509350505050565b6000806000806040858703121561057257600080fd5b843567ffffffffffffffff8082111561058a57600080fd5b6105968883890161049e565b909650945060208701359150808211156105af57600080fd5b506105bc8782880161049e565b95989497509550505050565b6000602082840312156105da57600080fd5b8135801515811461051357600080fd5b600060001982141561060c57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fdfea26469706673582212203097055e290ec35fc9b33dfd7653571fe7e9f880fb7a7b4994e911e4b5772cc164736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "Only callable by the current nominee. Sets nominee back to zero address."
      },
      "getNominee()": {
        "returns": {
          "_0": "The current nominee"
        }
      },
      "isIncluded(address)": {
        "params": {
          "account": "Address to check inclusion for"
        },
        "returns": {
          "_0": "Whether `account` is included"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "reset(address[])": {
        "details": "Only callable by `owner()`.",
        "params": {
          "includedAccounts": "Addresses to include after reset"
        }
      },
      "set(address[],bool[])": {
        "details": "Whether an account is included is based on the boolean value at its respective index in `included`. This function will only edit the inclusion of addresses in `accounts`. The length of `accounts` and `included` must match. Only callable by `owner()`.",
        "params": {
          "accounts": "Addresses to change inclusion for",
          "included": "Whether to include corresponding address in `accounts`"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Accepts ownership nomination."
      },
      "reset(address[])": {
        "notice": "Removes every address from the set. Atomically includes any addresses in `newIncludedAccounts`."
      },
      "set(address[],bool[])": {
        "notice": "Sets whether an address in `accounts` is included."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4929,
        "contract": "contracts/AccountList.sol:AccountList",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17545,
        "contract": "contracts/AccountList.sol:AccountList",
        "label": "_nominee",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10254,
        "contract": "contracts/AccountList.sol:AccountList",
        "label": "_resetIndex",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 10260,
        "contract": "contracts/AccountList.sol:AccountList",
        "label": "_resetIndexToAccountToIncluded",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
