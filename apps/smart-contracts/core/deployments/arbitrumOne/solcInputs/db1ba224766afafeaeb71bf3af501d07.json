{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerableUpgradeable.sol\";\nimport \"./AccessControlUpgradeable.sol\";\nimport \"../utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\n    function __AccessControlEnumerable_init() internal onlyInitializing {\n    }\n\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "contracts/AllowedCollateralCaller.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\nimport \"./interfaces/IAllowedCollateralCaller.sol\";\nimport \"./interfaces/ICollateral.sol\";\n\ncontract AllowedCollateralCaller is IAllowedCollateralCaller {\n  ICollateral internal _collateral;\n\n  modifier onlyCollateral() {\n    require(msg.sender == address(_collateral), \"msg.sender != collateral\");\n    _;\n  }\n\n  function setCollateral(ICollateral collateral) public virtual override {\n    _collateral = collateral;\n    emit CollateralChange(address(collateral));\n  }\n\n  function getCollateral() external view override returns (ICollateral) {\n    return _collateral;\n  }\n}\n"
    },
    "contracts/ArbitrageBroker.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\nimport \"./interfaces/IArbitrageBroker.sol\";\nimport \"prepo-shared-contracts/contracts/SafeAccessControlEnumerable.sol\";\n\ncontract ArbitrageBroker is IArbitrageBroker, SafeAccessControlEnumerable {\n  ICollateral private immutable _collateral;\n  ISwapRouter private immutable _swapRouter;\n  mapping(address => bool) private _marketToValidity;\n\n  uint24 public constant override POOL_FEE_TIER = 10000;\n  bytes32 public immutable override BUY_AND_REDEEM_ROLE =\n    keccak256(\"buyAndRedeem\");\n  bytes32 public immutable override MINT_AND_SELL_ROLE =\n    keccak256(\"mintAndSell\");\n  bytes32 public immutable override SET_MARKET_VALIDITY_ROLE =\n    keccak256(\"setMarketValidity\");\n\n  constructor(ICollateral collateral, ISwapRouter swapRouter) {\n    _collateral = collateral;\n    _swapRouter = swapRouter;\n    collateral.approve(address(swapRouter), type(uint256).max);\n  }\n\n  modifier onlyValidMarkets(IPrePOMarket market) {\n    if (!_marketToValidity[address(market)]) {\n      revert InvalidMarket(address(market));\n    }\n    _;\n  }\n\n  function buyAndRedeem(\n    IPrePOMarket market,\n    OffChainTradeParams calldata tradeParams\n  )\n    external\n    override\n    onlyRole(BUY_AND_REDEEM_ROLE)\n    onlyValidMarkets(market)\n    returns (\n      uint256 profit,\n      uint256 collateralToBuyLong,\n      uint256 collateralToBuyShort\n    )\n  {\n    uint256 collateralBefore = _collateral.balanceOf(address(this));\n    collateralToBuyLong = _buyLongOrShort(\n      tradeParams,\n      market.getLongToken(),\n      true\n    );\n    collateralToBuyShort = _buyLongOrShort(\n      tradeParams,\n      market.getShortToken(),\n      false\n    );\n    market.redeem(\n      tradeParams.longShortAmount,\n      tradeParams.longShortAmount,\n      address(this)\n    );\n    uint256 collateralAfter = _collateral.balanceOf(address(this));\n    if (collateralBefore >= collateralAfter) {\n      revert UnprofitableTrade(collateralBefore, collateralAfter);\n    }\n    profit = collateralAfter - collateralBefore;\n    emit ArbitrageProfit(address(market), false, profit);\n  }\n\n  function mintAndSell(\n    IPrePOMarket market,\n    OffChainTradeParams calldata tradeParams\n  )\n    external\n    override\n    onlyRole(MINT_AND_SELL_ROLE)\n    onlyValidMarkets(market)\n    returns (\n      uint256 profit,\n      uint256 collateralFromSellingLong,\n      uint256 collateralFromSellingShort\n    )\n  {\n    uint256 collateralBefore = _collateral.balanceOf(address(this));\n    market.mint(tradeParams.longShortAmount);\n    collateralFromSellingLong = _sellLongOrShort(\n      tradeParams,\n      market.getLongToken(),\n      true\n    );\n    collateralFromSellingShort = _sellLongOrShort(\n      tradeParams,\n      market.getShortToken(),\n      false\n    );\n    uint256 collateralAfter = _collateral.balanceOf(address(this));\n    if (collateralBefore >= collateralAfter) {\n      revert UnprofitableTrade(collateralBefore, collateralAfter);\n    }\n    profit = collateralAfter - collateralBefore;\n    emit ArbitrageProfit(address(market), true, profit);\n  }\n\n  function setMarketValidity(address market, bool validity)\n    external\n    override\n    onlyRole(SET_MARKET_VALIDITY_ROLE)\n  {\n    _marketToValidity[market] = validity;\n    address swapRouter = address(_swapRouter);\n    ILongShortToken longToken = IPrePOMarket(market).getLongToken();\n    ILongShortToken shortToken = IPrePOMarket(market).getShortToken();\n    if (validity) {\n      _collateral.approve(market, type(uint256).max);\n      longToken.approve(swapRouter, type(uint256).max);\n      shortToken.approve(swapRouter, type(uint256).max);\n    } else {\n      _collateral.approve(market, 0);\n      longToken.approve(swapRouter, 0);\n      shortToken.approve(swapRouter, 0);\n    }\n    emit MarketValidityChange(market, validity);\n  }\n\n  function getCollateral() external view override returns (ICollateral) {\n    return _collateral;\n  }\n\n  function getSwapRouter() external view override returns (ISwapRouter) {\n    return _swapRouter;\n  }\n\n  function isMarketValid(address market)\n    external\n    view\n    override\n    returns (bool)\n  {\n    return _marketToValidity[market];\n  }\n\n  function _buyLongOrShort(\n    OffChainTradeParams calldata tradeParams,\n    ILongShortToken longShortToken,\n    bool long\n  ) private returns (uint256) {\n    uint256 amountInMaximum = long\n      ? tradeParams.collateralLimitForLong\n      : tradeParams.collateralLimitForShort;\n    ISwapRouter.ExactOutputSingleParams memory exactOutputSingleParams = ISwapRouter\n      .ExactOutputSingleParams(\n        address(_collateral), // tokenIn\n        address(longShortToken), // tokenOut\n        POOL_FEE_TIER,\n        address(this), // recipient\n        tradeParams.deadline,\n        tradeParams.longShortAmount, // amountOut\n        amountInMaximum,\n        0 // sqrtPriceLimitX96\n      );\n    return _swapRouter.exactOutputSingle(exactOutputSingleParams);\n  }\n\n  function _sellLongOrShort(\n    OffChainTradeParams calldata tradeParams,\n    ILongShortToken longShortToken,\n    bool long\n  ) private returns (uint256) {\n    uint256 amountOutMinimum = long\n      ? tradeParams.collateralLimitForLong\n      : tradeParams.collateralLimitForShort;\n    ISwapRouter.ExactInputSingleParams memory exactInputSingleParams = ISwapRouter\n      .ExactInputSingleParams(\n        address(longShortToken), // tokenIn\n        address(_collateral), // tokenOut\n        POOL_FEE_TIER,\n        address(this), // recipient\n        tradeParams.deadline,\n        tradeParams.longShortAmount, // amountIn\n        amountOutMinimum,\n        0 // sqrtPriceLimitX96\n      );\n    return _swapRouter.exactInputSingle(exactInputSingleParams);\n  }\n}\n"
    },
    "contracts/DepositRecordCaller.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\nimport \"./interfaces/IDepositRecordCaller.sol\";\n\ncontract DepositRecordCaller is IDepositRecordCaller {\n  IDepositRecord internal _depositRecord;\n\n  function setDepositRecord(IDepositRecord depositRecord)\n    public\n    virtual\n    override\n  {\n    _depositRecord = depositRecord;\n    emit DepositRecordChange(depositRecord);\n  }\n\n  function getDepositRecord() external view override returns (IDepositRecord) {\n    return _depositRecord;\n  }\n}\n"
    },
    "contracts/interfaces/IAllowedCollateralCaller.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\nimport \"./ICollateral.sol\";\n\ninterface IAllowedCollateralCaller {\n  event CollateralChange(address collateral);\n\n  function setCollateral(ICollateral newCollateral) external;\n\n  function getCollateral() external view returns (ICollateral);\n}\n"
    },
    "contracts/interfaces/IArbitrageBroker.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\nimport \"./ICollateral.sol\";\nimport \"./IPrePOMarket.sol\";\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\n\ninterface IArbitrageBroker {\n  struct OffChainTradeParams {\n    uint256 deadline;\n    uint256 longShortAmount;\n    uint256 collateralLimitForLong;\n    uint256 collateralLimitForShort;\n  }\n\n  event ArbitrageProfit(\n    address indexed market,\n    bool indexed minting,\n    uint256 profits\n  );\n\n  event MarketValidityChange(address market, bool validity);\n\n  error UnprofitableTrade(uint256 balanceBefore, uint256 balanceAfter);\n\n  error InvalidMarket(address market);\n\n  function buyAndRedeem(\n    IPrePOMarket market,\n    OffChainTradeParams calldata tradeParams\n  )\n    external\n    returns (\n      uint256 profit,\n      uint256 collateralToBuyLong,\n      uint256 collateralToBuyShort\n    );\n\n  function mintAndSell(\n    IPrePOMarket market,\n    OffChainTradeParams calldata tradeParams\n  )\n    external\n    returns (\n      uint256 profit,\n      uint256 collateralFromSellingLong,\n      uint256 collateralFromSellingShort\n    );\n\n  function setMarketValidity(address market, bool valid) external;\n\n  function getCollateral() external view returns (ICollateral);\n\n  function getSwapRouter() external view returns (ISwapRouter);\n\n  function isMarketValid(address market) external view returns (bool);\n\n  function POOL_FEE_TIER() external view returns (uint24);\n\n  function BUY_AND_REDEEM_ROLE() external view returns (bytes32);\n\n  function MINT_AND_SELL_ROLE() external view returns (bytes32);\n\n  function SET_MARKET_VALIDITY_ROLE() external view returns (bytes32);\n}\n"
    },
    "contracts/interfaces/ICollateral.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\nimport \"./IHook.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\";\n\ninterface ICollateral is IERC20Upgradeable, IERC20PermitUpgradeable {\n  event Deposit(\n    address indexed depositor,\n    uint256 amountAfterFee,\n    uint256 fee\n  );\n\n  event Withdraw(\n    address indexed withdrawer,\n    address indexed recipient,\n    uint256 amountAfterFee,\n    uint256 fee\n  );\n\n  event DepositFeeChange(uint256 fee);\n\n  event WithdrawFeeChange(uint256 fee);\n\n  event DepositHookChange(address hook);\n\n  event WithdrawHookChange(address hook);\n\n  function deposit(address recipient, uint256 baseTokenAmount)\n    external\n    returns (uint256 collateralMintAmount);\n\n  function withdraw(address recipient, uint256 collateralAmount)\n    external\n    returns (uint256 baseTokenAmountAfterFee);\n\n  function setDepositFee(uint256 depositFee) external;\n\n  function setWithdrawFee(uint256 withdrawFee) external;\n\n  function setDepositHook(IHook hook) external;\n\n  function setWithdrawHook(IHook hook) external;\n\n  function getBaseToken() external view returns (IERC20);\n\n  function getDepositFee() external view returns (uint256);\n\n  function getWithdrawFee() external view returns (uint256);\n\n  function getDepositHook() external view returns (IHook);\n\n  function getWithdrawHook() external view returns (IHook);\n\n  function getBaseTokenBalance() external view returns (uint256);\n\n  function PERCENT_DENOMINATOR() external view returns (uint256);\n\n  function FEE_LIMIT() external view returns (uint256);\n\n  function SET_DEPOSIT_FEE_ROLE() external view returns (bytes32);\n\n  function SET_WITHDRAW_FEE_ROLE() external view returns (bytes32);\n\n  function SET_DEPOSIT_HOOK_ROLE() external view returns (bytes32);\n\n  function SET_WITHDRAW_HOOK_ROLE() external view returns (bytes32);\n}\n"
    },
    "contracts/interfaces/IDepositRecord.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.7;\n\ninterface IDepositRecord {\n  event GlobalNetDepositCapChange(uint256 cap);\n\n  event UserDepositCapChange(uint256 cap);\n\n  function recordDeposit(address sender, uint256 amount) external;\n\n  function recordWithdrawal(uint256 amount) external;\n\n  function setGlobalNetDepositCap(uint256 globalNetDepositCap) external;\n\n  function setUserDepositCap(uint256 userDepositCap) external;\n\n  function getGlobalNetDepositCap() external view returns (uint256);\n\n  function getGlobalNetDepositAmount() external view returns (uint256);\n\n  function getUserDepositCap() external view returns (uint256);\n\n  function getUserDepositAmount(address account)\n    external\n    view\n    returns (uint256);\n\n  function SET_GLOBAL_NET_DEPOSIT_CAP_ROLE() external view returns (bytes32);\n\n  function SET_USER_DEPOSIT_CAP_ROLE() external view returns (bytes32);\n\n  function SET_ALLOWED_MSG_SENDERS_ROLE() external view returns (bytes32);\n\n  function SET_ACCOUNT_LIST_ROLE() external view returns (bytes32);\n}\n"
    },
    "contracts/interfaces/IDepositRecordCaller.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\nimport \"./IDepositRecord.sol\";\n\ninterface IDepositRecordCaller {\n  event DepositRecordChange(IDepositRecord depositRecord);\n\n  function setDepositRecord(IDepositRecord depositRecord) external;\n\n  function getDepositRecord() external view returns (IDepositRecord);\n}\n"
    },
    "contracts/interfaces/IHook.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\ninterface IHook {\n  function hook(\n    address funder,\n    address recipient,\n    uint256 amountBeforeFee,\n    uint256 amountAfterFee\n  ) external;\n}\n"
    },
    "contracts/interfaces/ILongShortToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ILongShortToken is IERC20 {\n  function owner() external returns (address);\n\n  function mint(address recipient, uint256 amount) external;\n\n  function burnFrom(address account, uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/IPrePOMarket.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.7;\n\nimport \"./ILongShortToken.sol\";\nimport \"./IHook.sol\";\n\ninterface IPrePOMarket {\n  event MarketCreated(\n    address longToken,\n    address shortToken,\n    uint256 floorLongPayout,\n    uint256 ceilingLongPayout,\n    uint256 floorValuation,\n    uint256 ceilingValuation,\n    uint256 expiryTime\n  );\n\n  event Mint(address indexed minter, uint256 amount);\n\n  event Redemption(\n    address indexed redeemer,\n    address indexed recipient,\n    uint256 amountAfterFee,\n    uint256 fee\n  );\n\n  event MintHookChange(address hook);\n\n  event RedeemHookChange(address hook);\n\n  event FinalLongPayoutSet(uint256 payout);\n\n  event RedemptionFeeChange(uint256 fee);\n\n  function mint(uint256 amount) external returns (uint256);\n\n  function redeem(\n    uint256 longAmount,\n    uint256 shortAmount,\n    address recipient\n  ) external;\n\n  function setMintHook(IHook mintHook) external;\n\n  function setRedeemHook(IHook redeemHook) external;\n\n  function setFinalLongPayout(uint256 finalLongPayout) external;\n\n  function setRedemptionFee(uint256 redemptionFee) external;\n\n  function getMintHook() external view returns (IHook);\n\n  function getRedeemHook() external view returns (IHook);\n\n  function getCollateral() external view returns (IERC20);\n\n  function getLongToken() external view returns (ILongShortToken);\n\n  function getShortToken() external view returns (ILongShortToken);\n\n  function getFloorLongPayout() external view returns (uint256);\n\n  function getCeilingLongPayout() external view returns (uint256);\n\n  function getFinalLongPayout() external view returns (uint256);\n\n  function getFloorValuation() external view returns (uint256);\n\n  function getCeilingValuation() external view returns (uint256);\n\n  function getRedemptionFee() external view returns (uint256);\n\n  function getExpiryTime() external view returns (uint256);\n\n  function MAX_PAYOUT() external view returns (uint256);\n\n  function FEE_DENOMINATOR() external view returns (uint256);\n\n  function FEE_LIMIT() external view returns (uint256);\n\n  function SET_MINT_HOOK_ROLE() external view returns (bytes32);\n\n  function SET_REDEEM_HOOK_ROLE() external view returns (bytes32);\n\n  function SET_FINAL_LONG_PAYOUT_ROLE() external view returns (bytes32);\n\n  function SET_REDEMPTION_FEE_ROLE() external view returns (bytes32);\n}\n"
    },
    "contracts/interfaces/IPrePOMarketFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity =0.8.7;\n\ninterface IPrePOMarketFactory {\n  event CollateralValidityChanged(address collateral, bool allowed);\n\n  event MarketAdded(address market);\n\n  function createMarket(\n    string memory tokenNameSuffix,\n    string memory tokenSymbolSuffix,\n    bytes32 longTokenSalt,\n    bytes32 shortTokenSalt,\n    address collateral,\n    address governance,\n    uint256 floorLongPayout,\n    uint256 ceilingLongPayout,\n    uint256 floorValuation,\n    uint256 ceilingValuation,\n    uint256 expiryTime\n  ) external;\n\n  function setCollateralValidity(address collateral, bool validity) external;\n\n  function isValidCollateral(address collateral) external view returns (bool);\n\n  function isValidMarket(address market) external view returns (bool);\n\n  function CREATE_MARKET_ROLE() external view returns (bytes32);\n\n  function SET_COLLATERAL_VALIDITY_ROLE() external view returns (bytes32);\n}\n"
    },
    "contracts/interfaces/IWithdrawHook.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\nimport \"./IHook.sol\";\n\ninterface IWithdrawHook is IHook {\n  event GlobalPeriodLengthChange(uint256 period);\n\n  event GlobalWithdrawLimitPerPeriodChange(uint256 limit);\n\n  function setGlobalPeriodLength(uint256 globalPeriodLength) external;\n\n  function setGlobalWithdrawLimitPerPeriod(\n    uint256 globalWithdrawLimitPerPeriod\n  ) external;\n\n  function getGlobalPeriodLength() external view returns (uint256);\n\n  function getGlobalWithdrawLimitPerPeriod() external view returns (uint256);\n\n  function getLastGlobalPeriodReset() external view returns (uint256);\n\n  function getGlobalAmountWithdrawnThisPeriod()\n    external\n    view\n    returns (uint256);\n\n  function getEffectiveGlobalWithdrawLimitPerPeriod()\n    external\n    view\n    returns (uint256);\n\n  function PERCENT_DENOMINATOR() external pure returns (uint256);\n\n  function MAX_GLOBAL_PERIOD_LENGTH() external pure returns (uint256);\n\n  function MIN_GLOBAL_WITHDRAW_LIMIT_PERCENT_PER_PERIOD()\n    external\n    pure\n    returns (uint256);\n\n  function MIN_GLOBAL_WITHDRAW_LIMIT_PER_PERIOD()\n    external\n    view\n    returns (uint256);\n\n  function SET_COLLATERAL_ROLE() external view returns (bytes32);\n\n  function SET_DEPOSIT_RECORD_ROLE() external view returns (bytes32);\n\n  function SET_GLOBAL_PERIOD_LENGTH_ROLE() external view returns (bytes32);\n\n  function SET_GLOBAL_WITHDRAW_LIMIT_PER_PERIOD_ROLE()\n    external\n    view\n    returns (bytes32);\n\n  function SET_TREASURY_ROLE() external view returns (bytes32);\n\n  function SET_TOKEN_SENDER_ROLE() external view returns (bytes32);\n}\n"
    },
    "contracts/LongShortToken.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\nimport \"./interfaces/ILongShortToken.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n\ncontract LongShortToken is ILongShortToken, ERC20Burnable, Ownable {\n  constructor(string memory name, string memory symbol) ERC20(name, symbol) {}\n\n  function owner()\n    public\n    view\n    override(Ownable, ILongShortToken)\n    returns (address)\n  {\n    return super.owner();\n  }\n\n  function mint(address recipient, uint256 amount)\n    external\n    override\n    onlyOwner\n  {\n    _mint(recipient, amount);\n  }\n\n  function burnFrom(address account, uint256 amount)\n    public\n    override(ERC20Burnable, ILongShortToken)\n  {\n    if (msg.sender == owner()) {\n      super._burn(account, amount);\n      return;\n    }\n    super.burnFrom(account, amount);\n  }\n}\n"
    },
    "contracts/PrePOMarket.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\nimport \"./interfaces/IHook.sol\";\nimport \"./interfaces/ILongShortToken.sol\";\nimport \"./interfaces/IPrePOMarket.sol\";\nimport \"prepo-shared-contracts/contracts/SafeAccessControlEnumerable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract PrePOMarket is\n  IPrePOMarket,\n  ReentrancyGuard,\n  SafeAccessControlEnumerable\n{\n  IHook private _mintHook;\n  IHook private _redeemHook;\n\n  IERC20 private immutable _collateral;\n  ILongShortToken private immutable _longToken;\n  ILongShortToken private immutable _shortToken;\n\n  uint256 private immutable _floorLongPayout;\n  uint256 private immutable _ceilingLongPayout;\n  uint256 private _finalLongPayout;\n\n  uint256 private immutable _floorValuation;\n  uint256 private immutable _ceilingValuation;\n\n  uint256 private _redemptionFee;\n\n  uint256 private immutable _expiryTime;\n\n  uint256 public constant override MAX_PAYOUT = 1e18;\n  uint256 public constant override FEE_DENOMINATOR = 1000000;\n  uint256 public constant override FEE_LIMIT = 100000;\n\n  bytes32 public constant override SET_MINT_HOOK_ROLE =\n    keccak256(\"setMintHook\");\n  bytes32 public constant override SET_REDEEM_HOOK_ROLE =\n    keccak256(\"setRedeemHook\");\n  bytes32 public constant override SET_FINAL_LONG_PAYOUT_ROLE =\n    keccak256(\"setFinalLongPayout\");\n  bytes32 public constant override SET_REDEMPTION_FEE_ROLE =\n    keccak256(\"setRedemptionFee\");\n\n  /**\n   * Assumes `_collateral`, `_longToken`, and `_shortToken` are\n   * valid, since they will be handled by the PrePOMarketFactory. The\n   * treasury is initialized to governance due to stack limitations.\n   *\n   * Assumes that ownership of `_longToken` and `_shortToken` has been\n   * transferred to this contract via `createMarket()` in\n   * `PrePOMarketFactory.sol`.\n   */\n  constructor(\n    address owner,\n    address collateral,\n    ILongShortToken longToken,\n    ILongShortToken shortToken,\n    uint256 floorLongPayout,\n    uint256 ceilingLongPayout,\n    uint256 floorValuation,\n    uint256 ceilingValuation,\n    uint256 expiryTime\n  ) {\n    require(ceilingLongPayout > floorLongPayout, \"Ceiling must exceed floor\");\n    require(expiryTime > block.timestamp, \"Invalid expiry\");\n    require(ceilingLongPayout <= MAX_PAYOUT, \"Ceiling cannot exceed 1\");\n\n    _revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    _grantRole(DEFAULT_ADMIN_ROLE, owner);\n\n    _collateral = IERC20(collateral);\n    _longToken = longToken;\n    _shortToken = shortToken;\n\n    _floorLongPayout = floorLongPayout;\n    _ceilingLongPayout = ceilingLongPayout;\n    _finalLongPayout = MAX_PAYOUT + 1;\n\n    _floorValuation = floorValuation;\n    _ceilingValuation = ceilingValuation;\n\n    _expiryTime = expiryTime;\n\n    emit MarketCreated(\n      address(longToken),\n      address(shortToken),\n      floorLongPayout,\n      ceilingLongPayout,\n      floorValuation,\n      ceilingValuation,\n      expiryTime\n    );\n  }\n\n  function mint(uint256 amount)\n    external\n    override\n    nonReentrant\n    returns (uint256)\n  {\n    require(_finalLongPayout > MAX_PAYOUT, \"Market ended\");\n    require(\n      _collateral.balanceOf(msg.sender) >= amount,\n      \"Insufficient collateral\"\n    );\n    if (address(_mintHook) != address(0)) {\n      _mintHook.hook(msg.sender, msg.sender, amount, amount);\n    }\n    _collateral.transferFrom(msg.sender, address(this), amount);\n    _longToken.mint(msg.sender, amount);\n    _shortToken.mint(msg.sender, amount);\n    emit Mint(msg.sender, amount);\n    return amount;\n  }\n\n  function redeem(\n    uint256 longAmount,\n    uint256 shortAmount,\n    address recipient\n  ) external override nonReentrant {\n    require(\n      _longToken.balanceOf(msg.sender) >= longAmount,\n      \"Insufficient long tokens\"\n    );\n    require(\n      _shortToken.balanceOf(msg.sender) >= shortAmount,\n      \"Insufficient short tokens\"\n    );\n    uint256 collateralAmount;\n    if (_finalLongPayout <= MAX_PAYOUT) {\n      uint256 shortPayout = MAX_PAYOUT - _finalLongPayout;\n      collateralAmount =\n        (_finalLongPayout * longAmount + shortPayout * shortAmount) /\n        MAX_PAYOUT;\n    } else {\n      require(longAmount == shortAmount, \"Long and Short must be equal\");\n      collateralAmount = longAmount;\n    }\n\n    uint256 actualFee;\n    uint256 expectedFee = (collateralAmount * _redemptionFee) /\n      FEE_DENOMINATOR;\n    if (_redemptionFee > 0) {\n      require(expectedFee > 0, \"fee = 0\");\n    } else {\n      require(collateralAmount > 0, \"amount = 0\");\n    }\n    if (address(_redeemHook) != address(0)) {\n      _collateral.approve(address(_redeemHook), expectedFee);\n      uint256 collateralAllowanceBefore = _collateral.allowance(\n        address(this),\n        address(_redeemHook)\n      );\n      _redeemHook.hook(\n        msg.sender,\n        recipient,\n        collateralAmount,\n        collateralAmount - expectedFee\n      );\n      actualFee =\n        collateralAllowanceBefore -\n        _collateral.allowance(address(this), address(_redeemHook));\n      _collateral.approve(address(_redeemHook), 0);\n    } else {\n      actualFee = 0;\n    }\n\n    _longToken.burnFrom(msg.sender, longAmount);\n    _shortToken.burnFrom(msg.sender, shortAmount);\n    uint256 collateralAfterFee = collateralAmount - actualFee;\n    _collateral.transfer(recipient, collateralAfterFee);\n\n    emit Redemption(msg.sender, recipient, collateralAfterFee, actualFee);\n  }\n\n  function setMintHook(IHook mintHook)\n    external\n    override\n    onlyRole(SET_MINT_HOOK_ROLE)\n  {\n    _mintHook = mintHook;\n    emit MintHookChange(address(_mintHook));\n  }\n\n  function setRedeemHook(IHook redeemHook)\n    external\n    override\n    onlyRole(SET_REDEEM_HOOK_ROLE)\n  {\n    _redeemHook = redeemHook;\n    emit RedeemHookChange(address(redeemHook));\n  }\n\n  function setFinalLongPayout(uint256 finalLongPayout)\n    external\n    override\n    onlyRole(SET_FINAL_LONG_PAYOUT_ROLE)\n  {\n    require(_finalLongPayout == MAX_PAYOUT + 1, \"Final payout already set\");\n    require(\n      finalLongPayout >= _floorLongPayout,\n      \"Payout cannot be below floor\"\n    );\n    require(\n      finalLongPayout <= _ceilingLongPayout,\n      \"Payout cannot exceed ceiling\"\n    );\n    _finalLongPayout = finalLongPayout;\n    emit FinalLongPayoutSet(finalLongPayout);\n  }\n\n  function setRedemptionFee(uint256 redemptionFee)\n    external\n    override\n    onlyRole(SET_REDEMPTION_FEE_ROLE)\n  {\n    require(redemptionFee <= FEE_LIMIT, \"Exceeds fee limit\");\n    _redemptionFee = redemptionFee;\n    emit RedemptionFeeChange(redemptionFee);\n  }\n\n  function getMintHook() external view override returns (IHook) {\n    return _mintHook;\n  }\n\n  function getRedeemHook() external view override returns (IHook) {\n    return _redeemHook;\n  }\n\n  function getCollateral() external view override returns (IERC20) {\n    return _collateral;\n  }\n\n  function getLongToken() external view override returns (ILongShortToken) {\n    return _longToken;\n  }\n\n  function getShortToken() external view override returns (ILongShortToken) {\n    return _shortToken;\n  }\n\n  function getFloorLongPayout() external view override returns (uint256) {\n    return _floorLongPayout;\n  }\n\n  function getCeilingLongPayout() external view override returns (uint256) {\n    return _ceilingLongPayout;\n  }\n\n  function getFinalLongPayout() external view override returns (uint256) {\n    return _finalLongPayout;\n  }\n\n  function getFloorValuation() external view override returns (uint256) {\n    return _floorValuation;\n  }\n\n  function getCeilingValuation() external view override returns (uint256) {\n    return _ceilingValuation;\n  }\n\n  function getRedemptionFee() external view override returns (uint256) {\n    return _redemptionFee;\n  }\n\n  function getExpiryTime() external view override returns (uint256) {\n    return _expiryTime;\n  }\n}\n"
    },
    "contracts/PrePOMarketFactory.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\nimport \"./LongShortToken.sol\";\nimport \"./PrePOMarket.sol\";\nimport \"./interfaces/ILongShortToken.sol\";\nimport \"./interfaces/IPrePOMarketFactory.sol\";\nimport \"prepo-shared-contracts/contracts/SafeAccessControlEnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\ncontract PrePOMarketFactory is\n  IPrePOMarketFactory,\n  ReentrancyGuardUpgradeable,\n  SafeAccessControlEnumerableUpgradeable\n{\n  mapping(address => bool) private _collateralToValidity;\n  mapping(address => bool) private _marketToValidity;\n\n  bytes32 public constant override CREATE_MARKET_ROLE =\n    keccak256(\"createMarket\");\n  bytes32 public constant override SET_COLLATERAL_VALIDITY_ROLE =\n    keccak256(\"setCollateralValidity\");\n\n  function initialize() public initializer {\n    __SafeAccessControlEnumerable_init();\n    __ReentrancyGuard_init();\n  }\n\n  function isValidCollateral(address collateral)\n    external\n    view\n    override\n    returns (bool)\n  {\n    return _collateralToValidity[collateral];\n  }\n\n  function isValidMarket(address market)\n    external\n    view\n    override\n    returns (bool)\n  {\n    return _marketToValidity[market];\n  }\n\n  function createMarket(\n    string memory tokenNameSuffix,\n    string memory tokenSymbolSuffix,\n    bytes32 longTokenSalt,\n    bytes32 shortTokenSalt,\n    address owner,\n    address collateral,\n    uint256 floorLongPayout,\n    uint256 ceilingLongPayout,\n    uint256 floorValuation,\n    uint256 ceilingValuation,\n    uint256 expiryTime\n  ) external override onlyRole(CREATE_MARKET_ROLE) nonReentrant {\n    require(_collateralToValidity[collateral], \"Invalid collateral\");\n    (LongShortToken longToken, LongShortToken shortToken) = _createPairTokens(\n      tokenNameSuffix,\n      tokenSymbolSuffix,\n      longTokenSalt,\n      shortTokenSalt\n    );\n    require(\n      address(longToken) < collateral,\n      \"longToken address >= collateral\"\n    );\n    require(\n      address(shortToken) < collateral,\n      \"shortToken address >= collateral\"\n    );\n    bytes32 salt = keccak256(abi.encodePacked(longToken, shortToken));\n    PrePOMarket newMarket = new PrePOMarket{salt: salt}(\n      owner,\n      collateral,\n      ILongShortToken(address(longToken)),\n      ILongShortToken(address(shortToken)),\n      floorLongPayout,\n      ceilingLongPayout,\n      floorValuation,\n      ceilingValuation,\n      expiryTime\n    );\n    _marketToValidity[address(newMarket)] = true;\n    longToken.transferOwnership(address(newMarket));\n    shortToken.transferOwnership(address(newMarket));\n    emit MarketAdded(address(newMarket));\n  }\n\n  function setCollateralValidity(address collateral, bool validity)\n    external\n    override\n    onlyRole(SET_COLLATERAL_VALIDITY_ROLE)\n  {\n    _collateralToValidity[collateral] = validity;\n    emit CollateralValidityChanged(collateral, validity);\n  }\n\n  function _createPairTokens(\n    string memory tokenNameSuffix,\n    string memory tokenSymbolSuffix,\n    bytes32 longTokenSalt,\n    bytes32 shortTokenSalt\n  )\n    internal\n    returns (LongShortToken newLongToken, LongShortToken newShortToken)\n  {\n    string memory longTokenName = string(\n      abi.encodePacked(\"LONG\", \" \", tokenNameSuffix)\n    );\n    string memory shortTokenName = string(\n      abi.encodePacked(\"SHORT\", \" \", tokenNameSuffix)\n    );\n    string memory longTokenSymbol = string(\n      abi.encodePacked(\"L\", \"_\", tokenSymbolSuffix)\n    );\n    string memory shortTokenSymbol = string(\n      abi.encodePacked(\"S\", \"_\", tokenSymbolSuffix)\n    );\n    newLongToken = new LongShortToken{salt: longTokenSalt}(\n      longTokenName,\n      longTokenSymbol\n    );\n    newShortToken = new LongShortToken{salt: shortTokenSalt}(\n      shortTokenName,\n      shortTokenSymbol\n    );\n    return (newLongToken, newShortToken);\n  }\n}\n"
    },
    "contracts/RedeemHook.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\nimport \"./interfaces/IHook.sol\";\nimport \"./interfaces/IPrePOMarket.sol\";\nimport \"prepo-shared-contracts/contracts/AccountListCaller.sol\";\nimport \"prepo-shared-contracts/contracts/AllowedMsgSenders.sol\";\nimport \"prepo-shared-contracts/contracts/SafeOwnable.sol\";\nimport \"prepo-shared-contracts/contracts/TokenSenderCaller.sol\";\nimport \"prepo-shared-contracts/contracts/TreasuryCaller.sol\";\n\ncontract RedeemHook is\n  IHook,\n  AccountListCaller,\n  AllowedMsgSenders,\n  SafeOwnable,\n  TokenSenderCaller,\n  TreasuryCaller\n{\n  function hook(\n    address funder,\n    address recipient,\n    uint256 amountBeforeFee,\n    uint256 amountAfterFee\n  ) external virtual override onlyAllowedMsgSenders {\n    require(_accountList.isIncluded(funder), \"Redeemer not allowed\");\n    uint256 fee = amountBeforeFee - amountAfterFee;\n    if (fee > 0) {\n      IPrePOMarket(msg.sender).getCollateral().transferFrom(\n        msg.sender,\n        _treasury,\n        fee\n      );\n      _tokenSender.send(recipient, fee);\n    }\n  }\n\n  function setAllowedMsgSenders(IAccountList allowedMsgSenders)\n    public\n    virtual\n    override\n    onlyOwner\n  {\n    super.setAllowedMsgSenders(allowedMsgSenders);\n  }\n\n  function setAccountList(IAccountList accountList)\n    public\n    virtual\n    override\n    onlyOwner\n  {\n    super.setAccountList(accountList);\n  }\n\n  function setTreasury(address _treasury) public override onlyOwner {\n    super.setTreasury(_treasury);\n  }\n\n  function setTokenSender(ITokenSender tokenSender) public override onlyOwner {\n    super.setTokenSender(tokenSender);\n  }\n}\n"
    },
    "contracts/test/TestRedeemHook.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\nimport \"../interfaces/IHook.sol\";\nimport \"../interfaces/IPrePOMarket.sol\";\n\n/// @notice this contract is a test contract made to test a use case where the redeem hook only takes a part of the fee\ncontract TestRedeemHook is IHook {\n  address public treasury = address(5);\n\n  function hook(\n    address,\n    address recipient,\n    uint256 amountBeforeFee,\n    uint256 amountAfterFee\n  ) external virtual override {\n    uint256 fee = ((amountBeforeFee - amountAfterFee) * 5) / 10;\n    IPrePOMarket(msg.sender).getCollateral().transferFrom(\n      msg.sender,\n      treasury,\n      fee\n    );\n  }\n}\n"
    },
    "contracts/WithdrawHook.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\nimport \"./interfaces/IWithdrawHook.sol\";\nimport \"./AllowedCollateralCaller.sol\";\nimport \"./DepositRecordCaller.sol\";\nimport \"prepo-shared-contracts/contracts/SafeAccessControlEnumerable.sol\";\nimport \"prepo-shared-contracts/contracts/TokenSenderCaller.sol\";\nimport \"prepo-shared-contracts/contracts/TreasuryCaller.sol\";\n\ncontract WithdrawHook is\n  IWithdrawHook,\n  AllowedCollateralCaller,\n  DepositRecordCaller,\n  SafeAccessControlEnumerable,\n  TokenSenderCaller,\n  TreasuryCaller\n{\n  uint256 private _globalPeriodLength;\n  uint256 private _globalWithdrawLimitPerPeriod;\n  uint256 private _lastGlobalPeriodReset;\n  uint256 private _globalAmountWithdrawnThisPeriod;\n\n  uint256 public constant override PERCENT_DENOMINATOR = 1000000;\n  uint256 public constant override MAX_GLOBAL_PERIOD_LENGTH = 7 days;\n  uint256\n    public constant\n    override MIN_GLOBAL_WITHDRAW_LIMIT_PERCENT_PER_PERIOD = 30000;\n  uint256 public immutable override MIN_GLOBAL_WITHDRAW_LIMIT_PER_PERIOD;\n\n  bytes32 public constant override SET_COLLATERAL_ROLE =\n    keccak256(\"setCollateral\");\n  bytes32 public constant override SET_DEPOSIT_RECORD_ROLE =\n    keccak256(\"setDepositRecord\");\n  bytes32 public constant override SET_GLOBAL_PERIOD_LENGTH_ROLE =\n    keccak256(\"setGlobalPeriodLength\");\n  bytes32 public constant override SET_GLOBAL_WITHDRAW_LIMIT_PER_PERIOD_ROLE =\n    keccak256(\"setGlobalWithdrawLimitPerPeriod\");\n  bytes32 public constant override SET_TREASURY_ROLE =\n    keccak256(\"setTreasury\");\n  bytes32 public constant override SET_TOKEN_SENDER_ROLE =\n    keccak256(\"setTokenSender\");\n\n  constructor(uint256 baseTokenDecimals) {\n    MIN_GLOBAL_WITHDRAW_LIMIT_PER_PERIOD = 10**baseTokenDecimals * 5;\n  }\n\n  /*\n   * @dev While we could include the period length in the last reset\n   * timestamp, not initially adding it means that a change in period will\n   * be reflected immediately.\n   *\n   * We use `_amountBeforeFee` for updating global net deposits for a more\n   * accurate value.\n   */\n  function hook(\n    address funder,\n    address recipient,\n    uint256 amountBeforeFee,\n    uint256 amountAfterFee\n  ) external override onlyCollateral {\n    if (_lastGlobalPeriodReset + _globalPeriodLength < block.timestamp) {\n      _lastGlobalPeriodReset = block.timestamp;\n      _globalAmountWithdrawnThisPeriod = 0;\n    }\n    require(\n      _globalAmountWithdrawnThisPeriod + amountBeforeFee <=\n        getEffectiveGlobalWithdrawLimitPerPeriod(),\n      \"Global withdraw limit exceeded\"\n    );\n    _globalAmountWithdrawnThisPeriod += amountBeforeFee;\n    _depositRecord.recordWithdrawal(amountBeforeFee);\n    uint256 fee = amountBeforeFee - amountAfterFee;\n    if (fee > 0) {\n      _collateral.getBaseToken().transferFrom(\n        address(_collateral),\n        _treasury,\n        fee\n      );\n      _tokenSender.send(recipient, fee);\n    }\n  }\n\n  function setCollateral(ICollateral collateral)\n    public\n    override\n    onlyRole(SET_COLLATERAL_ROLE)\n  {\n    super.setCollateral(collateral);\n  }\n\n  function setDepositRecord(IDepositRecord depositRecord)\n    public\n    override\n    onlyRole(SET_DEPOSIT_RECORD_ROLE)\n  {\n    super.setDepositRecord(depositRecord);\n  }\n\n  function setGlobalPeriodLength(uint256 globalPeriodLength)\n    external\n    override\n    onlyRole(SET_GLOBAL_PERIOD_LENGTH_ROLE)\n  {\n    require(\n      globalPeriodLength <= MAX_GLOBAL_PERIOD_LENGTH,\n      \"Exceeds period limit\"\n    );\n    _globalPeriodLength = globalPeriodLength;\n    emit GlobalPeriodLengthChange(globalPeriodLength);\n  }\n\n  function setGlobalWithdrawLimitPerPeriod(\n    uint256 globalWithdrawLimitPerPeriod\n  ) external override onlyRole(SET_GLOBAL_WITHDRAW_LIMIT_PER_PERIOD_ROLE) {\n    require(\n      globalWithdrawLimitPerPeriod >= getMinGlobalWithdrawLimitPerPeriod(),\n      \"Limit too low\"\n    );\n    _globalWithdrawLimitPerPeriod = globalWithdrawLimitPerPeriod;\n    emit GlobalWithdrawLimitPerPeriodChange(globalWithdrawLimitPerPeriod);\n  }\n\n  function setTreasury(address treasury)\n    public\n    override\n    onlyRole(SET_TREASURY_ROLE)\n  {\n    super.setTreasury(treasury);\n  }\n\n  function setTokenSender(ITokenSender tokenSender)\n    public\n    override\n    onlyRole(SET_TOKEN_SENDER_ROLE)\n  {\n    super.setTokenSender(tokenSender);\n  }\n\n  function getGlobalPeriodLength() external view override returns (uint256) {\n    return _globalPeriodLength;\n  }\n\n  function getGlobalWithdrawLimitPerPeriod()\n    external\n    view\n    override\n    returns (uint256)\n  {\n    return _globalWithdrawLimitPerPeriod;\n  }\n\n  function getLastGlobalPeriodReset()\n    external\n    view\n    override\n    returns (uint256)\n  {\n    return _lastGlobalPeriodReset;\n  }\n\n  function getGlobalAmountWithdrawnThisPeriod()\n    external\n    view\n    override\n    returns (uint256)\n  {\n    return _globalAmountWithdrawnThisPeriod;\n  }\n\n  function getEffectiveGlobalWithdrawLimitPerPeriod()\n    public\n    view\n    override\n    returns (uint256)\n  {\n    return\n      max(_globalWithdrawLimitPerPeriod, getMinGlobalWithdrawLimitPerPeriod());\n  }\n\n  function getMinGlobalWithdrawLimitPerPeriod()\n    internal\n    view\n    returns (uint256)\n  {\n    uint256 minWithdrawLimitPerPeriodFromPercent = (_depositRecord\n      .getGlobalNetDepositAmount() *\n      MIN_GLOBAL_WITHDRAW_LIMIT_PERCENT_PER_PERIOD) / PERCENT_DENOMINATOR;\n    return\n      max(\n        MIN_GLOBAL_WITHDRAW_LIMIT_PER_PERIOD,\n        minWithdrawLimitPerPeriodFromPercent\n      );\n  }\n\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\n    return a >= b ? a : b;\n  }\n}\n"
    },
    "prepo-shared-contracts/contracts/AccountListCaller.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\nimport \"./interfaces/IAccountList.sol\";\nimport \"./interfaces/IAccountListCaller.sol\";\n\ncontract AccountListCaller is IAccountListCaller {\n  IAccountList internal _accountList;\n\n  function setAccountList(IAccountList accountList) public virtual override {\n    _accountList = accountList;\n    emit AccountListChange(accountList);\n  }\n\n  function getAccountList() external view override returns (IAccountList) {\n    return _accountList;\n  }\n}\n"
    },
    "prepo-shared-contracts/contracts/AllowedMsgSenders.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\nimport \"./interfaces/IAllowedMsgSenders.sol\";\nimport \"./interfaces/IAccountList.sol\";\n\ncontract AllowedMsgSenders is IAllowedMsgSenders {\n  IAccountList private _allowedMsgSenders;\n\n  modifier onlyAllowedMsgSenders() {\n    require(\n      _allowedMsgSenders.isIncluded(msg.sender),\n      \"msg.sender not allowed\"\n    );\n    _;\n  }\n\n  function setAllowedMsgSenders(IAccountList allowedMsgSenders)\n    public\n    virtual\n    override\n  {\n    _allowedMsgSenders = allowedMsgSenders;\n    emit AllowedMsgSendersChange(allowedMsgSenders);\n  }\n\n  function getAllowedMsgSenders()\n    external\n    view\n    virtual\n    override\n    returns (IAccountList)\n  {\n    return _allowedMsgSenders;\n  }\n}\n"
    },
    "prepo-shared-contracts/contracts/interfaces/IAccountList.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\n/**\n * @notice Stores whether an address is included in a set.\n */\ninterface IAccountList {\n  /**\n   * @notice Sets whether an address in `accounts` is included.\n   * @dev Whether an account is included is based on the boolean value at its\n   * respective index in `included`. This function will only edit the\n   * inclusion of addresses in `accounts`.\n   *\n   * The length of `accounts` and `included` must match.\n   *\n   * Only callable by `owner()`.\n   * @param accounts Addresses to change inclusion for\n   * @param included Whether to include corresponding address in `accounts`\n   */\n  function set(address[] calldata accounts, bool[] calldata included) external;\n\n  /**\n   * @notice Removes every address from the set. Atomically includes any\n   * addresses in `newIncludedAccounts`.\n   * @dev Only callable by `owner()`.\n   * @param includedAccounts Addresses to include after reset\n   */\n  function reset(address[] calldata includedAccounts) external;\n\n  /**\n   * @param account Address to check inclusion for\n   * @return Whether `account` is included\n   */\n  function isIncluded(address account) external view returns (bool);\n}\n"
    },
    "prepo-shared-contracts/contracts/interfaces/IAccountListCaller.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\nimport \"./IAccountList.sol\";\n\ninterface IAccountListCaller {\n  event AccountListChange(IAccountList accountList);\n\n  function setAccountList(IAccountList accountList) external;\n\n  function getAccountList() external view returns (IAccountList);\n}\n"
    },
    "prepo-shared-contracts/contracts/interfaces/IAllowedMsgSenders.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\nimport \"./IAccountList.sol\";\n\ninterface IAllowedMsgSenders {\n  event AllowedMsgSendersChange(IAccountList allowedMsgSenders);\n\n  function setAllowedMsgSenders(IAccountList allowedMsgSenders) external;\n\n  function getAllowedMsgSenders() external view returns (IAccountList);\n}\n"
    },
    "prepo-shared-contracts/contracts/interfaces/ISafeAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\nimport \"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\";\n\n/**\n * @notice An extension of OpenZeppelin's `AccessControlEnumerable.sol`\n * contract that requires an address/role to initially be nominated, and then\n * accepted, before the role or admin role is granted.\n */\ninterface ISafeAccessControlEnumerable is IAccessControlEnumerable {\n  /**\n   * @dev Emitted via `setRoleAdminNominee()` and `acceptRoleAdmin()`.\n   * @param role The role an admin was nominated for\n   * @param newRoleAdminNominee The role nominated as the new admin\n   */\n  event RoleAdminNomineeUpdate(bytes32 role, bytes32 newRoleAdminNominee);\n\n  /**\n   * @dev Emitted via `grantRole()`, `acceptRole()`, and `revokeNomination()`.\n   * @param role The role that an address's nomination status was changed for\n   * @param account The nominee whose nomination status was changed\n   * @param nominated Whether the address was nominated\n   */\n  event RoleNomineeUpdate(bytes32 role, address account, bool nominated);\n\n  /**\n   * @notice Nominates a role to be a role admin.\n   * @dev Only callable by a member of the role's current role admin.\n   * @param role The role for which role admin is to be nominated\n   * @param adminRoleNominee The role admin to be nominated\n   */\n  function setRoleAdminNominee(bytes32 role, bytes32 adminRoleNominee)\n    external;\n\n  /**\n   * @notice Accepts a role admin nomination.\n   * @dev Only callable by a member of the role admin nominee.\n   * @param role The role a role admin nomination is to be accepted for\n   */\n  function acceptRoleAdmin(bytes32 role) external;\n\n  /**\n   * @notice Accepts a role nomination.\n   * @dev Only callable by the role nominee.\n   * @param role The role of the nomination to be accepted\n   */\n  function acceptRole(bytes32 role) external;\n\n  /**\n   * @notice Revokes a role nomination.\n   * @dev Only callable by a member of the role's current role admin.\n   * @param role The role of the nomination to be revoked\n   * @param account Address for which nomination is to be revoked\n   */\n  function revokeNomination(bytes32 role, address account) external;\n\n  /**\n   * @param role The role to retrieve the role admin nominee for\n   * @return The current role admin nominee of `role`\n   */\n  function getRoleAdminNominee(bytes32 role) external view returns (bytes32);\n\n  /**\n   * @param role The role to retrieve nomination status for\n   * @param account The address to retrieve nomination status for\n   * @return Whether `account` is nominated for `role`\n   */\n  function isNominated(bytes32 role, address account)\n    external\n    view\n    returns (bool);\n}\n"
    },
    "prepo-shared-contracts/contracts/interfaces/ISafeAccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\nimport \"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\";\n\n/**\n * @notice An extension of OpenZeppelin's\n * `AccessControlEnumerableUpgradeable.sol` contract that requires an\n * address/role to initially be nominated, and then accepted, before the role\n * or admin role is granted.\n * @dev Inheriting contract must call `__SafeAccessControlEnumerable_init()`\n * within their own externally exposed `initializer`.\n */\ninterface ISafeAccessControlEnumerableUpgradeable is\n  IAccessControlEnumerableUpgradeable\n{\n  /**\n   * @dev Emitted via `setRoleAdminNominee()` and `acceptRoleAdmin()`.\n   * @param role The role an admin was nominated for\n   * @param newRoleAdminNominee The role nominated as the new admin\n   */\n  event RoleAdminNomineeUpdate(bytes32 role, bytes32 newRoleAdminNominee);\n\n  /**\n   * @dev Emitted via `grantRole`, `acceptRole`, and `revokeNomination`.\n   * @param role The role that an address's nomination status was changed for\n   * @param account The nominee whose nomination status was changed\n   * @param nominated Whether the address was nominated\n   */\n  event RoleNomineeUpdate(bytes32 role, address account, bool nominated);\n\n  /**\n   * @notice Nominates a role to be a role admin.\n   * @dev Only callable by a member of the role's current role admin.\n   * @param role The role a role admin is to be nominated for\n   * @param adminRoleNominee The role admin to be nominated\n   */\n  function setRoleAdminNominee(bytes32 role, bytes32 adminRoleNominee)\n    external;\n\n  /**\n   * @notice Accepts a role admin nomination.\n   * @dev Only callable by a member of the role admin nominee.\n   * @param role The role a role admin nomination is to be accepted for\n   */\n  function acceptRoleAdmin(bytes32 role) external;\n\n  /**\n   * @notice Accepts a role nomination.\n   * @dev Only callable by the role nominee.\n   * @param role The role of the nomination to be accepted\n   */\n  function acceptRole(bytes32 role) external;\n\n  /**\n   * @notice Revokes a role nomination.\n   * @dev Only callable by a member of the role's current role admin.\n   * @param role The role of the nomination to be revoked\n   * @param account The address of the nomination to be revoked\n   */\n  function revokeNomination(bytes32 role, address account) external;\n\n  /**\n   * @param role The role to retrieve a role admin nominee for\n   * @return The current role admin nominee of `role`\n   */\n  function getRoleAdminNominee(bytes32 role) external view returns (bytes32);\n\n  /**\n   * @param role The role to retrieve nomination status for\n   * @param account The address to retrieve nomination status for\n   * @return Whether `account` is nominated for `role`\n   */\n  function isNominated(bytes32 role, address account)\n    external\n    view\n    returns (bool);\n}\n"
    },
    "prepo-shared-contracts/contracts/interfaces/ISafeOwnable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\n/**\n * @notice An extension of OpenZeppelin's `Ownable.sol` contract that requires\n * an address to be nominated, and then accept that nomination, before\n * ownership is transferred.\n */\ninterface ISafeOwnable {\n  /**\n   * @dev Emitted via `transferOwnership()`.\n   * @param previousNominee The previous nominee\n   * @param newNominee The new nominee\n   */\n  event NomineeUpdate(\n    address indexed previousNominee,\n    address indexed newNominee\n  );\n\n  /**\n   * @notice Nominates an address to be owner of the contract.\n   * @dev Only callable by `owner()`.\n   * @param nominee The address that will be nominated\n   */\n  function transferOwnership(address nominee) external;\n\n  /**\n   * @notice Renounces ownership of contract and leaves the contract\n   * without any owner.\n   * @dev Only callable by `owner()`.\n   * Sets nominee back to zero address.\n   * It will not be possible to call `onlyOwner` functions anymore.\n   */\n  function renounceOwnership() external;\n\n  /**\n   * @notice Accepts ownership nomination.\n   * @dev Only callable by the current nominee. Sets nominee back to zero\n   * address.\n   */\n  function acceptOwnership() external;\n\n  /// @return The current nominee\n  function getNominee() external view returns (address);\n}\n"
    },
    "prepo-shared-contracts/contracts/interfaces/ITokenSender.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\nimport \"./IUintValue.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ITokenSender {\n  event PriceChange(IUintValue price);\n\n  event PriceMultiplierChange(uint256 priceMultiplier);\n\n  event ScaledPriceLowerBoundChange(uint256 scaledPrice);\n\n  function send(address recipient, uint256 unconvertedAmount) external;\n\n  function setPrice(IUintValue price) external;\n\n  function setPriceMultiplier(uint256 multiplier) external;\n\n  function setScaledPriceLowerBound(uint256 lowerBound) external;\n\n  function getOutputToken() external view returns (IERC20);\n\n  function getPrice() external view returns (IUintValue);\n\n  function getPriceMultiplier() external view returns (uint256);\n\n  function getScaledPrice() external view returns (uint256);\n\n  function getScaledPriceLowerBound() external view returns (uint256);\n\n  function MULTIPLIER_DENOMINATOR() external view returns (uint256);\n\n  function SET_PRICE_ROLE() external view returns (bytes32);\n\n  function SET_PRICE_MULTIPLIER_ROLE() external view returns (bytes32);\n\n  function SET_SCALED_PRICE_LOWER_BOUND_ROLE() external view returns (bytes32);\n\n  function SET_ALLOWED_MSG_SENDERS_ROLE() external view returns (bytes32);\n\n  function WITHDRAW_ERC20_ROLE() external view returns (bytes32);\n}\n"
    },
    "prepo-shared-contracts/contracts/interfaces/ITokenSenderCaller.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\nimport \"./ITokenSender.sol\";\n\ninterface ITokenSenderCaller {\n  event TokenSenderChange(address sender);\n\n  function setTokenSender(ITokenSender tokenSender) external;\n\n  function getTokenSender() external returns (ITokenSender);\n}\n"
    },
    "prepo-shared-contracts/contracts/interfaces/ITreasuryCaller.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\ninterface ITreasuryCaller {\n  event TreasuryChange(address treasury);\n\n  function setTreasury(address treasury) external;\n\n  function getTreasury() external view returns (address);\n}\n"
    },
    "prepo-shared-contracts/contracts/interfaces/IUintValue.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\ninterface IUintValue {\n  function get() external view returns (uint256);\n}\n"
    },
    "prepo-shared-contracts/contracts/SafeAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\nimport \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport \"./interfaces/ISafeAccessControlEnumerable.sol\";\n\ncontract SafeAccessControlEnumerable is\n  ISafeAccessControlEnumerable,\n  AccessControlEnumerable\n{\n  mapping(bytes32 => bytes32) private _roleToRoleAdminNominee;\n  mapping(bytes32 => mapping(address => bool))\n    private _roleToAccountToNominated;\n\n  constructor() {\n    _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n  }\n\n  function setRoleAdminNominee(bytes32 role, bytes32 roleAdminNominee)\n    public\n    virtual\n    override\n    onlyRole(getRoleAdmin(role))\n  {\n    _setRoleAdminNominee(role, roleAdminNominee);\n  }\n\n  function acceptRoleAdmin(bytes32 role)\n    public\n    virtual\n    override\n    onlyRole(_roleToRoleAdminNominee[role])\n  {\n    _setRoleAdmin(role, _roleToRoleAdminNominee[role]);\n    _setRoleAdminNominee(role, 0x00);\n  }\n\n  function grantRole(bytes32 role, address account)\n    public\n    virtual\n    override\n    onlyRole(getRoleAdmin(role))\n  {\n    _setRoleNominee(role, account, true);\n  }\n\n  function acceptRole(bytes32 role) public virtual override {\n    require(\n      _roleToAccountToNominated[role][_msgSender()],\n      \"msg.sender != role nominee\"\n    );\n    _setRoleNominee(role, _msgSender(), false);\n    _grantRole(role, _msgSender());\n  }\n\n  function revokeNomination(bytes32 role, address account)\n    public\n    virtual\n    override\n    onlyRole(getRoleAdmin(role))\n  {\n    _setRoleNominee(role, account, false);\n  }\n\n  function getRoleAdminNominee(bytes32 role)\n    public\n    view\n    virtual\n    override\n    returns (bytes32)\n  {\n    return _roleToRoleAdminNominee[role];\n  }\n\n  function isNominated(bytes32 role, address account)\n    public\n    view\n    virtual\n    override\n    returns (bool)\n  {\n    return _roleToAccountToNominated[role][account];\n  }\n\n  function _setRoleAdminNominee(bytes32 role, bytes32 newRoleAdminNominee)\n    internal\n    virtual\n  {\n    emit RoleAdminNomineeUpdate(\n      _roleToRoleAdminNominee[role],\n      newRoleAdminNominee\n    );\n    _roleToRoleAdminNominee[role] = newRoleAdminNominee;\n  }\n\n  function _setRoleNominee(\n    bytes32 role,\n    address account,\n    bool nominationStatus\n  ) internal virtual {\n    _roleToAccountToNominated[role][account] = nominationStatus;\n    emit RoleNomineeUpdate(role, account, nominationStatus);\n  }\n}\n"
    },
    "prepo-shared-contracts/contracts/SafeAccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\nimport \"./interfaces/ISafeAccessControlEnumerableUpgradeable.sol\";\n\nabstract contract SafeAccessControlEnumerableUpgradeable is\n  ISafeAccessControlEnumerableUpgradeable,\n  AccessControlEnumerableUpgradeable\n{\n  mapping(bytes32 => bytes32) private _roleToRoleAdminNominee;\n  mapping(bytes32 => mapping(address => bool))\n    private _roleToAccountToNominated;\n\n  function __SafeAccessControlEnumerable_init() internal onlyInitializing {\n    _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n  }\n\n  function setRoleAdminNominee(bytes32 role, bytes32 roleAdminNominee)\n    public\n    virtual\n    override\n    onlyRole(getRoleAdmin(role))\n  {\n    _setRoleAdminNominee(role, roleAdminNominee);\n  }\n\n  function acceptRoleAdmin(bytes32 role)\n    public\n    virtual\n    override\n    onlyRole(_roleToRoleAdminNominee[role])\n  {\n    _setRoleAdmin(role, _roleToRoleAdminNominee[role]);\n    _setRoleAdminNominee(role, 0x00);\n  }\n\n  function grantRole(bytes32 role, address account)\n    public\n    virtual\n    override\n    onlyRole(getRoleAdmin(role))\n  {\n    _setRoleNominee(role, account, true);\n  }\n\n  function acceptRole(bytes32 role) public virtual override {\n    require(\n      _roleToAccountToNominated[role][_msgSender()],\n      \"msg.sender != role nominee\"\n    );\n    _setRoleNominee(role, _msgSender(), false);\n    _grantRole(role, _msgSender());\n  }\n\n  function revokeNomination(bytes32 role, address account)\n    public\n    virtual\n    override\n    onlyRole(getRoleAdmin(role))\n  {\n    _setRoleNominee(role, account, false);\n  }\n\n  function getRoleAdminNominee(bytes32 role)\n    public\n    view\n    virtual\n    override\n    returns (bytes32)\n  {\n    return _roleToRoleAdminNominee[role];\n  }\n\n  function isNominated(bytes32 role, address account)\n    public\n    view\n    virtual\n    override\n    returns (bool)\n  {\n    return _roleToAccountToNominated[role][account];\n  }\n\n  function _setRoleAdminNominee(bytes32 role, bytes32 newRoleAdminNominee)\n    internal\n    virtual\n  {\n    emit RoleAdminNomineeUpdate(\n      _roleToRoleAdminNominee[role],\n      newRoleAdminNominee\n    );\n    _roleToRoleAdminNominee[role] = newRoleAdminNominee;\n  }\n\n  function _setRoleNominee(\n    bytes32 role,\n    address account,\n    bool nominationStatus\n  ) internal virtual {\n    _roleToAccountToNominated[role][account] = nominationStatus;\n    emit RoleNomineeUpdate(role, account, nominationStatus);\n  }\n\n  /**\n   * @dev This empty reserved space is put in place to allow future versions to add new\n   * variables without shifting down storage in the inheritance chain.\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n   */\n  uint256[50] private __gap;\n}\n"
    },
    "prepo-shared-contracts/contracts/SafeOwnable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/ISafeOwnable.sol\";\n\ncontract SafeOwnable is ISafeOwnable, Ownable {\n  address private _nominee;\n\n  modifier onlyNominee() {\n    require(_msgSender() == _nominee, \"msg.sender != nominee\");\n    _;\n  }\n\n  function transferOwnership(address nominee)\n    public\n    virtual\n    override(ISafeOwnable, Ownable)\n    onlyOwner\n  {\n    _setNominee(nominee);\n  }\n\n  function acceptOwnership() public virtual override onlyNominee {\n    _transferOwnership(_nominee);\n    _setNominee(address(0));\n  }\n\n  function renounceOwnership()\n    public\n    virtual\n    override(ISafeOwnable, Ownable)\n    onlyOwner\n  {\n    super.renounceOwnership();\n    _setNominee(address(0));\n  }\n\n  function getNominee() public view virtual override returns (address) {\n    return _nominee;\n  }\n\n  function _setNominee(address nominee) internal virtual {\n    address _oldNominee = _nominee;\n    _nominee = nominee;\n    emit NomineeUpdate(_oldNominee, nominee);\n  }\n}\n"
    },
    "prepo-shared-contracts/contracts/TokenSenderCaller.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\nimport \"./interfaces/ITokenSenderCaller.sol\";\nimport \"./interfaces/ITokenSender.sol\";\n\ncontract TokenSenderCaller is ITokenSenderCaller {\n  ITokenSender internal _tokenSender;\n\n  function setTokenSender(ITokenSender tokenSender) public virtual override {\n    _tokenSender = tokenSender;\n    emit TokenSenderChange(address(tokenSender));\n  }\n\n  function getTokenSender() external view override returns (ITokenSender) {\n    return _tokenSender;\n  }\n}\n"
    },
    "prepo-shared-contracts/contracts/TreasuryCaller.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity =0.8.7;\n\nimport \"./interfaces/ITreasuryCaller.sol\";\n\ncontract TreasuryCaller is ITreasuryCaller {\n  address internal _treasury;\n\n  function setTreasury(address treasury) public virtual override {\n    _treasury = treasury;\n    emit TreasuryChange(treasury);\n  }\n\n  function getTreasury() external view override returns (address) {\n    return _treasury;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "Masset": ["storageLayout"],
        "FeederPool": ["storageLayout"],
        "EmissionsController": ["storageLayout"],
        "SavingsContract": ["storageLayout"],
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
