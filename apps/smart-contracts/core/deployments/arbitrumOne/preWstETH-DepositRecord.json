{
  "address": "0x641F6b46b0E694Ebc4631284B3b0020Cb577daC7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IAccountList",
          "name": "accountList",
          "type": "address"
        }
      ],
      "name": "AccountListChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IAccountList",
          "name": "allowedMsgSenders",
          "type": "address"
        }
      ],
      "name": "AllowedMsgSendersChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "GlobalNetDepositCapChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newRoleAdminNominee",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminNomineeUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "nominated",
          "type": "bool"
        }
      ],
      "name": "RoleNomineeUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "UserDepositCapChange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SET_ACCOUNT_LIST_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SET_ALLOWED_MSG_SENDERS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SET_GLOBAL_NET_DEPOSIT_CAP_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SET_USER_DEPOSIT_CAP_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "acceptRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "acceptRoleAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAccountList",
      "outputs": [
        {
          "internalType": "contract IAccountList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllowedMsgSenders",
      "outputs": [
        {
          "internalType": "contract IAccountList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGlobalNetDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGlobalNetDepositCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdminNominee",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUserDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserDepositCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isNominated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recordDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recordWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeNomination",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAccountList",
          "name": "accountList",
          "type": "address"
        }
      ],
      "name": "setAccountList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAccountList",
          "name": "allowedMsgSenders",
          "type": "address"
        }
      ],
      "name": "setAllowedMsgSenders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "globalNetDepositCap",
          "type": "uint256"
        }
      ],
      "name": "setGlobalNetDepositCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "roleAdminNominee",
          "type": "bytes32"
        }
      ],
      "name": "setRoleAdminNominee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "userDepositCap",
          "type": "uint256"
        }
      ],
      "name": "setUserDepositCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x27d0331cf0c06ecf2a3aa058dab3881ed6c45cb22d8d9a706112f001b56a2b6a",
  "receipt": {
    "to": null,
    "from": "0x4F05Cf239a8BC2bfdA92673bC3c8a87E091b6D97",
    "contractAddress": "0x641F6b46b0E694Ebc4631284B3b0020Cb577daC7",
    "transactionIndex": 2,
    "gasUsed": "9011189",
    "logsBloom": "0x
    "blockHash": "0xcdebeafe8cae821f57b4261a5e755077b7ed1605e95025acbd1e22db44d4c4a0",
    "transactionHash": "0x27d0331cf0c06ecf2a3aa058dab3881ed6c45cb22d8d9a706112f001b56a2b6a",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 67546864,
        "transactionHash": "0x27d0331cf0c06ecf2a3aa058dab3881ed6c45cb22d8d9a706112f001b56a2b6a",
        "address": "0x641F6b46b0E694Ebc4631284B3b0020Cb577daC7",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004f05cf239a8bc2bfda92673bc3c8a87e091b6d97",
          "0x0000000000000000000000004f05cf239a8bc2bfda92673bc3c8a87e091b6d97"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xcdebeafe8cae821f57b4261a5e755077b7ed1605e95025acbd1e22db44d4c4a0"
      }
    ],
    "blockNumber": 67546864,
    "cumulativeGasUsed": "9752811",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "026479a94a0487036a93211e4dc69f86",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IAccountList\",\"name\":\"accountList\",\"type\":\"address\"}],\"name\":\"AccountListChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IAccountList\",\"name\":\"allowedMsgSenders\",\"type\":\"address\"}],\"name\":\"AllowedMsgSendersChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"GlobalNetDepositCapChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newRoleAdminNominee\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminNomineeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"nominated\",\"type\":\"bool\"}],\"name\":\"RoleNomineeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"UserDepositCapChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SET_ACCOUNT_LIST_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SET_ALLOWED_MSG_SENDERS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SET_GLOBAL_NET_DEPOSIT_CAP_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SET_USER_DEPOSIT_CAP_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"acceptRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"acceptRoleAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccountList\",\"outputs\":[{\"internalType\":\"contract IAccountList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowedMsgSenders\",\"outputs\":[{\"internalType\":\"contract IAccountList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalNetDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalNetDepositCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdminNominee\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserDepositCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isNominated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recordDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recordWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeNomination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAccountList\",\"name\":\"accountList\",\"type\":\"address\"}],\"name\":\"setAccountList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAccountList\",\"name\":\"allowedMsgSenders\",\"type\":\"address\"}],\"name\":\"setAllowedMsgSenders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"globalNetDepositCap\",\"type\":\"uint256\"}],\"name\":\"setGlobalNetDepositCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"roleAdminNominee\",\"type\":\"bytes32\"}],\"name\":\"setRoleAdminNominee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userDepositCap\",\"type\":\"uint256\"}],\"name\":\"setUserDepositCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptRole(bytes32)\":{\"details\":\"Only callable by the role nominee.\",\"params\":{\"role\":\"The role of the nomination to be accepted\"}},\"acceptRoleAdmin(bytes32)\":{\"details\":\"Only callable by a member of the role admin nominee.\",\"params\":{\"role\":\"The role a role admin nomination is to be accepted for\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleAdminNominee(bytes32)\":{\"params\":{\"role\":\"The role to retrieve the role admin nominee for\"},\"returns\":{\"_0\":\"The current role admin nominee of `role`\"}},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isNominated(bytes32,address)\":{\"params\":{\"account\":\"The address to retrieve nomination status for\",\"role\":\"The role to retrieve nomination status for\"},\"returns\":{\"_0\":\"Whether `account` is nominated for `role`\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeNomination(bytes32,address)\":{\"details\":\"Only callable by a member of the role's current role admin.\",\"params\":{\"account\":\"Address for which nomination is to be revoked\",\"role\":\"The role of the nomination to be revoked\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptRole(bytes32)\":{\"notice\":\"Accepts a role nomination.\"},\"acceptRoleAdmin(bytes32)\":{\"notice\":\"Accepts a role admin nomination.\"},\"revokeNomination(bytes32,address)\":{\"notice\":\"Revokes a role nomination.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DepositRecord.sol\":\"DepositRecord\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/DepositRecord.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"./interfaces/IDepositRecord.sol\\\";\\nimport \\\"prepo-shared-contracts/contracts/AccountListCaller.sol\\\";\\nimport \\\"prepo-shared-contracts/contracts/AllowedMsgSenders.sol\\\";\\nimport \\\"prepo-shared-contracts/contracts/SafeAccessControlEnumerable.sol\\\";\\n\\ncontract DepositRecord is\\n  IDepositRecord,\\n  AccountListCaller,\\n  AllowedMsgSenders,\\n  SafeAccessControlEnumerable\\n{\\n  uint256 private _globalNetDepositCap;\\n  uint256 private _globalNetDepositAmount;\\n  uint256 private _userDepositCap;\\n  mapping(address => uint256) private _userToDeposits;\\n\\n  bytes32 public constant override SET_GLOBAL_NET_DEPOSIT_CAP_ROLE =\\n    keccak256(\\\"setGlobalNetDepositCap\\\");\\n  bytes32 public constant override SET_USER_DEPOSIT_CAP_ROLE =\\n    keccak256(\\\"setUserDepositCap\\\");\\n  bytes32 public constant override SET_ALLOWED_MSG_SENDERS_ROLE =\\n    keccak256(\\\"setAllowedMsgSenders\\\");\\n  bytes32 public constant override SET_ACCOUNT_LIST_ROLE =\\n    keccak256(\\\"setAccountList\\\");\\n\\n  function recordDeposit(address user, uint256 amount)\\n    external\\n    override\\n    onlyAllowedMsgSenders\\n  {\\n    require(\\n      amount + _globalNetDepositAmount <= _globalNetDepositCap,\\n      \\\"Global deposit cap exceeded\\\"\\n    );\\n    if (!_accountList.isIncluded(user)) {\\n      require(\\n        amount + _userToDeposits[user] <= _userDepositCap,\\n        \\\"User deposit cap exceeded\\\"\\n      );\\n    }\\n    _globalNetDepositAmount += amount;\\n    _userToDeposits[user] += amount;\\n  }\\n\\n  function recordWithdrawal(uint256 amount)\\n    external\\n    override\\n    onlyAllowedMsgSenders\\n  {\\n    if (_globalNetDepositAmount > amount) {\\n      _globalNetDepositAmount -= amount;\\n    } else {\\n      _globalNetDepositAmount = 0;\\n    }\\n  }\\n\\n  function setGlobalNetDepositCap(uint256 globalNetDepositCap)\\n    external\\n    override\\n    onlyRole(SET_GLOBAL_NET_DEPOSIT_CAP_ROLE)\\n  {\\n    _globalNetDepositCap = globalNetDepositCap;\\n    emit GlobalNetDepositCapChange(globalNetDepositCap);\\n  }\\n\\n  function setUserDepositCap(uint256 userDepositCap)\\n    external\\n    override\\n    onlyRole(SET_USER_DEPOSIT_CAP_ROLE)\\n  {\\n    _userDepositCap = userDepositCap;\\n    emit UserDepositCapChange(userDepositCap);\\n  }\\n\\n  function setAllowedMsgSenders(IAccountList allowedMsgSenders)\\n    public\\n    virtual\\n    override\\n    onlyRole(SET_ALLOWED_MSG_SENDERS_ROLE)\\n  {\\n    super.setAllowedMsgSenders(allowedMsgSenders);\\n  }\\n\\n  function setAccountList(IAccountList accountList)\\n    public\\n    virtual\\n    override\\n    onlyRole(SET_ACCOUNT_LIST_ROLE)\\n  {\\n    super.setAccountList(accountList);\\n  }\\n\\n  function getGlobalNetDepositCap() external view override returns (uint256) {\\n    return _globalNetDepositCap;\\n  }\\n\\n  function getGlobalNetDepositAmount()\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return _globalNetDepositAmount;\\n  }\\n\\n  function getUserDepositCap() external view override returns (uint256) {\\n    return _userDepositCap;\\n  }\\n\\n  function getUserDepositAmount(address account)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    return _userToDeposits[account];\\n  }\\n}\\n\",\"keccak256\":\"0x254adbeed3f3ecd60ff30d10273f64bf099d97d9c7794072c5aba7bfbef567d8\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IDepositRecord.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.7;\\n\\ninterface IDepositRecord {\\n  event GlobalNetDepositCapChange(uint256 cap);\\n\\n  event UserDepositCapChange(uint256 cap);\\n\\n  function recordDeposit(address sender, uint256 amount) external;\\n\\n  function recordWithdrawal(uint256 amount) external;\\n\\n  function setGlobalNetDepositCap(uint256 globalNetDepositCap) external;\\n\\n  function setUserDepositCap(uint256 userDepositCap) external;\\n\\n  function getGlobalNetDepositCap() external view returns (uint256);\\n\\n  function getGlobalNetDepositAmount() external view returns (uint256);\\n\\n  function getUserDepositCap() external view returns (uint256);\\n\\n  function getUserDepositAmount(address account)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function SET_GLOBAL_NET_DEPOSIT_CAP_ROLE() external view returns (bytes32);\\n\\n  function SET_USER_DEPOSIT_CAP_ROLE() external view returns (bytes32);\\n\\n  function SET_ALLOWED_MSG_SENDERS_ROLE() external view returns (bytes32);\\n\\n  function SET_ACCOUNT_LIST_ROLE() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x3279aed9ed6e5e3eda118f35432335a8d8c70ef21aacc654f86e95dd2948cb07\",\"license\":\"UNLICENSED\"},\"prepo-shared-contracts/contracts/AccountListCaller.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"./interfaces/IAccountList.sol\\\";\\nimport \\\"./interfaces/IAccountListCaller.sol\\\";\\n\\ncontract AccountListCaller is IAccountListCaller {\\n  IAccountList internal _accountList;\\n\\n  function setAccountList(IAccountList accountList) public virtual override {\\n    _accountList = accountList;\\n    emit AccountListChange(accountList);\\n  }\\n\\n  function getAccountList() external view override returns (IAccountList) {\\n    return _accountList;\\n  }\\n}\\n\",\"keccak256\":\"0x12cd09b8775e56bfc76bda395c26ee8fa8025bcedb69adf7da19f61fcb0ade1f\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/AllowedMsgSenders.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"./interfaces/IAllowedMsgSenders.sol\\\";\\nimport \\\"./interfaces/IAccountList.sol\\\";\\n\\ncontract AllowedMsgSenders is IAllowedMsgSenders {\\n  IAccountList private _allowedMsgSenders;\\n\\n  modifier onlyAllowedMsgSenders() {\\n    require(\\n      _allowedMsgSenders.isIncluded(msg.sender),\\n      \\\"msg.sender not allowed\\\"\\n    );\\n    _;\\n  }\\n\\n  function setAllowedMsgSenders(IAccountList allowedMsgSenders)\\n    public\\n    virtual\\n    override\\n  {\\n    _allowedMsgSenders = allowedMsgSenders;\\n    emit AllowedMsgSendersChange(allowedMsgSenders);\\n  }\\n\\n  function getAllowedMsgSenders()\\n    external\\n    view\\n    virtual\\n    override\\n    returns (IAccountList)\\n  {\\n    return _allowedMsgSenders;\\n  }\\n}\\n\",\"keccak256\":\"0x790db58e66e310775b8b77122b602eca6d766ef93dec5a09820c5b8df7c266ec\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/SafeAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"./interfaces/ISafeAccessControlEnumerable.sol\\\";\\n\\ncontract SafeAccessControlEnumerable is\\n  ISafeAccessControlEnumerable,\\n  AccessControlEnumerable\\n{\\n  mapping(bytes32 => bytes32) private _roleToRoleAdminNominee;\\n  mapping(bytes32 => mapping(address => bool))\\n    private _roleToAccountToNominated;\\n\\n  constructor() {\\n    _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n  }\\n\\n  function setRoleAdminNominee(bytes32 role, bytes32 roleAdminNominee)\\n    public\\n    virtual\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _setRoleAdminNominee(role, roleAdminNominee);\\n  }\\n\\n  function acceptRoleAdmin(bytes32 role)\\n    public\\n    virtual\\n    override\\n    onlyRole(_roleToRoleAdminNominee[role])\\n  {\\n    _setRoleAdmin(role, _roleToRoleAdminNominee[role]);\\n    _setRoleAdminNominee(role, 0x00);\\n  }\\n\\n  function grantRole(bytes32 role, address account)\\n    public\\n    virtual\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _setRoleNominee(role, account, true);\\n  }\\n\\n  function acceptRole(bytes32 role) public virtual override {\\n    require(\\n      _roleToAccountToNominated[role][_msgSender()],\\n      \\\"msg.sender != role nominee\\\"\\n    );\\n    _setRoleNominee(role, _msgSender(), false);\\n    _grantRole(role, _msgSender());\\n  }\\n\\n  function revokeNomination(bytes32 role, address account)\\n    public\\n    virtual\\n    override\\n    onlyRole(getRoleAdmin(role))\\n  {\\n    _setRoleNominee(role, account, false);\\n  }\\n\\n  function getRoleAdminNominee(bytes32 role)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bytes32)\\n  {\\n    return _roleToRoleAdminNominee[role];\\n  }\\n\\n  function isNominated(bytes32 role, address account)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return _roleToAccountToNominated[role][account];\\n  }\\n\\n  function _setRoleAdminNominee(bytes32 role, bytes32 newRoleAdminNominee)\\n    internal\\n    virtual\\n  {\\n    emit RoleAdminNomineeUpdate(\\n      _roleToRoleAdminNominee[role],\\n      newRoleAdminNominee\\n    );\\n    _roleToRoleAdminNominee[role] = newRoleAdminNominee;\\n  }\\n\\n  function _setRoleNominee(\\n    bytes32 role,\\n    address account,\\n    bool nominationStatus\\n  ) internal virtual {\\n    _roleToAccountToNominated[role][account] = nominationStatus;\\n    emit RoleNomineeUpdate(role, account, nominationStatus);\\n  }\\n}\\n\",\"keccak256\":\"0xcc537092825d69bf2702093664952a02aaebfbd5b7ee98d879427bb8c2fba770\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/IAccountList.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\n/**\\n * @notice Stores whether an address is included in a set.\\n */\\ninterface IAccountList {\\n  /**\\n   * @notice Sets whether an address in `accounts` is included.\\n   * @dev Whether an account is included is based on the boolean value at its\\n   * respective index in `included`. This function will only edit the\\n   * inclusion of addresses in `accounts`.\\n   *\\n   * The length of `accounts` and `included` must match.\\n   *\\n   * Only callable by `owner()`.\\n   * @param accounts Addresses to change inclusion for\\n   * @param included Whether to include corresponding address in `accounts`\\n   */\\n  function set(address[] calldata accounts, bool[] calldata included) external;\\n\\n  /**\\n   * @notice Removes every address from the set. Atomically includes any\\n   * addresses in `newIncludedAccounts`.\\n   * @dev Only callable by `owner()`.\\n   * @param includedAccounts Addresses to include after reset\\n   */\\n  function reset(address[] calldata includedAccounts) external;\\n\\n  /**\\n   * @param account Address to check inclusion for\\n   * @return Whether `account` is included\\n   */\\n  function isIncluded(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x46c75bd30d3ddf35d42bc109e27ccfac164ad532e4b222f916793ef683563208\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/IAccountListCaller.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"./IAccountList.sol\\\";\\n\\ninterface IAccountListCaller {\\n  event AccountListChange(IAccountList accountList);\\n\\n  function setAccountList(IAccountList accountList) external;\\n\\n  function getAccountList() external view returns (IAccountList);\\n}\\n\",\"keccak256\":\"0x55b69dde451080f58b444842a4e8ac67446f876377c05172c7a62b991a3493b9\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/IAllowedMsgSenders.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"./IAccountList.sol\\\";\\n\\ninterface IAllowedMsgSenders {\\n  event AllowedMsgSendersChange(IAccountList allowedMsgSenders);\\n\\n  function setAllowedMsgSenders(IAccountList allowedMsgSenders) external;\\n\\n  function getAllowedMsgSenders() external view returns (IAccountList);\\n}\\n\",\"keccak256\":\"0xd4c11399eac5ac705deb7e25fe1792ddf1f1d52d7a89ab9286a6801c652d0d62\",\"license\":\"AGPL-3.0\"},\"prepo-shared-contracts/contracts/interfaces/ISafeAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity =0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\\\";\\n\\n/**\\n * @notice An extension of OpenZeppelin's `AccessControlEnumerable.sol`\\n * contract that requires an address/role to initially be nominated, and then\\n * accepted, before the role or admin role is granted.\\n */\\ninterface ISafeAccessControlEnumerable is IAccessControlEnumerable {\\n  /**\\n   * @dev Emitted via `setRoleAdminNominee()` and `acceptRoleAdmin()`.\\n   * @param role The role an admin was nominated for\\n   * @param newRoleAdminNominee The role nominated as the new admin\\n   */\\n  event RoleAdminNomineeUpdate(bytes32 role, bytes32 newRoleAdminNominee);\\n\\n  /**\\n   * @dev Emitted via `grantRole()`, `acceptRole()`, and `revokeNomination()`.\\n   * @param role The role that an address's nomination status was changed for\\n   * @param account The nominee whose nomination status was changed\\n   * @param nominated Whether the address was nominated\\n   */\\n  event RoleNomineeUpdate(bytes32 role, address account, bool nominated);\\n\\n  /**\\n   * @notice Nominates a role to be a role admin.\\n   * @dev Only callable by a member of the role's current role admin.\\n   * @param role The role for which role admin is to be nominated\\n   * @param adminRoleNominee The role admin to be nominated\\n   */\\n  function setRoleAdminNominee(bytes32 role, bytes32 adminRoleNominee)\\n    external;\\n\\n  /**\\n   * @notice Accepts a role admin nomination.\\n   * @dev Only callable by a member of the role admin nominee.\\n   * @param role The role a role admin nomination is to be accepted for\\n   */\\n  function acceptRoleAdmin(bytes32 role) external;\\n\\n  /**\\n   * @notice Accepts a role nomination.\\n   * @dev Only callable by the role nominee.\\n   * @param role The role of the nomination to be accepted\\n   */\\n  function acceptRole(bytes32 role) external;\\n\\n  /**\\n   * @notice Revokes a role nomination.\\n   * @dev Only callable by a member of the role's current role admin.\\n   * @param role The role of the nomination to be revoked\\n   * @param account Address for which nomination is to be revoked\\n   */\\n  function revokeNomination(bytes32 role, address account) external;\\n\\n  /**\\n   * @param role The role to retrieve the role admin nominee for\\n   * @return The current role admin nominee of `role`\\n   */\\n  function getRoleAdminNominee(bytes32 role) external view returns (bytes32);\\n\\n  /**\\n   * @param role The role to retrieve nomination status for\\n   * @param account The address to retrieve nomination status for\\n   * @return Whether `account` is nominated for `role`\\n   */\\n  function isNominated(bytes32 role, address account)\\n    external\\n    view\\n    returns (bool);\\n}\\n\",\"keccak256\":\"0xeb8d09831920f9155cb57789d5e92933694b3d151a8b68f2973cf8cdc680b56f\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001f60003362000025565b6200018e565b62000031828262000035565b5050565b6200004c82826200007860201b62000bc81760201c565b60008281526003602090815260409091206200007391839062000c4e6200011c821b17901c565b505050565b60008281526002602090815260408083206001600160a01b038516845290915290205460ff16620000315760008281526002602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620000d83390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000133836001600160a01b0384166200013c565b90505b92915050565b6000818152600183016020526040812054620001855750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000136565b50600062000136565b61158c806200019e6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80636acfd6731161010f57806391d14854116100a2578063ca15c87311610071578063ca15c8731461049d578063cd0c1d96146104b0578063d338107e146104c3578063d547741f146104d657600080fd5b806391d1485414610448578063a2088cc91461045b578063a217fddf1461046e578063bd94904b1461047657600080fd5b806387bafc32116100de57806387bafc32146104075780638bb06b0b1461040f5780639010d07c146104225780639135b6c31461043557600080fd5b80636acfd6731461039a578063768ba6eb146103ad57806377eb716a146103d457806380db4329146103e757600080fd5b80632f2ff15d116101875780634712ccd2116101565780634712ccd2146103215780634b51193e146103295780635c449f7c1461035057806368f27d201461038957600080fd5b80632f2ff15d146102e057806336568abe146102f357806336fc17871461030657806340553ac11461031957600080fd5b80630cec2a76116101c35780630cec2a761461025c5780631e578bae14610285578063248a9ca3146102985780632843314e146102bb57600080fd5b806301ffc9a7146101ea578063095ef1ac146102125780630ab20d3f14610247575b600080fd5b6101fd6101f8366004611382565b6104e9565b60405190151581526020015b60405180910390f35b6102397fbf82397a3927acd3c3ad36b93381d84735dd62fe25270671ba9e02d1ee1e972881565b604051908152602001610209565b61025a610255366004611317565b610514565b005b61023961026a3660046112ac565b6001600160a01b031660009081526009602052604090205490565b61025a6102933660046112c9565b610609565b6102396102a6366004611317565b60009081526002602052604090206001015490565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610209565b61025a6102ee366004611330565b610864565b61025a610301366004611330565b610890565b61025a610314366004611317565b61090e565b600654610239565b600754610239565b6102397f8ed80d477aa11837d1ddc9dc23751899d7e3fe18c664a7dbc9a0341a34e81c0b81565b6101fd61035e366004611330565b60009182526005602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6001546001600160a01b03166102c8565b61025a6103a8366004611330565b61098d565b6102397f866b4848de4af255be133f7c25c7ee2d1d6f688d2da0be4351123daaf2c8f16c81565b61025a6103e2366004611317565b6109b4565b6102396103f5366004611317565b60009081526004602052604090205490565b600854610239565b61025a61041d366004611317565b610a1b565b6102c8610430366004611360565b610a58565b61025a610443366004611317565b610a77565b6101fd610456366004611330565b610ad6565b61025a6104693660046112ac565b610b01565b610239600081565b6102397f69fa7e30d0a933b5cf231c0c7bfb58ba5098b62118a7e5acb78259799e68e58981565b6102396104ab366004611317565b610b34565b61025a6104be366004611360565b610b4b565b61025a6104d13660046112ac565b610b70565b61025a6104e4366004611330565b610ba3565b60006001600160e01b03198216635a05180f60e01b148061050e575061050e82610c63565b92915050565b6001546040516304d93ff560e31b81523360048201526001600160a01b03909116906326c9ffa89060240160206040518083038186803b15801561055757600080fd5b505afa15801561056b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058f91906112f5565b6105d95760405162461bcd60e51b81526020600482015260166024820152751b5cd9cb9cd95b99195c881b9bdd08185b1b1bddd95960521b60448201526064015b60405180910390fd5b8060075411156106005780600760008282546105f5919061148b565b909155506106069050565b60006007555b50565b6001546040516304d93ff560e31b81523360048201526001600160a01b03909116906326c9ffa89060240160206040518083038186803b15801561064c57600080fd5b505afa158015610660573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068491906112f5565b6106c95760405162461bcd60e51b81526020600482015260166024820152751b5cd9cb9cd95b99195c881b9bdd08185b1b1bddd95960521b60448201526064016105d0565b6006546007546106d99083611454565b11156107275760405162461bcd60e51b815260206004820152601b60248201527f476c6f62616c206465706f73697420636170206578636565646564000000000060448201526064016105d0565b6000546040516304d93ff560e31b81526001600160a01b038481166004830152909116906326c9ffa89060240160206040518083038186803b15801561076c57600080fd5b505afa158015610780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a491906112f5565b61081c576008546001600160a01b0383166000908152600960205260409020546107ce9083611454565b111561081c5760405162461bcd60e51b815260206004820152601960248201527f55736572206465706f736974206361702065786365656465640000000000000060448201526064016105d0565b806007600082825461082e9190611454565b90915550506001600160a01b0382166000908152600960205260408120805483929061085b908490611454565b90915550505050565b60008281526002602052604090206001015461087f81610c98565b61088b83836001610ca2565b505050565b6001600160a01b03811633146109005760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016105d0565b61090a8282610d1a565b5050565b600081815260056020908152604080832033845290915290205460ff166109775760405162461bcd60e51b815260206004820152601a60248201527f6d73672e73656e64657220213d20726f6c65206e6f6d696e656500000000000060448201526064016105d0565b61098381336000610ca2565b6106068133610d3c565b6000828152600260205260409020600101546109a881610c98565b61088b83836000610ca2565b7f8ed80d477aa11837d1ddc9dc23751899d7e3fe18c664a7dbc9a0341a34e81c0b6109de81610c98565b60068290556040518281527f0391c1383c6b57c1a78c5b6cf5aeec5796e7e5c2e8a60c1303b80763c5696262906020015b60405180910390a15050565b600081815260046020526040902054610a3381610c98565b600082815260046020526040902054610a4d908390610d5e565b61090a826000610da9565b6000828152600360205260408120610a709083610e04565b9392505050565b7fbf82397a3927acd3c3ad36b93381d84735dd62fe25270671ba9e02d1ee1e9728610aa181610c98565b60088290556040518281527fed53e3744df7e0baa481ef16216782c98696f1fbcd93c1dedcf2100516ff0d4690602001610a0f565b60009182526002602090815260408084206001600160a01b0393909316845291905290205460ff1690565b7f866b4848de4af255be133f7c25c7ee2d1d6f688d2da0be4351123daaf2c8f16c610b2b81610c98565b61090a82610e10565b600081815260036020526040812061050e90610e65565b600082815260026020526040902060010154610b6681610c98565b61088b8383610da9565b7f69fa7e30d0a933b5cf231c0c7bfb58ba5098b62118a7e5acb78259799e68e589610b9a81610c98565b61090a82610e6f565b600082815260026020526040902060010154610bbe81610c98565b61088b8383610d1a565b610bd28282610ad6565b61090a5760008281526002602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610c0a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610a70836001600160a01b038416610ebd565b60006001600160e01b03198216637965db0b60e01b148061050e57506301ffc9a760e01b6001600160e01b031983161461050e565b6106068133610f0c565b60008381526005602090815260408083206001600160a01b03861680855290835292819020805460ff19168515159081179091558151878152928301939093528101919091527fd4eaea07a6439b4db5273291dd4d77f204d9eaf0d67149318c911f449f3df5d69060600160405180910390a1505050565b610d248282610f65565b600082815260036020526040902061088b9082610fcc565b610d468282610bc8565b600082815260036020526040902061088b9082610c4e565b600082815260026020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000828152600460209081526040918290205482519081529081018390527fb7f84e320be67bd09b884f0142b70ae1256025837c61650411a58567f9137c5d910160405180910390a160009182526004602052604090912055565b6000610a708383610fe1565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f0dacf1df82205439fd27104877c9ed6bec034e24daf9b3afb96f62191e0a7ea7906020015b60405180910390a150565b600061050e825490565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f310aaf5db2aa9335d0aebcc973d03748ed641890df20d89139a312856b5a675c90602001610e5a565b6000818152600183016020526040812054610f045750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561050e565b50600061050e565b610f168282610ad6565b61090a57610f238161100b565b610f2e83602061101d565b604051602001610f3f9291906113ac565b60408051601f198184030181529082905262461bcd60e51b82526105d091600401611421565b610f6f8282610ad6565b1561090a5760008281526002602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610a70836001600160a01b0384166111b9565b6000826000018281548110610ff857610ff8611515565b9060005260206000200154905092915050565b606061050e6001600160a01b03831660145b6060600061102c83600261146c565b611037906002611454565b67ffffffffffffffff81111561104f5761104f61152b565b6040519080825280601f01601f191660200182016040528015611079576020820181803683370190505b509050600360fc1b8160008151811061109457611094611515565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106110c3576110c3611515565b60200101906001600160f81b031916908160001a90535060006110e784600261146c565b6110f2906001611454565b90505b600181111561116a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061112657611126611515565b1a60f81b82828151811061113c5761113c611515565b60200101906001600160f81b031916908160001a90535060049490941c93611163816114d2565b90506110f5565b508315610a705760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105d0565b600081815260018301602052604081205480156112a25760006111dd60018361148b565b85549091506000906111f19060019061148b565b905081811461125657600086600001828154811061121157611211611515565b906000526020600020015490508087600001848154811061123457611234611515565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611267576112676114ff565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061050e565b600091505061050e565b6000602082840312156112be57600080fd5b8135610a7081611541565b600080604083850312156112dc57600080fd5b82356112e781611541565b946020939093013593505050565b60006020828403121561130757600080fd5b81518015158114610a7057600080fd5b60006020828403121561132957600080fd5b5035919050565b6000806040838503121561134357600080fd5b82359150602083013561135581611541565b809150509250929050565b6000806040838503121561137357600080fd5b50508035926020909101359150565b60006020828403121561139457600080fd5b81356001600160e01b031981168114610a7057600080fd5b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516113e48160178501602088016114a2565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516114158160288401602088016114a2565b01602801949350505050565b60208152600082518060208401526114408160408501602087016114a2565b601f01601f19169190910160400192915050565b60008219821115611467576114676114e9565b500190565b6000816000190483118215151615611486576114866114e9565b500290565b60008282101561149d5761149d6114e9565b500390565b60005b838110156114bd5781810151838201526020016114a5565b838111156114cc576000848401525b50505050565b6000816114e1576114e16114e9565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461060657600080fdfea26469706673582212202db46fac2f67daf80c63d6bc4c728c22500734b29f6116748692df079203320664736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c80636acfd6731161010f57806391d14854116100a2578063ca15c87311610071578063ca15c8731461049d578063cd0c1d96146104b0578063d338107e146104c3578063d547741f146104d657600080fd5b806391d1485414610448578063a2088cc91461045b578063a217fddf1461046e578063bd94904b1461047657600080fd5b806387bafc32116100de57806387bafc32146104075780638bb06b0b1461040f5780639010d07c146104225780639135b6c31461043557600080fd5b80636acfd6731461039a578063768ba6eb146103ad57806377eb716a146103d457806380db4329146103e757600080fd5b80632f2ff15d116101875780634712ccd2116101565780634712ccd2146103215780634b51193e146103295780635c449f7c1461035057806368f27d201461038957600080fd5b80632f2ff15d146102e057806336568abe146102f357806336fc17871461030657806340553ac11461031957600080fd5b80630cec2a76116101c35780630cec2a761461025c5780631e578bae14610285578063248a9ca3146102985780632843314e146102bb57600080fd5b806301ffc9a7146101ea578063095ef1ac146102125780630ab20d3f14610247575b600080fd5b6101fd6101f8366004611382565b6104e9565b60405190151581526020015b60405180910390f35b6102397fbf82397a3927acd3c3ad36b93381d84735dd62fe25270671ba9e02d1ee1e972881565b604051908152602001610209565b61025a610255366004611317565b610514565b005b61023961026a3660046112ac565b6001600160a01b031660009081526009602052604090205490565b61025a6102933660046112c9565b610609565b6102396102a6366004611317565b60009081526002602052604090206001015490565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610209565b61025a6102ee366004611330565b610864565b61025a610301366004611330565b610890565b61025a610314366004611317565b61090e565b600654610239565b600754610239565b6102397f8ed80d477aa11837d1ddc9dc23751899d7e3fe18c664a7dbc9a0341a34e81c0b81565b6101fd61035e366004611330565b60009182526005602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6001546001600160a01b03166102c8565b61025a6103a8366004611330565b61098d565b6102397f866b4848de4af255be133f7c25c7ee2d1d6f688d2da0be4351123daaf2c8f16c81565b61025a6103e2366004611317565b6109b4565b6102396103f5366004611317565b60009081526004602052604090205490565b600854610239565b61025a61041d366004611317565b610a1b565b6102c8610430366004611360565b610a58565b61025a610443366004611317565b610a77565b6101fd610456366004611330565b610ad6565b61025a6104693660046112ac565b610b01565b610239600081565b6102397f69fa7e30d0a933b5cf231c0c7bfb58ba5098b62118a7e5acb78259799e68e58981565b6102396104ab366004611317565b610b34565b61025a6104be366004611360565b610b4b565b61025a6104d13660046112ac565b610b70565b61025a6104e4366004611330565b610ba3565b60006001600160e01b03198216635a05180f60e01b148061050e575061050e82610c63565b92915050565b6001546040516304d93ff560e31b81523360048201526001600160a01b03909116906326c9ffa89060240160206040518083038186803b15801561055757600080fd5b505afa15801561056b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058f91906112f5565b6105d95760405162461bcd60e51b81526020600482015260166024820152751b5cd9cb9cd95b99195c881b9bdd08185b1b1bddd95960521b60448201526064015b60405180910390fd5b8060075411156106005780600760008282546105f5919061148b565b909155506106069050565b60006007555b50565b6001546040516304d93ff560e31b81523360048201526001600160a01b03909116906326c9ffa89060240160206040518083038186803b15801561064c57600080fd5b505afa158015610660573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068491906112f5565b6106c95760405162461bcd60e51b81526020600482015260166024820152751b5cd9cb9cd95b99195c881b9bdd08185b1b1bddd95960521b60448201526064016105d0565b6006546007546106d99083611454565b11156107275760405162461bcd60e51b815260206004820152601b60248201527f476c6f62616c206465706f73697420636170206578636565646564000000000060448201526064016105d0565b6000546040516304d93ff560e31b81526001600160a01b038481166004830152909116906326c9ffa89060240160206040518083038186803b15801561076c57600080fd5b505afa158015610780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a491906112f5565b61081c576008546001600160a01b0383166000908152600960205260409020546107ce9083611454565b111561081c5760405162461bcd60e51b815260206004820152601960248201527f55736572206465706f736974206361702065786365656465640000000000000060448201526064016105d0565b806007600082825461082e9190611454565b90915550506001600160a01b0382166000908152600960205260408120805483929061085b908490611454565b90915550505050565b60008281526002602052604090206001015461087f81610c98565b61088b83836001610ca2565b505050565b6001600160a01b03811633146109005760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016105d0565b61090a8282610d1a565b5050565b600081815260056020908152604080832033845290915290205460ff166109775760405162461bcd60e51b815260206004820152601a60248201527f6d73672e73656e64657220213d20726f6c65206e6f6d696e656500000000000060448201526064016105d0565b61098381336000610ca2565b6106068133610d3c565b6000828152600260205260409020600101546109a881610c98565b61088b83836000610ca2565b7f8ed80d477aa11837d1ddc9dc23751899d7e3fe18c664a7dbc9a0341a34e81c0b6109de81610c98565b60068290556040518281527f0391c1383c6b57c1a78c5b6cf5aeec5796e7e5c2e8a60c1303b80763c5696262906020015b60405180910390a15050565b600081815260046020526040902054610a3381610c98565b600082815260046020526040902054610a4d908390610d5e565b61090a826000610da9565b6000828152600360205260408120610a709083610e04565b9392505050565b7fbf82397a3927acd3c3ad36b93381d84735dd62fe25270671ba9e02d1ee1e9728610aa181610c98565b60088290556040518281527fed53e3744df7e0baa481ef16216782c98696f1fbcd93c1dedcf2100516ff0d4690602001610a0f565b60009182526002602090815260408084206001600160a01b0393909316845291905290205460ff1690565b7f866b4848de4af255be133f7c25c7ee2d1d6f688d2da0be4351123daaf2c8f16c610b2b81610c98565b61090a82610e10565b600081815260036020526040812061050e90610e65565b600082815260026020526040902060010154610b6681610c98565b61088b8383610da9565b7f69fa7e30d0a933b5cf231c0c7bfb58ba5098b62118a7e5acb78259799e68e589610b9a81610c98565b61090a82610e6f565b600082815260026020526040902060010154610bbe81610c98565b61088b8383610d1a565b610bd28282610ad6565b61090a5760008281526002602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610c0a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610a70836001600160a01b038416610ebd565b60006001600160e01b03198216637965db0b60e01b148061050e57506301ffc9a760e01b6001600160e01b031983161461050e565b6106068133610f0c565b60008381526005602090815260408083206001600160a01b03861680855290835292819020805460ff19168515159081179091558151878152928301939093528101919091527fd4eaea07a6439b4db5273291dd4d77f204d9eaf0d67149318c911f449f3df5d69060600160405180910390a1505050565b610d248282610f65565b600082815260036020526040902061088b9082610fcc565b610d468282610bc8565b600082815260036020526040902061088b9082610c4e565b600082815260026020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000828152600460209081526040918290205482519081529081018390527fb7f84e320be67bd09b884f0142b70ae1256025837c61650411a58567f9137c5d910160405180910390a160009182526004602052604090912055565b6000610a708383610fe1565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f0dacf1df82205439fd27104877c9ed6bec034e24daf9b3afb96f62191e0a7ea7906020015b60405180910390a150565b600061050e825490565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f310aaf5db2aa9335d0aebcc973d03748ed641890df20d89139a312856b5a675c90602001610e5a565b6000818152600183016020526040812054610f045750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561050e565b50600061050e565b610f168282610ad6565b61090a57610f238161100b565b610f2e83602061101d565b604051602001610f3f9291906113ac565b60408051601f198184030181529082905262461bcd60e51b82526105d091600401611421565b610f6f8282610ad6565b1561090a5760008281526002602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610a70836001600160a01b0384166111b9565b6000826000018281548110610ff857610ff8611515565b9060005260206000200154905092915050565b606061050e6001600160a01b03831660145b6060600061102c83600261146c565b611037906002611454565b67ffffffffffffffff81111561104f5761104f61152b565b6040519080825280601f01601f191660200182016040528015611079576020820181803683370190505b509050600360fc1b8160008151811061109457611094611515565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106110c3576110c3611515565b60200101906001600160f81b031916908160001a90535060006110e784600261146c565b6110f2906001611454565b90505b600181111561116a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061112657611126611515565b1a60f81b82828151811061113c5761113c611515565b60200101906001600160f81b031916908160001a90535060049490941c93611163816114d2565b90506110f5565b508315610a705760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105d0565b600081815260018301602052604081205480156112a25760006111dd60018361148b565b85549091506000906111f19060019061148b565b905081811461125657600086600001828154811061121157611211611515565b906000526020600020015490508087600001848154811061123457611234611515565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611267576112676114ff565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061050e565b600091505061050e565b6000602082840312156112be57600080fd5b8135610a7081611541565b600080604083850312156112dc57600080fd5b82356112e781611541565b946020939093013593505050565b60006020828403121561130757600080fd5b81518015158114610a7057600080fd5b60006020828403121561132957600080fd5b5035919050565b6000806040838503121561134357600080fd5b82359150602083013561135581611541565b809150509250929050565b6000806040838503121561137357600080fd5b50508035926020909101359150565b60006020828403121561139457600080fd5b81356001600160e01b031981168114610a7057600080fd5b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516113e48160178501602088016114a2565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516114158160288401602088016114a2565b01602801949350505050565b60208152600082518060208401526114408160408501602087016114a2565b601f01601f19169190910160400192915050565b60008219821115611467576114676114e9565b500190565b6000816000190483118215151615611486576114866114e9565b500290565b60008282101561149d5761149d6114e9565b500390565b60005b838110156114bd5781810151838201526020016114a5565b838111156114cc576000848401525b50505050565b6000816114e1576114e16114e9565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461060657600080fdfea26469706673582212202db46fac2f67daf80c63d6bc4c728c22500734b29f6116748692df079203320664736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptRole(bytes32)": {
        "details": "Only callable by the role nominee.",
        "params": {
          "role": "The role of the nomination to be accepted"
        }
      },
      "acceptRoleAdmin(bytes32)": {
        "details": "Only callable by a member of the role admin nominee.",
        "params": {
          "role": "The role a role admin nomination is to be accepted for"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleAdminNominee(bytes32)": {
        "params": {
          "role": "The role to retrieve the role admin nominee for"
        },
        "returns": {
          "_0": "The current role admin nominee of `role`"
        }
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isNominated(bytes32,address)": {
        "params": {
          "account": "The address to retrieve nomination status for",
          "role": "The role to retrieve nomination status for"
        },
        "returns": {
          "_0": "Whether `account` is nominated for `role`"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeNomination(bytes32,address)": {
        "details": "Only callable by a member of the role's current role admin.",
        "params": {
          "account": "Address for which nomination is to be revoked",
          "role": "The role of the nomination to be revoked"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptRole(bytes32)": {
        "notice": "Accepts a role nomination."
      },
      "acceptRoleAdmin(bytes32)": {
        "notice": "Accepts a role admin nomination."
      },
      "revokeNomination(bytes32,address)": {
        "notice": "Revokes a role nomination."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16603,
        "contract": "contracts/DepositRecord.sol:DepositRecord",
        "label": "_accountList",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAccountList)17439"
      },
      {
        "astId": 16639,
        "contract": "contracts/DepositRecord.sol:DepositRecord",
        "label": "_allowedMsgSenders",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IAccountList)17439"
      },
      {
        "astId": 4407,
        "contract": "contracts/DepositRecord.sol:DepositRecord",
        "label": "_roles",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)4402_storage)"
      },
      {
        "astId": 4717,
        "contract": "contracts/DepositRecord.sol:DepositRecord",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)9760_storage)"
      },
      {
        "astId": 16691,
        "contract": "contracts/DepositRecord.sol:DepositRecord",
        "label": "_roleToRoleAdminNominee",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 16697,
        "contract": "contracts/DepositRecord.sol:DepositRecord",
        "label": "_roleToAccountToNominated",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 11694,
        "contract": "contracts/DepositRecord.sol:DepositRecord",
        "label": "_globalNetDepositCap",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 11696,
        "contract": "contracts/DepositRecord.sol:DepositRecord",
        "label": "_globalNetDepositAmount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 11698,
        "contract": "contracts/DepositRecord.sol:DepositRecord",
        "label": "_userDepositCap",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 11702,
        "contract": "contracts/DepositRecord.sol:DepositRecord",
        "label": "_userToDeposits",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAccountList)17439": {
        "encoding": "inplace",
        "label": "contract IAccountList",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)9760_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)9760_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)4402_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)4402_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)9760_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 9759,
            "contract": "contracts/DepositRecord.sol:DepositRecord",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)9445_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)4402_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 4399,
            "contract": "contracts/DepositRecord.sol:DepositRecord",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 4401,
            "contract": "contracts/DepositRecord.sol:DepositRecord",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)9445_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 9440,
            "contract": "contracts/DepositRecord.sol:DepositRecord",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 9444,
            "contract": "contracts/DepositRecord.sol:DepositRecord",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
